{
  "abstract": false,
  "anchor": "#page-motors",
  "category": "pages",
  "const": false,
  "definition": "",
  "details": "For a full list of functions for interacting with the V5 Motors, see its C API and C++ API.\n\n\n## Initialization\n\nV5 Motors should be configured before use in your code. Configuration options like the gearset and encoder units are important to address first thing in your user program to ensure that functions like `[motor_move_velocity()](namespacepros_1_1c.md#function-motor_move_velocity)` will work as expected.\n\nWhen declaring motors in C++, it is not necessary to set the configuration for the motor with its constructor (beyond its port number) more than once for the given port. An example of this is given below.\n\n\n\n```cpp\n#define MOTOR_PORT 1\nvoid opcontrol() {\n  pros::Motor drive_left (MOTOR_PORT);\n  // drive_left will have the same configuration as drive_left_initializer\n}\n```\n\n_Filename: .cpp_\n\n\n## Simple Usage\n\nThe easiest way to interact with the motors is through the [motor_move](../../api/c/motors.html#motor-move) function.\n\n\n## Autonomous Movement\n\nThe V5 Motors can move in a number of different ways that are better suited towards autonomous movement than the simple `[motor_move()](namespacepros_1_1c.md#function-motor_move)` example shown above.\n\n\n### Profile Movements\n\nProfile movements are movements to a given position that are executed by the motor's firmware. There are two functions that achieve this, `[motor_move_absolute()](namespacepros_1_1c.md#function-motor_move_absolute)` and `[motor_move_relative()](namespacepros_1_1c.md#function-motor_move_relative)`. These two functions are practically similar, but `[motor_move_relative()](namespacepros_1_1c.md#function-motor_move_relative)` takes into account the zero position of the motor's encoder.\n\nThese functions are very well suited to movement in autonomous.\n\nFor further reading material on the algorithms that create these profiled movement, see [Mathematics of Motion Control Profiles](https://pdfs.semanticscholar.org/a229/fdba63d8d68abd09f70604d56cc07ee50f7d.pdf) for the [Feedforward](https://en.wikipedia.org/wiki/Feed_forward_(control)) control, and [George Gillard's PID Explanation](http://georgegillard.com/documents/2-introduction-to-pid-controllers) for the [feedback](https://en.wikipedia.org/wiki/Control_theory#PID_feedback_control) control.\n\n\n### Velocity Controller Movement\n\nThe final `move` function available with the PROS Motor API is `[motor_move_velocity()](namespacepros_1_1c.md#function-motor_move_velocity)`. This ensures consistent velocity output from the motor through the use of [PID](http://georgegillard.com/documents/2-introduction-to-pid-controllers). ",
  "explicit": false,
  "fullname": "::motors",
  "hasAdditionalMembers": false,
  "hasDetails": true,
  "inline": false,
  "kind": "page",
  "name": "motors",
  "override": false,
  "parent": null,
  "refid": "motors",
  "static": false,
  "strong": false,
  "title": "Motors",
  "url": "motors.md#page-motors",
  "visibility": "public"
}