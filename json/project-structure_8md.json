{
  "abstract": false,
  "anchor": "#file-project-structure.md",
  "category": "files",
  "const": false,
  "definition": "",
  "explicit": false,
  "fullname": "project-structure.md",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "inline": false,
  "kind": "file",
  "location": {
    "column": 0,
    "file": "docs/tutorials/general/project-structure.md",
    "line": 0
  },
  "name": "project-structure.md",
  "override": false,
  "parent": null,
  "programlisting": "\\page project-structure Project Structure\n\nPROS projects are internally composed of three parts: the **PROS\nlibrary** (found in `/firmware`), the **header** files (found in\n`/include`), and **user code** (found in `/src`).\n\n## firmware\n\nThe **PROS library** is a single file containing the core PROS routines.\nThis file does not need to be changed. If there appears to be an issue\nwith a core PROS function, please file an issue on\n[GitHub](https://github.com/purduesigbots/pros/issues).\n\n## include\n\nThe **header** files are all found in the `include` directory. One\nheader file, [api.h](../../api/index.html), is required to declare the\nPROS library functions. This file exists merely to include the\nindividual PROS API headers, all of which can be found in\n`include/pros`. Each header file in this directory covers a specific\naspect of interacting with the V5 hardware, and correlates to the files\nfound in the [API documentation](../../api/index.html).\n\nThe other file, `main.h`, is intended for declaring functions and\nvariables shared between the user code files. `main.h` also offers a\nvariety of configurable options for tailoring PROS to your needs.\n\n- `PROS_USE_SIMPLE_NAMES`: If defined, some commonly used enums will\n  have preprocessor macros which give a shorter, more convenient\n  naming pattern. For instance, E_CONTROLLER_MASTER has a shorter\n  name: `CONTROLLER_MASTER`. `E_CONTROLLER_MASTER` is pedantically\n  correct within the PROS styleguide, but not convenient for most\n  student programmers.\n- `using namespace pros`: This can be uncommented to be added with the\n  use of `PROS_USE_SIMPLE_NAMES`. This reduces the length of\n  declarations when using C++, allowing you to simply declare a\n  `Motor` instead of a `pros::Motor`. This will make the code appear\n  cleaner and will be simpler for newer programmers, but is typically\n  considered [bad\n  practice](https://msdn.microsoft.com/en-us/library/5cb46ksf.aspx).\n  As a result, this line is commented out by default.\n\nNew header files can be created in the include directory, as long as the\nname ends with `.h` (Traditionally for C files) or `.hpp` (for C++\nfiles). See this [C++\ntutorial](http://www.learncpp.com/cpp-tutorial/19-header-files/) for\nmore information on how to create header files.\n\n## src\n\n**User code** has the actual sequential instructions that govern the\nrobot's behavior. Prior to PROS kernel 3.2.0, new projects by default\nsplit user code into autonomous (`autonomous.c` or `autonomous.cpp`),\ndriver control (`opcontrol.c` or `opcontrol.cpp`), and initialization\n(`initialize.c` or `initialize.cpp`) files. Code in one file can talk to\ncode in another file using declarations in the header files. Beginning\nwith PROS kernel 3.2.0, new projects by default have a single `main.cpp`\nfile that contains all of the competition task functions.\n\nNew user code files can be created in the `src` directory, as long as\nthe name ends with `.c` or `.cpp` it will be compiled with the others.\n\nAll user code files should start with:\n\n    #include \"main.h\"\n\nThis will ensure that the PROS API and other critical definitions are\navailable in each file.\n\nWhile more complicated than some environments, splitting up code grants\npowerful modularity and code reusability, especially when combined with\nsource control.",
  "refid": "project-structure_8md",
  "static": false,
  "strong": false,
  "title": "project-structure.md",
  "url": "project-structure_8md.md#file-project-structure.md",
  "visibility": "public"
}