{
  "abstract": false,
  "anchor": "#file-rtos.h",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-task_priority_max",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "TASK_PRIORITY_MAX",
      "hasDetails": false,
      "initializer": "16",
      "inline": false,
      "kind": "define",
      "location": {
        "bodyFile": "pros/rtos.h",
        "bodyStart": 33,
        "column": 9,
        "file": "pros/rtos.h",
        "line": 33
      },
      "name": "TASK_PRIORITY_MAX",
      "override": false,
      "refid": "rtos_8h_1a87892f18571e88eba7fbe758759cac05",
      "static": false,
      "strong": false,
      "title": "TASK_PRIORITY_MAX",
      "url": "rtos_8h.md#define-task_priority_max",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-task_priority_min",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "TASK_PRIORITY_MIN",
      "hasDetails": false,
      "initializer": "1",
      "inline": false,
      "kind": "define",
      "location": {
        "bodyFile": "pros/rtos.h",
        "bodyStart": 37,
        "column": 9,
        "file": "pros/rtos.h",
        "line": 37
      },
      "name": "TASK_PRIORITY_MIN",
      "override": false,
      "refid": "rtos_8h_1ae35baef65db45cef90a74266acb31b10",
      "static": false,
      "strong": false,
      "title": "TASK_PRIORITY_MIN",
      "url": "rtos_8h.md#define-task_priority_min",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-task_priority_default",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "TASK_PRIORITY_DEFAULT",
      "hasDetails": false,
      "initializer": "8",
      "inline": false,
      "kind": "define",
      "location": {
        "bodyFile": "pros/rtos.h",
        "bodyStart": 41,
        "column": 9,
        "file": "pros/rtos.h",
        "line": 41
      },
      "name": "TASK_PRIORITY_DEFAULT",
      "override": false,
      "refid": "rtos_8h_1a3082a7e8f15691441dba683711bb823f",
      "static": false,
      "strong": false,
      "title": "TASK_PRIORITY_DEFAULT",
      "url": "rtos_8h.md#define-task_priority_default",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-task_stack_depth_default",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "TASK_STACK_DEPTH_DEFAULT",
      "hasDetails": false,
      "initializer": "0x2000",
      "inline": false,
      "kind": "define",
      "location": {
        "bodyFile": "pros/rtos.h",
        "bodyStart": 46,
        "column": 9,
        "file": "pros/rtos.h",
        "line": 46
      },
      "name": "TASK_STACK_DEPTH_DEFAULT",
      "override": false,
      "refid": "rtos_8h_1a9ffb33b9e3714ca949d9f45dde3cbf8f",
      "static": false,
      "strong": false,
      "title": "TASK_STACK_DEPTH_DEFAULT",
      "url": "rtos_8h.md#define-task_stack_depth_default",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-task_stack_depth_min",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "TASK_STACK_DEPTH_MIN",
      "hasDetails": false,
      "initializer": "0x200",
      "inline": false,
      "kind": "define",
      "location": {
        "bodyFile": "pros/rtos.h",
        "bodyStart": 50,
        "column": 9,
        "file": "pros/rtos.h",
        "line": 50
      },
      "name": "TASK_STACK_DEPTH_MIN",
      "override": false,
      "refid": "rtos_8h_1afa551bbf9a2333b9241b2e99530a8767",
      "static": false,
      "strong": false,
      "title": "TASK_STACK_DEPTH_MIN",
      "url": "rtos_8h.md#define-task_stack_depth_min",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-task_name_max_len",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "TASK_NAME_MAX_LEN",
      "hasDetails": false,
      "initializer": "32",
      "inline": false,
      "kind": "define",
      "location": {
        "bodyFile": "pros/rtos.h",
        "bodyStart": 53,
        "column": 9,
        "file": "pros/rtos.h",
        "line": 53
      },
      "name": "TASK_NAME_MAX_LEN",
      "override": false,
      "refid": "rtos_8h_1a6d22565b4bdfe36c8f8a0a376e565460",
      "static": false,
      "strong": false,
      "title": "TASK_NAME_MAX_LEN",
      "url": "rtos_8h.md#define-task_name_max_len",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-timeout_max",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "TIMEOUT_MAX",
      "hasDetails": false,
      "initializer": "((uint32_t)0xffffffffUL)",
      "inline": false,
      "kind": "define",
      "location": {
        "bodyFile": "pros/rtos.h",
        "bodyStart": 56,
        "column": 9,
        "file": "pros/rtos.h",
        "line": 56
      },
      "name": "TIMEOUT_MAX",
      "override": false,
      "refid": "rtos_8h_1a9146d5b264ff64b573607d62fc479c3f",
      "static": false,
      "strong": false,
      "title": "TIMEOUT_MAX",
      "url": "rtos_8h.md#define-timeout_max",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-current_task",
      "brief": "Refers to the current task handle. ",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "CURRENT_TASK",
      "hasDetails": false,
      "initializer": "(([pros::task_t](namespacepros.md#typedef-task_t))NULL)",
      "inline": false,
      "kind": "define",
      "location": {
        "bodyFile": "pros/rtos.h",
        "bodyStart": 112,
        "column": 9,
        "file": "pros/rtos.h",
        "line": 112
      },
      "name": "CURRENT_TASK",
      "override": false,
      "refid": "rtos_8h_1ad028cb03c935557184a71a6c53915065",
      "static": false,
      "strong": false,
      "summary": "Refers to the current task handle. ",
      "title": "CURRENT_TASK",
      "url": "rtos_8h.md#define-current_task",
      "visibility": "public"
    }
  ],
  "definition": "",
  "details": "Contains declarations for the PROS RTOS kernel for use by typical VEX programmers.\n\nVisit [https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html](https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html) to learn more.\n\nThis file should not be modified by users, since it gets replaced whenever a kernel upgrade occurs.\n\nCopyright (c) 2017-2020, Purdue University ACM SIGBots. All rights reserved.\n\nThis Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at [http://mozilla.org/MPL/2.0/](http://mozilla.org/MPL/2.0/). ",
  "explicit": false,
  "fullname": "pros/rtos.h",
  "hasAdditionalMembers": false,
  "hasDetails": true,
  "includes": "<stdbool.h>",
  "inline": false,
  "kind": "file",
  "location": {
    "column": 0,
    "file": "pros/rtos.h",
    "line": 0
  },
  "name": "pros/rtos.h",
  "namespaces": [
    {
      "anchor": "",
      "brief": "Get the current status of the competition control. ",
      "category": "namespaces",
      "fullname": "pros",
      "kind": "namespace",
      "name": "pros",
      "refid": "namespacepros",
      "summary": "Get the current status of the competition control. ",
      "title": "pros",
      "url": "namespacepros.md",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "pros::c",
      "kind": "namespace",
      "name": "pros::c",
      "refid": "namespacepros_1_1c",
      "title": "pros::c",
      "url": "namespacepros_1_1c.md",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-pros",
    "category": "dirs",
    "fullname": "pros",
    "kind": "dir",
    "name": "pros",
    "refid": "dir_214b722ca0199f3055230149c608b806",
    "title": "pros",
    "url": "dir_214b722ca0199f3055230149c608b806.md#dir-pros",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-pros",
      "category": "dirs",
      "fullname": "pros",
      "kind": "dir",
      "name": "pros",
      "refid": "dir_214b722ca0199f3055230149c608b806",
      "title": "pros",
      "url": "dir_214b722ca0199f3055230149c608b806.md#dir-pros",
      "visibility": "public"
    }
  ],
  "programlisting": "/**\n * \\file pros/rtos.h\n *\n * Contains declarations for the PROS RTOS kernel for use by typical VEX\n * programmers.\n *\n * Visit https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html to\n * learn more.\n *\n * This file should not be modified by users, since it gets replaced whenever\n * a kernel upgrade occurs.\n *\n * Copyright (c) 2017-2020, Purdue University ACM SIGBots.\n * All rights reserved.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\n#ifndef _PROS_RTOS_H_\n#define _PROS_RTOS_H_\n\n#include <stdbool.h>\n#include <stdint.h>\n\n#ifdef __cplusplus\nextern \"C\" {\nnamespace pros {\n#endif\n\n// The highest priority that can be assigned to a task. Beware of deadlock.\n#define TASK_PRIORITY_MAX 16\n\n// The lowest priority that can be assigned to a task.\n// This may cause severe performance problems and is generally not recommended.\n#define TASK_PRIORITY_MIN 1\n\n// The default task priority, which should be used for most tasks.\n// Default tasks such as autonomous() inherit this priority.\n#define TASK_PRIORITY_DEFAULT 8\n\n// The recommended stack size for a new task. This stack size is used for\n// default tasks such as autonomous(). This equates to 32,768 bytes, or 128\n// times the default stack size for a task in PROS 2.\n#define TASK_STACK_DEPTH_DEFAULT 0x2000\n\n// The minimal stack size for a task. This equates to 2048 bytes, or 8 times the\n// default stack size for a task in PROS 2.\n#define TASK_STACK_DEPTH_MIN 0x200\n\n// The maximum number of characters allowed in a task's name.\n#define TASK_NAME_MAX_LEN 32\n\n// The maximum timeout value that can be given to, for instance, a mutex grab.\n#define TIMEOUT_MAX ((uint32_t)0xffffffffUL)\n\ntypedef void* task_t;\ntypedef void (*task_fn_t)(void*);\n\ntypedef enum {\n    E_TASK_STATE_RUNNING = 0,\n    E_TASK_STATE_READY,\n    E_TASK_STATE_BLOCKED,\n    E_TASK_STATE_SUSPENDED,\n    E_TASK_STATE_DELETED,\n    E_TASK_STATE_INVALID\n} task_state_e_t;\n\ntypedef enum {\n    E_NOTIFY_ACTION_NONE,\n    E_NOTIFY_ACTION_BITS,\n    E_NOTIFY_ACTION_INCR,\n    E_NOTIFY_ACTION_OWRITE,\n    E_NOTIFY_ACTION_NO_OWRITE\n} notify_action_e_t;\n\n#ifdef PROS_USE_SIMPLE_NAMES\n#ifdef __cplusplus\n#define TASK_STATE_RUNNING pros::E_TASK_STATE_RUNNING\n#define TASK_STATE_READY pros::E_TASK_STATE_READY\n#define TASK_STATE_BLOCKED pros::E_TASK_STATE_BLOCKED\n#define TASK_STATE_SUSPENDED pros::E_TASK_STATE_SUSPENDED\n#define TASK_STATE_DELETED pros::E_TASK_STATE_DELETED\n#define TASK_STATE_INVALID pros::E_TASK_STATE_INVALID\n#define NOTIFY_ACTION_NONE pros::E_NOTIFY_ACTION_NONE\n#define NOTIFY_ACTION_BITS pros::E_NOTIFY_ACTION_BITS\n#define NOTIFY_ACTION_INCR pros::E_NOTIFY_ACTION_INCR\n#define NOTIFY_ACTION_OWRITE pros::E_NOTIFY_ACTION_OWRITE\n#define NOTIFY_ACTION_NO_OWRITE pros::E_NOTIFY_ACTION_NO_OWRITE\n#else\n#define TASK_STATE_RUNNING E_TASK_STATE_RUNNING\n#define TASK_STATE_READY E_TASK_STATE_READY\n#define TASK_STATE_BLOCKED E_TASK_STATE_BLOCKED\n#define TASK_STATE_SUSPENDED E_TASK_STATE_SUSPENDED\n#define TASK_STATE_DELETED E_TASK_STATE_DELETED\n#define TASK_STATE_INVALID E_TASK_STATE_INVALID\n#define NOTIFY_ACTION_NONE E_NOTIFY_ACTION_NONE\n#define NOTIFY_ACTION_BITS E_NOTIFY_ACTION_BITS\n#define NOTIFY_ACTION_INCR E_NOTIFY_ACTION_INCR\n#define NOTIFY_ACTION_OWRITE E_NOTIFY_ACTION_OWRITE\n#define NOTIFY_ACTION_NO_OWRITE E_NOTIFY_ACTION_NO_OWRITE\n#endif\n#endif\n\ntypedef void* mutex_t;\n\n/**\n * Refers to the current task handle\n */\n#ifdef __cplusplus\n#define CURRENT_TASK ((pros::task_t)NULL)\n#else\n#define CURRENT_TASK ((task_t)NULL)\n#endif\n\n#ifdef __cplusplus\nnamespace c {\n#endif\n\n/**\n * Gets the number of milliseconds since PROS initialized.\n *\n * \\return The number of milliseconds since PROS initialized\n */\nuint32_t millis(void);\n\n/**\n * Creates a new task and add it to the list of tasks that are ready to run.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENOMEM - The stack cannot be used as the TCB was not created.\n *\n * \\param function\n *        Pointer to the task entry function\n * \\param parameters\n *        Pointer to memory that will be used as a parameter for the task being\n *        created. This memory should not typically come from stack, but rather\n *        from dynamically (i.e., malloc'd) or statically allocated memory.\n * \\param prio\n *        The priority at which the task should run.\n *        TASK_PRIO_DEFAULT plus/minus 1 or 2 is typically used.\n * \\param stack_depth\n *        The number of words (i.e. 4 * stack_depth) available on the task's\n *        stack. TASK_STACK_DEPTH_DEFAULT is typically sufficienct.\n * \\param name\n *        A descriptive name for the task.  This is mainly used to facilitate\n *        debugging. The name may be up to 32 characters long.\n *\n * \\return A handle by which the newly created task can be referenced. If an\n * error occurred, NULL will be returned and errno can be checked for hints as\n * to why task_create failed.\n */\ntask_t task_create(task_fn_t function, void* const parameters, uint32_t prio, const uint16_t stack_depth,\n                   const char* const name);\n\n/**\n * Removes a task from the RTOS real time kernel's management. The task being\n * deleted will be removed from all ready, blocked, suspended and event lists.\n *\n * Memory dynamically allocated by the task is not automatically freed, and\n * should be freed before the task is deleted.\n *\n * \\param task\n *        The handle of the task to be deleted.  Passing NULL will cause the\n *        calling task to be deleted.\n */\nvoid task_delete(task_t task);\n\n/**\n * Delays a task for a given number of milliseconds.\n *\n * This is not the best method to have a task execute code at predefined\n * intervals, as the delay time is measured from when the delay is requested.\n * To delay cyclically, use task_delay_until().\n *\n * \\param milliseconds\n *        The number of milliseconds to wait (1000 milliseconds per second)\n */\nvoid task_delay(const uint32_t milliseconds);\n\nvoid delay(const uint32_t milliseconds);\n\n/**\n * Delays a task until a specified time.  This function can be used by periodic\n * tasks to ensure a constant execution frequency.\n *\n * The task will be woken up at the time *prev_time + delta, and *prev_time will\n * be updated to reflect the time at which the task will unblock.\n *\n * \\param prev_time\n *        A pointer to the location storing the setpoint time. This should\n *        typically be initialized to the return value of millis().\n * \\param delta\n *        The number of milliseconds to wait (1000 milliseconds per second)\n */\nvoid task_delay_until(uint32_t* const prev_time, const uint32_t delta);\n\n/**\n * Gets the priority of the specified task.\n *\n * \\param task\n *        The task to check\n *\n * \\return The priority of the task\n */\nuint32_t task_get_priority(task_t task);\n\n/**\n * Sets the priority of the specified task.\n *\n * If the specified task's state is available to be scheduled (e.g. not blocked)\n * and new priority is higher than the currently running task, a context switch\n * may occur.\n *\n * \\param task\n *        The task to set\n * \\param prio\n *        The new priority of the task\n */\nvoid task_set_priority(task_t task, uint32_t prio);\n\n/**\n * Gets the state of the specified task.\n *\n * \\param task\n *        The task to check\n *\n * \\return The state of the task\n */\ntask_state_e_t task_get_state(task_t task);\n\n/**\n * Suspends the specified task, making it ineligible to be scheduled.\n *\n * \\param task\n *        The task to suspend\n */\nvoid task_suspend(task_t task);\n\n/**\n * Resumes the specified task, making it eligible to be scheduled.\n *\n * \\param task\n *        The task to resume\n */\nvoid task_resume(task_t task);\n\n/**\n * Gets the number of tasks the kernel is currently managing, including all\n * ready, blocked, or suspended tasks. A task that has been deleted, but not yet\n * reaped by the idle task will also be included in the count. Tasks recently\n * created may take one context switch to be counted.\n *\n * \\return The number of tasks that are currently being managed by the kernel.\n */\nuint32_t task_get_count(void);\n\n/**\n * Gets the name of the specified task.\n *\n * \\param task\n *        The task to check\n *\n * \\return A pointer to the name of the task\n */\nchar* task_get_name(task_t task);\n\n/**\n * Gets a task handle from the specified name\n *\n * The operation takes a relatively long time and should be used sparingly.\n *\n * \\param name\n *        The name to query\n *\n * \\return A task handle with a matching name, or NULL if none were found.\n */\ntask_t task_get_by_name(const char* name);\n\n/**\n * Get the currently running task handle. This could be useful if a task\n * wants to tell another task about itself.\n *\n * \\return The currently running task handle.\n */\ntask_t task_get_current();\n\n/**\n * Sends a simple notification to task and increments the notification counter.\n *\n * See https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html for\n * details.\n *\n * \\param task\n *        The task to notify\n *\n * \\return Always returns true.\n */\nuint32_t task_notify(task_t task);\n\n/**\n * Sends a notification to a task, optionally performing some action. Will also\n * retrieve the value of the notification in the target task before modifying\n * the notification value.\n *\n * See https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html for\n * details.\n *\n * \\param task\n *        The task to notify\n * \\param value\n *        The value used in performing the action\n * \\param action\n *        An action to optionally perform on the receiving task's notification\n *        value\n * \\param prev_value\n *        A pointer to store the previous value of the target task's\n *        notification, may be NULL\n *\n * \\return Dependent on the notification action.\n * For NOTIFY_ACTION_NO_WRITE: return 0 if the value could be written without\n * needing to overwrite, 1 otherwise.\n * For all other NOTIFY_ACTION values: always return 0\n */\nuint32_t task_notify_ext(task_t task, uint32_t value, notify_action_e_t action, uint32_t* prev_value);\n\n/**\n * Waits for a notification to be nonzero.\n *\n * See https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html for\n * details.\n *\n * \\param clear_on_exit\n *        If true (1), then the notification value is cleared.\n *        If false (0), then the notification value is decremented.\n * \\param timeout\n *        Specifies the amount of time to be spent waiting for a notification\n *        to occur.\n *\n * \\return The value of the task's notification value before it is decremented\n * or cleared\n */\nuint32_t task_notify_take(bool clear_on_exit, uint32_t timeout);\n\n/**\n * Clears the notification for a task.\n *\n * See https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html for\n * details.\n *\n * \\param task\n *        The task to clear\n *\n * \\return False if there was not a notification waiting, true if there was\n */\nbool task_notify_clear(task_t task);\n\n/**\n * Creates a mutex.\n *\n * See https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes\n * for details.\n *\n * \\return A handle to a newly created mutex. If an error occurred, NULL will be\n * returned and errno can be checked for hints as to why mutex_create failed.\n */\nmutex_t mutex_create(void);\n\n/**\n * Takes and locks a mutex, waiting for up to a certain number of milliseconds\n * before timing out.\n *\n * See https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes\n * for details.\n *\n * \\param mutex\n *        Mutex to attempt to lock.\n * \\param timeout\n *        Time to wait before the mutex becomes available. A timeout of 0 can\n *        be used to poll the mutex. TIMEOUT_MAX can be used to block\n *        indefinitely.\n *\n * \\return True if the mutex was successfully taken, false otherwise. If false\n * is returned, then errno is set with a hint about why the the mutex\n * couldn't be taken.\n */\nbool mutex_take(mutex_t mutex, uint32_t timeout);\n\n/**\n * Unlocks a mutex.\n *\n * See https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes\n * for details.\n *\n * \\param mutex\n *        Mutex to unlock.\n *\n * \\return True if the mutex was successfully returned, false otherwise. If\n * false is returned, then errno is set with a hint about why the mutex\n * couldn't be returned.\n */\nbool mutex_give(mutex_t mutex);\n\n/**\n * Deletes a mutex\n *\n * \\param mutex\n *        Mutex to unlock.\n */\nvoid mutex_delete(mutex_t mutex);\n\n#ifdef __cplusplus\n}  // namespace c\n}  // namespace pros\n}\n#endif\n\n#endif  // _PROS_RTOS_H_",
  "publicFunctions": [
    {
      "abstract": false,
      "anchor": "#function-millis",
      "argsString": "(void)",
      "brief": "Gets the number of milliseconds since PROS initialized. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "uint32_t pros::c::millis",
      "deleted": false,
      "explicit": false,
      "fullname": "rtos.h::millis",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 10,
        "file": "pros/rtos.h",
        "line": 126
      },
      "name": "millis",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "void",
          "typePlain": "void"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1aa247cd38039665b7ac4b0d0920b83c80",
      "returns": [
        "The number of milliseconds since PROS initialized "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the number of milliseconds since PROS initialized. ",
      "title": "millis",
      "type": "uint32_t",
      "typePlain": "uint32_t",
      "url": "rtos_8h.md#function-millis",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_create",
      "argsString": "(task_fn_t function, void *const parameters, uint32_t prio, const uint16_t stack_depth, const char *const name)",
      "brief": "Creates a new task and add it to the list of tasks that are ready to run. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "task_t pros::c::task_create",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENOMEM - The stack cannot be used as the TCB was not created.",
      "explicit": false,
      "fullname": "rtos.h::task_create",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "pros/rtos.h",
        "line": 155
      },
      "name": "task_create",
      "override": false,
      "paramList": [
        {
          "name": "function",
          "text": "Pointer to the task entry function "
        },
        {
          "name": "parameters",
          "text": "Pointer to memory that will be used as a parameter for the task being created. This memory should not typically come from stack, but rather from dynamically (i.e., malloc'd) or statically allocated memory. "
        },
        {
          "name": "prio",
          "text": "The priority at which the task should run. TASK_PRIO_DEFAULT plus/minus 1 or 2 is typically used. "
        },
        {
          "name": "stack_depth",
          "text": "The number of words (i.e. 4 * stack_depth) available on the task's stack. TASK_STACK_DEPTH_DEFAULT is typically sufficienct. "
        },
        {
          "name": "name",
          "text": "A descriptive name for the task. This is mainly used to facilitate debugging. The name may be up to 32 characters long."
        }
      ],
      "params": [
        {
          "name": "function",
          "type": "[task_fn_t](kapi_8h.md#define-task_fn_t)",
          "typePlain": "task_fn_t"
        },
        {
          "name": "parameters",
          "type": "void *const",
          "typePlain": "void *const"
        },
        {
          "name": "prio",
          "type": "uint32_t",
          "typePlain": "uint32_t"
        },
        {
          "name": "stack_depth",
          "type": "const uint16_t",
          "typePlain": "const uint16_t"
        },
        {
          "name": "name",
          "type": "const char *const",
          "typePlain": "const char *const"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ab7f6e243b717091fec2bac6405bd3d56",
      "returns": [
        "A handle by which the newly created task can be referenced. If an error occurred, NULL will be returned and errno can be checked for hints as to why task_create failed. "
      ],
      "static": false,
      "strong": false,
      "summary": "Creates a new task and add it to the list of tasks that are ready to run. ",
      "title": "task_create",
      "type": "[task_t](kapi_8h.md#define-task_t)",
      "typePlain": "task_t",
      "url": "rtos_8h.md#function-task_create",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_delete",
      "argsString": "(task_t task)",
      "brief": "Removes a task from the RTOS real time kernel's management. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void pros::c::task_delete",
      "deleted": false,
      "details": "The task being deleted will be removed from all ready, blocked, suspended and event lists.\n\nMemory dynamically allocated by the task is not automatically freed, and should be freed before the task is deleted.",
      "explicit": false,
      "fullname": "rtos.h::task_delete",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/rtos.h",
        "line": 169
      },
      "name": "task_delete",
      "override": false,
      "paramList": [
        {
          "name": "task",
          "text": "The handle of the task to be deleted. Passing NULL will cause the calling task to be deleted. "
        }
      ],
      "params": [
        {
          "name": "task",
          "type": "[task_t](kapi_8h.md#define-task_t)",
          "typePlain": "task_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a9f5bd026f982b738d8761c443af586da",
      "static": false,
      "strong": false,
      "summary": "Removes a task from the RTOS real time kernel's management. ",
      "title": "task_delete",
      "type": "void",
      "typePlain": "void",
      "url": "rtos_8h.md#function-task_delete",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_delay",
      "argsString": "(const uint32_t milliseconds)",
      "brief": "Delays a task for a given number of milliseconds. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void pros::c::task_delay",
      "deleted": false,
      "details": "This is not the best method to have a task execute code at predefined intervals, as the delay time is measured from when the delay is requested. To delay cyclically, use [task_delay_until()](namespacepros_1_1c.md#function-task_delay_until).",
      "explicit": false,
      "fullname": "rtos.h::task_delay",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/rtos.h",
        "line": 181
      },
      "name": "task_delay",
      "override": false,
      "paramList": [
        {
          "name": "milliseconds",
          "text": "The number of milliseconds to wait (1000 milliseconds per second) "
        }
      ],
      "params": [
        {
          "name": "milliseconds",
          "type": "const uint32_t",
          "typePlain": "const uint32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a4954a1ed8e37fd9b758ff98bf3ecf7d4",
      "static": false,
      "strong": false,
      "summary": "Delays a task for a given number of milliseconds. ",
      "title": "task_delay",
      "type": "void",
      "typePlain": "void",
      "url": "rtos_8h.md#function-task_delay",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-delay",
      "argsString": "(const uint32_t milliseconds)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void pros::c::delay",
      "deleted": false,
      "explicit": false,
      "fullname": "rtos.h::delay",
      "hasDetails": false,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/rtos.h",
        "line": 183
      },
      "name": "delay",
      "override": false,
      "params": [
        {
          "name": "milliseconds",
          "type": "const uint32_t",
          "typePlain": "const uint32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a6a62f5325d65f95436762552df547d73",
      "static": false,
      "strong": false,
      "title": "delay",
      "type": "void",
      "typePlain": "void",
      "url": "rtos_8h.md#function-delay",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_delay_until",
      "argsString": "(uint32_t *const prev_time, const uint32_t delta)",
      "brief": "Delays a task until a specified time. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void pros::c::task_delay_until",
      "deleted": false,
      "details": "This function can be used by periodic tasks to ensure a constant execution frequency.\n\nThe task will be woken up at the time *prev_time + delta, and *prev_time will be updated to reflect the time at which the task will unblock.",
      "explicit": false,
      "fullname": "rtos.h::task_delay_until",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/rtos.h",
        "line": 198
      },
      "name": "task_delay_until",
      "override": false,
      "paramList": [
        {
          "name": "prev_time",
          "text": "A pointer to the location storing the setpoint time. This should typically be initialized to the return value of [millis()](namespacepros_1_1c.md#function-millis). "
        },
        {
          "name": "delta",
          "text": "The number of milliseconds to wait (1000 milliseconds per second) "
        }
      ],
      "params": [
        {
          "name": "prev_time",
          "type": "uint32_t *const",
          "typePlain": "uint32_t *const"
        },
        {
          "name": "delta",
          "type": "const uint32_t",
          "typePlain": "const uint32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a151eaf730a10d101bff15013a76b9aa8",
      "static": false,
      "strong": false,
      "summary": "Delays a task until a specified time. ",
      "title": "task_delay_until",
      "type": "void",
      "typePlain": "void",
      "url": "rtos_8h.md#function-task_delay_until",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_get_priority",
      "argsString": "(task_t task)",
      "brief": "Gets the priority of the specified task. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "uint32_t pros::c::task_get_priority",
      "deleted": false,
      "explicit": false,
      "fullname": "rtos.h::task_get_priority",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 10,
        "file": "pros/rtos.h",
        "line": 208
      },
      "name": "task_get_priority",
      "override": false,
      "paramList": [
        {
          "name": "task",
          "text": "The task to check"
        }
      ],
      "params": [
        {
          "name": "task",
          "type": "[task_t](kapi_8h.md#define-task_t)",
          "typePlain": "task_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ab49c228af50a4677d45e4622fb5f982b",
      "returns": [
        "The priority of the task "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the priority of the specified task. ",
      "title": "task_get_priority",
      "type": "uint32_t",
      "typePlain": "uint32_t",
      "url": "rtos_8h.md#function-task_get_priority",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_set_priority",
      "argsString": "(task_t task, uint32_t prio)",
      "brief": "Sets the priority of the specified task. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void pros::c::task_set_priority",
      "deleted": false,
      "details": "If the specified task's state is available to be scheduled (e.g. not blocked) and new priority is higher than the currently running task, a context switch may occur.",
      "explicit": false,
      "fullname": "rtos.h::task_set_priority",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/rtos.h",
        "line": 222
      },
      "name": "task_set_priority",
      "override": false,
      "paramList": [
        {
          "name": "task",
          "text": "The task to set "
        },
        {
          "name": "prio",
          "text": "The new priority of the task "
        }
      ],
      "params": [
        {
          "name": "task",
          "type": "[task_t](kapi_8h.md#define-task_t)",
          "typePlain": "task_t"
        },
        {
          "name": "prio",
          "type": "uint32_t",
          "typePlain": "uint32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a6f4a1c359ab23c7811ed524aa8f71e06",
      "static": false,
      "strong": false,
      "summary": "Sets the priority of the specified task. ",
      "title": "task_set_priority",
      "type": "void",
      "typePlain": "void",
      "url": "rtos_8h.md#function-task_set_priority",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_get_state",
      "argsString": "(task_t task)",
      "brief": "Gets the state of the specified task. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "task_state_e_t pros::c::task_get_state",
      "deleted": false,
      "explicit": false,
      "fullname": "rtos.h::task_get_state",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 16,
        "file": "pros/rtos.h",
        "line": 232
      },
      "name": "task_get_state",
      "override": false,
      "paramList": [
        {
          "name": "task",
          "text": "The task to check"
        }
      ],
      "params": [
        {
          "name": "task",
          "type": "[task_t](kapi_8h.md#define-task_t)",
          "typePlain": "task_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a2e78836b08bab39de392cc6583383c5c",
      "returns": [
        "The state of the task "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the state of the specified task. ",
      "title": "task_get_state",
      "type": "task_state_e_t",
      "typePlain": "task_state_e_t",
      "url": "rtos_8h.md#function-task_get_state",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_suspend",
      "argsString": "(task_t task)",
      "brief": "Suspends the specified task, making it ineligible to be scheduled. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void pros::c::task_suspend",
      "deleted": false,
      "explicit": false,
      "fullname": "rtos.h::task_suspend",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/rtos.h",
        "line": 240
      },
      "name": "task_suspend",
      "override": false,
      "paramList": [
        {
          "name": "task",
          "text": "The task to suspend "
        }
      ],
      "params": [
        {
          "name": "task",
          "type": "[task_t](kapi_8h.md#define-task_t)",
          "typePlain": "task_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a03b6c85287d209a26f882813f3a29eee",
      "static": false,
      "strong": false,
      "summary": "Suspends the specified task, making it ineligible to be scheduled. ",
      "title": "task_suspend",
      "type": "void",
      "typePlain": "void",
      "url": "rtos_8h.md#function-task_suspend",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_resume",
      "argsString": "(task_t task)",
      "brief": "Resumes the specified task, making it eligible to be scheduled. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void pros::c::task_resume",
      "deleted": false,
      "explicit": false,
      "fullname": "rtos.h::task_resume",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/rtos.h",
        "line": 248
      },
      "name": "task_resume",
      "override": false,
      "paramList": [
        {
          "name": "task",
          "text": "The task to resume "
        }
      ],
      "params": [
        {
          "name": "task",
          "type": "[task_t](kapi_8h.md#define-task_t)",
          "typePlain": "task_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1af44f1148d2f7ede99ebd023479812fba",
      "static": false,
      "strong": false,
      "summary": "Resumes the specified task, making it eligible to be scheduled. ",
      "title": "task_resume",
      "type": "void",
      "typePlain": "void",
      "url": "rtos_8h.md#function-task_resume",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_get_count",
      "argsString": "(void)",
      "brief": "Gets the number of tasks the kernel is currently managing, including all ready, blocked, or suspended tasks. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "uint32_t pros::c::task_get_count",
      "deleted": false,
      "details": "A task that has been deleted, but not yet reaped by the idle task will also be included in the count. Tasks recently created may take one context switch to be counted.",
      "explicit": false,
      "fullname": "rtos.h::task_get_count",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 10,
        "file": "pros/rtos.h",
        "line": 258
      },
      "name": "task_get_count",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "void",
          "typePlain": "void"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1abb3a36bf47f6df9c981b1d585b922497",
      "returns": [
        "The number of tasks that are currently being managed by the kernel. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the number of tasks the kernel is currently managing, including all ready, blocked, or suspended tasks. ",
      "title": "task_get_count",
      "type": "uint32_t",
      "typePlain": "uint32_t",
      "url": "rtos_8h.md#function-task_get_count",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_get_name",
      "argsString": "(task_t task)",
      "brief": "Gets the name of the specified task. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "char* pros::c::task_get_name",
      "deleted": false,
      "explicit": false,
      "fullname": "rtos.h::task_get_name",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/rtos.h",
        "line": 268
      },
      "name": "task_get_name",
      "override": false,
      "paramList": [
        {
          "name": "task",
          "text": "The task to check"
        }
      ],
      "params": [
        {
          "name": "task",
          "type": "[task_t](kapi_8h.md#define-task_t)",
          "typePlain": "task_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a1000d8e18af587837b65ab74b79d1cc8",
      "returns": [
        "A pointer to the name of the task "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the name of the specified task. ",
      "title": "task_get_name",
      "type": "char *",
      "typePlain": "char *",
      "url": "rtos_8h.md#function-task_get_name",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_get_by_name",
      "argsString": "(const char *name)",
      "brief": "Gets a task handle from the specified name. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "task_t pros::c::task_get_by_name",
      "deleted": false,
      "details": "The operation takes a relatively long time and should be used sparingly.",
      "explicit": false,
      "fullname": "rtos.h::task_get_by_name",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "pros/rtos.h",
        "line": 280
      },
      "name": "task_get_by_name",
      "override": false,
      "paramList": [
        {
          "name": "name",
          "text": "The name to query"
        }
      ],
      "params": [
        {
          "name": "name",
          "type": "const char *",
          "typePlain": "const char *"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ace3de5c48a2d91b9843ac9bd62a62d91",
      "returns": [
        "A task handle with a matching name, or NULL if none were found. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets a task handle from the specified name. ",
      "title": "task_get_by_name",
      "type": "[task_t](kapi_8h.md#define-task_t)",
      "typePlain": "task_t",
      "url": "rtos_8h.md#function-task_get_by_name",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_get_current",
      "argsString": "()",
      "brief": "Get the currently running task handle. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "task_t pros::c::task_get_current",
      "deleted": false,
      "details": "This could be useful if a task wants to tell another task about itself.",
      "explicit": false,
      "fullname": "rtos.h::task_get_current",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "pros/rtos.h",
        "line": 288
      },
      "name": "task_get_current",
      "override": false,
      "params": [],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a663301f01d0cc8ecfd238fbe1346fc4d",
      "returns": [
        "The currently running task handle. "
      ],
      "static": false,
      "strong": false,
      "summary": "Get the currently running task handle. ",
      "title": "task_get_current",
      "type": "[task_t](kapi_8h.md#define-task_t)",
      "typePlain": "task_t",
      "url": "rtos_8h.md#function-task_get_current",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_notify",
      "argsString": "(task_t task)",
      "brief": "Sends a simple notification to task and increments the notification counter. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "uint32_t pros::c::task_notify",
      "deleted": false,
      "details": "See [https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html](https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html) for details.",
      "explicit": false,
      "fullname": "rtos.h::task_notify",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 10,
        "file": "pros/rtos.h",
        "line": 301
      },
      "name": "task_notify",
      "override": false,
      "paramList": [
        {
          "name": "task",
          "text": "The task to notify"
        }
      ],
      "params": [
        {
          "name": "task",
          "type": "[task_t](kapi_8h.md#define-task_t)",
          "typePlain": "task_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1af69af2a08ca85bd16fa3d1b75dbcf790",
      "returns": [
        "Always returns true. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sends a simple notification to task and increments the notification counter. ",
      "title": "task_notify",
      "type": "uint32_t",
      "typePlain": "uint32_t",
      "url": "rtos_8h.md#function-task_notify",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_notify_ext",
      "argsString": "(task_t task, uint32_t value, notify_action_e_t action, uint32_t *prev_value)",
      "brief": "Sends a notification to a task, optionally performing some action. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "uint32_t pros::c::task_notify_ext",
      "deleted": false,
      "details": "Will also retrieve the value of the notification in the target task before modifying the notification value.\n\nSee [https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html](https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html) for details.",
      "explicit": false,
      "fullname": "rtos.h::task_notify_ext",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 10,
        "file": "pros/rtos.h",
        "line": 327
      },
      "name": "task_notify_ext",
      "override": false,
      "paramList": [
        {
          "name": "task",
          "text": "The task to notify "
        },
        {
          "name": "value",
          "text": "The value used in performing the action "
        },
        {
          "name": "action",
          "text": "An action to optionally perform on the receiving task's notification value "
        },
        {
          "name": "prev_value",
          "text": "A pointer to store the previous value of the target task's notification, may be NULL"
        }
      ],
      "params": [
        {
          "name": "task",
          "type": "[task_t](kapi_8h.md#define-task_t)",
          "typePlain": "task_t"
        },
        {
          "name": "value",
          "type": "uint32_t",
          "typePlain": "uint32_t"
        },
        {
          "name": "action",
          "type": "notify_action_e_t",
          "typePlain": "notify_action_e_t"
        },
        {
          "name": "prev_value",
          "type": "uint32_t *",
          "typePlain": "uint32_t *"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1af21b3326026e04f277e85236f4ff503a",
      "returns": [
        "Dependent on the notification action. For NOTIFY_ACTION_NO_WRITE: return 0 if the value could be written without needing to overwrite, 1 otherwise. For all other NOTIFY_ACTION values: always return 0 "
      ],
      "static": false,
      "strong": false,
      "summary": "Sends a notification to a task, optionally performing some action. ",
      "title": "task_notify_ext",
      "type": "uint32_t",
      "typePlain": "uint32_t",
      "url": "rtos_8h.md#function-task_notify_ext",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_notify_take",
      "argsString": "(bool clear_on_exit, uint32_t timeout)",
      "brief": "Waits for a notification to be nonzero. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "uint32_t pros::c::task_notify_take",
      "deleted": false,
      "details": "See [https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html](https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html) for details.",
      "explicit": false,
      "fullname": "rtos.h::task_notify_take",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 10,
        "file": "pros/rtos.h",
        "line": 345
      },
      "name": "task_notify_take",
      "override": false,
      "paramList": [
        {
          "name": "clear_on_exit",
          "text": "If true (1), then the notification value is cleared. If false (0), then the notification value is decremented. "
        },
        {
          "name": "timeout",
          "text": "Specifies the amount of time to be spent waiting for a notification to occur."
        }
      ],
      "params": [
        {
          "name": "clear_on_exit",
          "type": "bool",
          "typePlain": "bool"
        },
        {
          "name": "timeout",
          "type": "uint32_t",
          "typePlain": "uint32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a15f1230bbc0fe029caf775a393b4a897",
      "returns": [
        "The value of the task's notification value before it is decremented or cleared "
      ],
      "static": false,
      "strong": false,
      "summary": "Waits for a notification to be nonzero. ",
      "title": "task_notify_take",
      "type": "uint32_t",
      "typePlain": "uint32_t",
      "url": "rtos_8h.md#function-task_notify_take",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_notify_clear",
      "argsString": "(task_t task)",
      "brief": "Clears the notification for a task. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool pros::c::task_notify_clear",
      "deleted": false,
      "details": "See [https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html](https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html) for details.",
      "explicit": false,
      "fullname": "rtos.h::task_notify_clear",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/rtos.h",
        "line": 358
      },
      "name": "task_notify_clear",
      "override": false,
      "paramList": [
        {
          "name": "task",
          "text": "The task to clear"
        }
      ],
      "params": [
        {
          "name": "task",
          "type": "[task_t](kapi_8h.md#define-task_t)",
          "typePlain": "task_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a82a2d584952478f46b9bc766395bb8c2",
      "returns": [
        "False if there was not a notification waiting, true if there was "
      ],
      "static": false,
      "strong": false,
      "summary": "Clears the notification for a task. ",
      "title": "task_notify_clear",
      "type": "bool",
      "typePlain": "bool",
      "url": "rtos_8h.md#function-task_notify_clear",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-mutex_create",
      "argsString": "(void)",
      "brief": "Creates a mutex. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "mutex_t pros::c::mutex_create",
      "deleted": false,
      "details": "See [https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes](https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes) for details.",
      "explicit": false,
      "fullname": "rtos.h::mutex_create",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/rtos.h",
        "line": 369
      },
      "name": "mutex_create",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "void",
          "typePlain": "void"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a92aa79cdc30ffd13f63a7ffeca64b06f",
      "returns": [
        "A handle to a newly created mutex. If an error occurred, NULL will be returned and errno can be checked for hints as to why mutex_create failed. "
      ],
      "static": false,
      "strong": false,
      "summary": "Creates a mutex. ",
      "title": "mutex_create",
      "type": "[mutex_t](kapi_8h.md#define-mutex_t)",
      "typePlain": "mutex_t",
      "url": "rtos_8h.md#function-mutex_create",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-mutex_take",
      "argsString": "(mutex_t mutex, uint32_t timeout)",
      "brief": "Takes and locks a mutex, waiting for up to a certain number of milliseconds before timing out. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool pros::c::mutex_take",
      "deleted": false,
      "details": "See [https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes](https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes) for details.",
      "explicit": false,
      "fullname": "rtos.h::mutex_take",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/rtos.h",
        "line": 389
      },
      "name": "mutex_take",
      "override": false,
      "paramList": [
        {
          "name": "mutex",
          "text": "[Mutex](classpros_1_1Mutex.md) to attempt to lock. "
        },
        {
          "name": "timeout",
          "text": "Time to wait before the mutex becomes available. A timeout of 0 can be used to poll the mutex. TIMEOUT_MAX can be used to block indefinitely."
        }
      ],
      "params": [
        {
          "name": "mutex",
          "type": "[mutex_t](kapi_8h.md#define-mutex_t)",
          "typePlain": "mutex_t"
        },
        {
          "name": "timeout",
          "type": "uint32_t",
          "typePlain": "uint32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a49aa5444b488ff60fc458aea8172adc2",
      "returns": [
        "True if the mutex was successfully taken, false otherwise. If false is returned, then errno is set with a hint about why the the mutex couldn't be taken. "
      ],
      "static": false,
      "strong": false,
      "summary": "Takes and locks a mutex, waiting for up to a certain number of milliseconds before timing out. ",
      "title": "mutex_take",
      "type": "bool",
      "typePlain": "bool",
      "url": "rtos_8h.md#function-mutex_take",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-mutex_give",
      "argsString": "(mutex_t mutex)",
      "brief": "Unlocks a mutex. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool pros::c::mutex_give",
      "deleted": false,
      "details": "See [https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes](https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes) for details.",
      "explicit": false,
      "fullname": "rtos.h::mutex_give",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/rtos.h",
        "line": 404
      },
      "name": "mutex_give",
      "override": false,
      "paramList": [
        {
          "name": "mutex",
          "text": "[Mutex](classpros_1_1Mutex.md) to unlock."
        }
      ],
      "params": [
        {
          "name": "mutex",
          "type": "[mutex_t](kapi_8h.md#define-mutex_t)",
          "typePlain": "mutex_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a7f20ed94cee8e04d491743b4b34feda1",
      "returns": [
        "True if the mutex was successfully returned, false otherwise. If false is returned, then errno is set with a hint about why the mutex couldn't be returned. "
      ],
      "static": false,
      "strong": false,
      "summary": "Unlocks a mutex. ",
      "title": "mutex_give",
      "type": "bool",
      "typePlain": "bool",
      "url": "rtos_8h.md#function-mutex_give",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-mutex_delete",
      "argsString": "(mutex_t mutex)",
      "brief": "Deletes a mutex. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void pros::c::mutex_delete",
      "deleted": false,
      "explicit": false,
      "fullname": "rtos.h::mutex_delete",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/rtos.h",
        "line": 412
      },
      "name": "mutex_delete",
      "override": false,
      "paramList": [
        {
          "name": "mutex",
          "text": "[Mutex](classpros_1_1Mutex.md) to unlock. "
        }
      ],
      "params": [
        {
          "name": "mutex",
          "type": "[mutex_t](kapi_8h.md#define-mutex_t)",
          "typePlain": "mutex_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1af5995c8132175bc8e76904ccd1f6e39a",
      "static": false,
      "strong": false,
      "summary": "Deletes a mutex. ",
      "title": "mutex_delete",
      "type": "void",
      "typePlain": "void",
      "url": "rtos_8h.md#function-mutex_delete",
      "virtual": false,
      "visibility": "public"
    }
  ],
  "publicTypes": [
    {
      "abstract": false,
      "anchor": "#enum-task_state_e_t",
      "category": "types",
      "const": false,
      "definition": "",
      "enumvalues": [
        {
          "anchor": "#enumvalue-e_task_state_running",
          "category": "types",
          "definition": "",
          "fullname": "task_state_e_t::E_TASK_STATE_RUNNING",
          "hasDetails": false,
          "initializer": "= 0",
          "kind": "enumvalue",
          "name": "E_TASK_STATE_RUNNING",
          "refid": "namespacepros_1a23d5ffd47ed255206f177fe9d891335ba3b7873566c73fb17191451f641f3f564",
          "title": "E_TASK_STATE_RUNNING",
          "url": "rtos_8h.md#enumvalue-e_task_state_running",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_task_state_ready",
          "category": "types",
          "definition": "",
          "fullname": "task_state_e_t::E_TASK_STATE_READY",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "E_TASK_STATE_READY",
          "refid": "namespacepros_1a23d5ffd47ed255206f177fe9d891335ba7a9b05db250161908d541259cc9b6c08",
          "title": "E_TASK_STATE_READY",
          "url": "rtos_8h.md#enumvalue-e_task_state_ready",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_task_state_blocked",
          "category": "types",
          "definition": "",
          "fullname": "task_state_e_t::E_TASK_STATE_BLOCKED",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "E_TASK_STATE_BLOCKED",
          "refid": "namespacepros_1a23d5ffd47ed255206f177fe9d891335ba833a2009d6613fe7f3357551c525e953",
          "title": "E_TASK_STATE_BLOCKED",
          "url": "rtos_8h.md#enumvalue-e_task_state_blocked",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_task_state_suspended",
          "category": "types",
          "definition": "",
          "fullname": "task_state_e_t::E_TASK_STATE_SUSPENDED",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "E_TASK_STATE_SUSPENDED",
          "refid": "namespacepros_1a23d5ffd47ed255206f177fe9d891335ba1c6ab831f17838fb926088f3353cb13c",
          "title": "E_TASK_STATE_SUSPENDED",
          "url": "rtos_8h.md#enumvalue-e_task_state_suspended",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_task_state_deleted",
          "category": "types",
          "definition": "",
          "fullname": "task_state_e_t::E_TASK_STATE_DELETED",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "E_TASK_STATE_DELETED",
          "refid": "namespacepros_1a23d5ffd47ed255206f177fe9d891335ba521c1585b4d885ca38cc463d74d1fa4d",
          "title": "E_TASK_STATE_DELETED",
          "url": "rtos_8h.md#enumvalue-e_task_state_deleted",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_task_state_invalid",
          "category": "types",
          "definition": "",
          "fullname": "task_state_e_t::E_TASK_STATE_INVALID",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "E_TASK_STATE_INVALID",
          "refid": "namespacepros_1a23d5ffd47ed255206f177fe9d891335ba4b91d8b231764bb6556618bdb78c34a0",
          "title": "E_TASK_STATE_INVALID",
          "url": "rtos_8h.md#enumvalue-e_task_state_invalid",
          "visibility": "public"
        }
      ],
      "explicit": false,
      "fullname": "rtos.h::task_state_e_t",
      "hasDetails": false,
      "inline": false,
      "kind": "enum",
      "location": {
        "bodyEnd": 68,
        "bodyFile": "pros/rtos.h",
        "bodyStart": 61,
        "column": 14,
        "file": "pros/rtos.h",
        "line": 61
      },
      "name": "task_state_e_t",
      "override": false,
      "refid": "namespacepros_1a23d5ffd47ed255206f177fe9d891335b",
      "static": false,
      "strong": false,
      "title": "task_state_e_t",
      "url": "rtos_8h.md#enum-task_state_e_t",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#enum-notify_action_e_t",
      "category": "types",
      "const": false,
      "definition": "",
      "enumvalues": [
        {
          "anchor": "#enumvalue-e_notify_action_none",
          "category": "types",
          "definition": "",
          "fullname": "notify_action_e_t::E_NOTIFY_ACTION_NONE",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "E_NOTIFY_ACTION_NONE",
          "refid": "namespacepros_1a42ea99b5e5d38da0b98154609cf6c570a8ef04ba61995d97d82fd7bf1ff4d772f",
          "title": "E_NOTIFY_ACTION_NONE",
          "url": "rtos_8h.md#enumvalue-e_notify_action_none",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_notify_action_bits",
          "category": "types",
          "definition": "",
          "fullname": "notify_action_e_t::E_NOTIFY_ACTION_BITS",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "E_NOTIFY_ACTION_BITS",
          "refid": "namespacepros_1a42ea99b5e5d38da0b98154609cf6c570adc1fa6911e0d71db6404d3c8b7276e02",
          "title": "E_NOTIFY_ACTION_BITS",
          "url": "rtos_8h.md#enumvalue-e_notify_action_bits",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_notify_action_incr",
          "category": "types",
          "definition": "",
          "fullname": "notify_action_e_t::E_NOTIFY_ACTION_INCR",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "E_NOTIFY_ACTION_INCR",
          "refid": "namespacepros_1a42ea99b5e5d38da0b98154609cf6c570ab9b6a7e40e7b9553e8b1782b2c0bc155",
          "title": "E_NOTIFY_ACTION_INCR",
          "url": "rtos_8h.md#enumvalue-e_notify_action_incr",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_notify_action_owrite",
          "category": "types",
          "definition": "",
          "fullname": "notify_action_e_t::E_NOTIFY_ACTION_OWRITE",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "E_NOTIFY_ACTION_OWRITE",
          "refid": "namespacepros_1a42ea99b5e5d38da0b98154609cf6c570a11be52cd9271cd1504f7555b73e5bd89",
          "title": "E_NOTIFY_ACTION_OWRITE",
          "url": "rtos_8h.md#enumvalue-e_notify_action_owrite",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_notify_action_no_owrite",
          "category": "types",
          "definition": "",
          "fullname": "notify_action_e_t::E_NOTIFY_ACTION_NO_OWRITE",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "E_NOTIFY_ACTION_NO_OWRITE",
          "refid": "namespacepros_1a42ea99b5e5d38da0b98154609cf6c570a735b4ce042c8998c9432449b5f7efdc5",
          "title": "E_NOTIFY_ACTION_NO_OWRITE",
          "url": "rtos_8h.md#enumvalue-e_notify_action_no_owrite",
          "visibility": "public"
        }
      ],
      "explicit": false,
      "fullname": "rtos.h::notify_action_e_t",
      "hasDetails": false,
      "inline": false,
      "kind": "enum",
      "location": {
        "bodyEnd": 76,
        "bodyFile": "pros/rtos.h",
        "bodyStart": 70,
        "column": 14,
        "file": "pros/rtos.h",
        "line": 70
      },
      "name": "notify_action_e_t",
      "override": false,
      "refid": "namespacepros_1a42ea99b5e5d38da0b98154609cf6c570",
      "static": false,
      "strong": false,
      "title": "notify_action_e_t",
      "url": "rtos_8h.md#enum-notify_action_e_t",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-task_t",
      "category": "types",
      "const": false,
      "definition": "typedef void* task_t",
      "explicit": false,
      "fullname": "rtos.h::task_t",
      "hasDetails": false,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "pros/rtos.h",
        "bodyStart": 58,
        "column": 14,
        "file": "pros/rtos.h",
        "line": 58
      },
      "name": "task_t",
      "override": false,
      "refid": "namespacepros_1a1d7e0825b8d8876e8cd8ece3f9115293",
      "static": false,
      "strong": false,
      "title": "task_t",
      "type": "void *",
      "typePlain": "void *",
      "url": "rtos_8h.md#typedef-task_t",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-task_fn_t",
      "category": "types",
      "const": false,
      "definition": "typedef void(* task_fn_t) (void *)",
      "explicit": false,
      "fullname": "rtos.h::task_fn_t",
      "hasDetails": false,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "pros/rtos.h",
        "bodyStart": 59,
        "column": 9,
        "file": "pros/rtos.h",
        "line": 59
      },
      "name": "task_fn_t",
      "override": false,
      "refid": "namespacepros_1aece0aa29b1f1538115228d2197239f98",
      "static": false,
      "strong": false,
      "title": "task_fn_t",
      "type": "void(*)(void *)",
      "typePlain": "void(*)(void *)",
      "url": "rtos_8h.md#typedef-task_fn_t",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-mutex_t",
      "category": "types",
      "const": false,
      "definition": "typedef void* mutex_t",
      "explicit": false,
      "fullname": "rtos.h::mutex_t",
      "hasDetails": false,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "pros/rtos.h",
        "bodyStart": 106,
        "column": 14,
        "file": "pros/rtos.h",
        "line": 106
      },
      "name": "mutex_t",
      "override": false,
      "refid": "namespacepros_1ab15ea84d90257d70b44e8e04519864d2",
      "static": false,
      "strong": false,
      "title": "mutex_t",
      "type": "void *",
      "typePlain": "void *",
      "url": "rtos_8h.md#typedef-mutex_t",
      "visibility": "public"
    }
  ],
  "refid": "rtos_8h",
  "static": false,
  "strong": false,
  "title": "pros/rtos.h",
  "url": "rtos_8h.md#file-rtos.h",
  "visibility": "public"
}