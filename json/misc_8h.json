{
  "abstract": false,
  "anchor": "#file-misc.h",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-num_v5_ports",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "NUM_V5_PORTS",
      "hasDetails": false,
      "initializer": "(22)",
      "inline": false,
      "kind": "define",
      "location": {
        "bodyFile": "pros/misc.h",
        "bodyStart": 26,
        "column": 9,
        "file": "pros/misc.h",
        "line": 26
      },
      "name": "NUM_V5_PORTS",
      "override": false,
      "refid": "misc_8h_1acceaccd4cf9a93ef86e8f21206a6645a",
      "static": false,
      "strong": false,
      "title": "NUM_V5_PORTS",
      "url": "misc_8h.md#define-num_v5_ports",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-competition_disabled",
      "brief": "V5 Competition ",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "COMPETITION_DISABLED",
      "hasDetails": false,
      "initializer": "(1 << 0)",
      "inline": false,
      "kind": "define",
      "location": {
        "bodyFile": "pros/misc.h",
        "bodyStart": 31,
        "column": 9,
        "file": "pros/misc.h",
        "line": 31
      },
      "name": "COMPETITION_DISABLED",
      "override": false,
      "refid": "misc_8h_1adefb84e79d34a20dc8dc91813f289323",
      "static": false,
      "strong": false,
      "summary": "V5 Competition ",
      "title": "COMPETITION_DISABLED",
      "url": "misc_8h.md#define-competition_disabled",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-competition_autonomous",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "COMPETITION_AUTONOMOUS",
      "hasDetails": false,
      "initializer": "(1 << 1)",
      "inline": false,
      "kind": "define",
      "location": {
        "bodyFile": "pros/misc.h",
        "bodyStart": 32,
        "column": 9,
        "file": "pros/misc.h",
        "line": 32
      },
      "name": "COMPETITION_AUTONOMOUS",
      "override": false,
      "refid": "misc_8h_1ab1963437a4b6f9561d57f7e7e44bc853",
      "static": false,
      "strong": false,
      "title": "COMPETITION_AUTONOMOUS",
      "url": "misc_8h.md#define-competition_autonomous",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-competition_connected",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "COMPETITION_CONNECTED",
      "hasDetails": false,
      "initializer": "(1 << 2)",
      "inline": false,
      "kind": "define",
      "location": {
        "bodyFile": "pros/misc.h",
        "bodyStart": 33,
        "column": 9,
        "file": "pros/misc.h",
        "line": 33
      },
      "name": "COMPETITION_CONNECTED",
      "override": false,
      "refid": "misc_8h_1ae54538bebc289953e9238c59788a9649",
      "static": false,
      "strong": false,
      "title": "COMPETITION_CONNECTED",
      "url": "misc_8h.md#define-competition_connected",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-competition_is_disabled",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "competition_is_disabled",
      "hasDetails": false,
      "initializer": "((competition_get_status() & [COMPETITION_DISABLED](misc_8h.md#define-competition_disabled)) != 0)",
      "inline": false,
      "kind": "define",
      "location": {
        "bodyFile": "pros/misc.h",
        "bodyStart": 52,
        "column": 10,
        "file": "pros/misc.h",
        "line": 52
      },
      "name": "competition_is_disabled",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "misc_8h_1a1577cfc36f0d2d6f73a26263e9b518ce",
      "static": false,
      "strong": false,
      "title": "competition_is_disabled",
      "url": "misc_8h.md#define-competition_is_disabled",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-competition_is_connected",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "competition_is_connected",
      "hasDetails": false,
      "initializer": "((competition_get_status() & [COMPETITION_CONNECTED](misc_8h.md#define-competition_connected)) != 0)",
      "inline": false,
      "kind": "define",
      "location": {
        "bodyFile": "pros/misc.h",
        "bodyStart": 53,
        "column": 9,
        "file": "pros/misc.h",
        "line": 53
      },
      "name": "competition_is_connected",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "misc_8h_1a5601e15718be476d66ecaf2cdcbe061f",
      "static": false,
      "strong": false,
      "title": "competition_is_connected",
      "url": "misc_8h.md#define-competition_is_connected",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-competition_is_autonomous",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "competition_is_autonomous",
      "hasDetails": false,
      "initializer": "((competition_get_status() & [COMPETITION_AUTONOMOUS](misc_8h.md#define-competition_autonomous)) != 0)",
      "inline": false,
      "kind": "define",
      "location": {
        "bodyFile": "pros/misc.h",
        "bodyStart": 54,
        "column": 9,
        "file": "pros/misc.h",
        "line": 54
      },
      "name": "competition_is_autonomous",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "misc_8h_1a6bbebf8507344dd452503249813923c8",
      "static": false,
      "strong": false,
      "title": "competition_is_autonomous",
      "url": "misc_8h.md#define-competition_is_autonomous",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-controller_port_mutex_take",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "CONTROLLER_PORT_MUTEX_TAKE",
      "hasDetails": false,
      "initializer": "\tswitch (id) {\t\t\t\t\t\t\t\\\n\t\tcase E_CONTROLLER_MASTER:\t\t\t\\\n\t\t\tport = V5_PORT_CONTROLLER_1;\t\\\n\t\t\tbreak;\t\t\t\t\t\t\t\\\n\t\tcase E_CONTROLLER_PARTNER:\t\t\t\\\n\t\t\tport = V5_PORT_CONTROLLER_2;\t\\\n\t\t\tbreak;\t\t\t\t\t\t\t\\\n\t\tdefault:\t\t\t\t\t\t\t\\\n\t\t\terrno = EINVAL;\t\t\t\t\t\\\n\t\t\treturn [PROS_ERR](adi_8h.md#define-pros_err);\t\t\t\t\\\n\t}\t\t\t\t\t\t\t\t\t\t\\\n\tif (!internal_port_mutex_take(port)) {\t\\\n\t\terrno = EACCES;\t\t\t\t\t\t\\\n\t\treturn [PROS_ERR](adi_8h.md#define-pros_err);\t\t\t\t\t\\\n\t}\t\t\t\t\t\t\t\t\t\t\\",
      "inline": false,
      "kind": "define",
      "location": {
        "bodyFile": "pros/misc.h",
        "bodyStart": 137,
        "column": 9,
        "file": "pros/misc.h",
        "line": 137
      },
      "name": "CONTROLLER_PORT_MUTEX_TAKE",
      "override": false,
      "params": [
        {
          "name": "id",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "port",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "misc_8h_1afe0c8d912448e3987f5a588dc8881da4",
      "static": false,
      "strong": false,
      "title": "CONTROLLER_PORT_MUTEX_TAKE",
      "url": "misc_8h.md#define-controller_port_mutex_take",
      "visibility": "public"
    }
  ],
  "definition": "",
  "details": "Contains prototypes for miscellaneous functions pertaining to the controller, battery, and competition control.\n\nVisit [https://pros.cs.purdue.edu/v5/tutorials/topical/controller.html](https://pros.cs.purdue.edu/v5/tutorials/topical/controller.html) to learn more.\n\nThis file should not be modified by users, since it gets replaced whenever a kernel upgrade occurs.\n\nCopyright (c) 2017-2020, Purdue University ACM SIGBots. All rights reservered.\n\nThis Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at [http://mozilla.org/MPL/2.0/](http://mozilla.org/MPL/2.0/). ",
  "explicit": false,
  "fullname": "pros/misc.h",
  "hasAdditionalMembers": false,
  "hasDetails": true,
  "includes": "<stdint.h>",
  "inline": false,
  "kind": "file",
  "location": {
    "column": 0,
    "file": "pros/misc.h",
    "line": 0
  },
  "name": "pros/misc.h",
  "namespaces": [
    {
      "anchor": "",
      "brief": "Get the current status of the competition control. ",
      "category": "namespaces",
      "fullname": "pros",
      "kind": "namespace",
      "name": "pros",
      "refid": "namespacepros",
      "summary": "Get the current status of the competition control. ",
      "title": "pros",
      "url": "namespacepros.md",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "pros::c",
      "kind": "namespace",
      "name": "pros::c",
      "refid": "namespacepros_1_1c",
      "title": "pros::c",
      "url": "namespacepros_1_1c.md",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-pros",
    "category": "dirs",
    "fullname": "pros",
    "kind": "dir",
    "name": "pros",
    "refid": "dir_214b722ca0199f3055230149c608b806",
    "title": "pros",
    "url": "dir_214b722ca0199f3055230149c608b806.md#dir-pros",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-pros",
      "category": "dirs",
      "fullname": "pros",
      "kind": "dir",
      "name": "pros",
      "refid": "dir_214b722ca0199f3055230149c608b806",
      "title": "pros",
      "url": "dir_214b722ca0199f3055230149c608b806.md#dir-pros",
      "visibility": "public"
    }
  ],
  "programlisting": "/**\n * \\file pros/misc.h\n *\n * Contains prototypes for miscellaneous functions pertaining to the controller,\n * battery, and competition control.\n *\n * Visit https://pros.cs.purdue.edu/v5/tutorials/topical/controller.html to\n * learn more.\n *\n * This file should not be modified by users, since it gets replaced whenever\n * a kernel upgrade occurs.\n *\n * Copyright (c) 2017-2020, Purdue University ACM SIGBots.\n * All rights reservered.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\n#ifndef _PROS_MISC_H_\n#define _PROS_MISC_H_\n\n#include <stdint.h>\n\n#define NUM_V5_PORTS (22)\n\n/******************************************************************************/\n/**                             V5 Competition                               **/\n/******************************************************************************/\n#define COMPETITION_DISABLED (1 << 0)\n#define COMPETITION_AUTONOMOUS (1 << 1)\n#define COMPETITION_CONNECTED (1 << 2)\n\n/**\n * Get the current status of the competition control.\n *\n * \\return The competition control status as a mask of bits with\n * COMPETITION_{ENABLED,AUTONOMOUS,CONNECTED}.\n */\n#ifdef __cplusplus\nextern \"C\" {\nnamespace pros {\nnamespace c {\n#endif\nuint8_t competition_get_status(void);\n#ifdef __cplusplus\n}\n}\n}\n#endif\n#define competition_is_disabled() ((competition_get_status() & COMPETITION_DISABLED) != 0)\n#define competition_is_connected() ((competition_get_status() & COMPETITION_CONNECTED) != 0)\n#define competition_is_autonomous() ((competition_get_status() & COMPETITION_AUTONOMOUS) != 0)\n\n/******************************************************************************/\n/**                              V5 Controller                               **/\n/******************************************************************************/\n#ifdef __cplusplus\nextern \"C\" {\nnamespace pros {\n#endif\n\ntypedef enum { E_CONTROLLER_MASTER = 0, E_CONTROLLER_PARTNER } controller_id_e_t;\n\ntypedef enum {\n    E_CONTROLLER_ANALOG_LEFT_X = 0,\n    E_CONTROLLER_ANALOG_LEFT_Y,\n    E_CONTROLLER_ANALOG_RIGHT_X,\n    E_CONTROLLER_ANALOG_RIGHT_Y\n} controller_analog_e_t;\n\ntypedef enum {\n    E_CONTROLLER_DIGITAL_L1 = 6,\n    E_CONTROLLER_DIGITAL_L2,\n    E_CONTROLLER_DIGITAL_R1,\n    E_CONTROLLER_DIGITAL_R2,\n    E_CONTROLLER_DIGITAL_UP,\n    E_CONTROLLER_DIGITAL_DOWN,\n    E_CONTROLLER_DIGITAL_LEFT,\n    E_CONTROLLER_DIGITAL_RIGHT,\n    E_CONTROLLER_DIGITAL_X,\n    E_CONTROLLER_DIGITAL_B,\n    E_CONTROLLER_DIGITAL_Y,\n    E_CONTROLLER_DIGITAL_A\n} controller_digital_e_t;\n\n#ifdef PROS_USE_SIMPLE_NAMES\n#ifdef __cplusplus\n#define CONTROLLER_MASTER pros::E_CONTROLLER_MASTER\n#define CONTROLLER_PARTNER pros::E_CONTROLLER_PARTNER\n#define ANALOG_LEFT_X pros::E_CONTROLLER_ANALOG_LEFT_X\n#define ANALOG_LEFT_Y pros::E_CONTROLLER_ANALOG_LEFT_Y\n#define ANALOG_RIGHT_X pros::E_CONTROLLER_ANALOG_RIGHT_X\n#define ANALOG_RIGHT_Y pros::E_CONTROLLER_ANALOG_RIGHT_Y\n#define DIGITAL_L1 pros::E_CONTROLLER_DIGITAL_L1\n#define DIGITAL_L2 pros::E_CONTROLLER_DIGITAL_L2\n#define DIGITAL_R1 pros::E_CONTROLLER_DIGITAL_R1\n#define DIGITAL_R2 pros::E_CONTROLLER_DIGITAL_R2\n#define DIGITAL_UP pros::E_CONTROLLER_DIGITAL_UP\n#define DIGITAL_DOWN pros::E_CONTROLLER_DIGITAL_DOWN\n#define DIGITAL_LEFT pros::E_CONTROLLER_DIGITAL_LEFT\n#define DIGITAL_RIGHT pros::E_CONTROLLER_DIGITAL_RIGHT\n#define DIGITAL_X pros::E_CONTROLLER_DIGITAL_X\n#define DIGITAL_B pros::E_CONTROLLER_DIGITAL_B\n#define DIGITAL_Y pros::E_CONTROLLER_DIGITAL_Y\n#define DIGITAL_A pros::E_CONTROLLER_DIGITAL_A\n#else\n#define CONTROLLER_MASTER E_CONTROLLER_MASTER\n#define CONTROLLER_PARTNER E_CONTROLLER_PARTNER\n#define ANALOG_LEFT_X E_CONTROLLER_ANALOG_LEFT_X\n#define ANALOG_LEFT_Y E_CONTROLLER_ANALOG_LEFT_Y\n#define ANALOG_RIGHT_X E_CONTROLLER_ANALOG_RIGHT_X\n#define ANALOG_RIGHT_Y E_CONTROLLER_ANALOG_RIGHT_Y\n#define DIGITAL_L1 E_CONTROLLER_DIGITAL_L1\n#define DIGITAL_L2 E_CONTROLLER_DIGITAL_L2\n#define DIGITAL_R1 E_CONTROLLER_DIGITAL_R1\n#define DIGITAL_R2 E_CONTROLLER_DIGITAL_R2\n#define DIGITAL_UP E_CONTROLLER_DIGITAL_UP\n#define DIGITAL_DOWN E_CONTROLLER_DIGITAL_DOWN\n#define DIGITAL_LEFT E_CONTROLLER_DIGITAL_LEFT\n#define DIGITAL_RIGHT E_CONTROLLER_DIGITAL_RIGHT\n#define DIGITAL_X E_CONTROLLER_DIGITAL_X\n#define DIGITAL_B E_CONTROLLER_DIGITAL_B\n#define DIGITAL_Y E_CONTROLLER_DIGITAL_Y\n#define DIGITAL_A E_CONTROLLER_DIGITAL_A\n#endif\n#endif\n\n/*\nGiven an id and a port, this macro sets the port \nvariable based on the id and allows the mutex to take that port.\n\nReturns error (in the function/scope it's in) if the controller\nfailed to connect or an invalid id is given.\n*/\n#define CONTROLLER_PORT_MUTEX_TAKE(id, port) \\\n    switch (id) {                           \\\n        case E_CONTROLLER_MASTER:           \\\n            port = V5_PORT_CONTROLLER_1;    \\\n            break;                          \\\n        case E_CONTROLLER_PARTNER:          \\\n            port = V5_PORT_CONTROLLER_2;    \\\n            break;                          \\\n        default:                            \\\n            errno = EINVAL;                 \\\n            return PROS_ERR;                \\\n    }                                       \\\n    if (!internal_port_mutex_take(port)) {  \\\n        errno = EACCES;                     \\\n        return PROS_ERR;                    \\\n    }                                       \\\n\n#ifdef __cplusplus\nnamespace c {\n#endif\n\n/**\n * Checks if the controller is connected.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is\n * given.\n * EACCES - Another resource is currently trying to access the controller port.\n *\n * \\param id\n *        The ID of the controller (e.g. the master or partner controller).\n *        Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER\n *\n * \\return 1 if the controller is connected, 0 otherwise\n */\nint32_t controller_is_connected(controller_id_e_t id);\n\n/**\n * Gets the value of an analog channel (joystick) on a controller.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is\n * given.\n * EACCES - Another resource is currently trying to access the controller port.\n *\n * \\param id\n *        The ID of the controller (e.g. the master or partner controller).\n *        Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER\n * \\param channel\n *        The analog channel to get.\n *        Must be one of ANALOG_LEFT_X, ANALOG_LEFT_Y, ANALOG_RIGHT_X,\n *        ANALOG_RIGHT_Y\n *\n * \\return The current reading of the analog channel: [-127, 127].\n * If the controller was not connected, then 0 is returned\n */\nint32_t controller_get_analog(controller_id_e_t id, controller_analog_e_t channel);\n\n/**\n * Gets the battery capacity of the given controller.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is\n * given.\n * EACCES - Another resource is currently trying to access the controller port.\n *\n * \\param id\n *        The ID of the controller (e.g. the master or partner controller).\n *        Must be one of E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER\n *\n * \\return The controller's battery capacity\n */\nint32_t controller_get_battery_capacity(controller_id_e_t id);\n\n/**\n * Gets the battery level of the given controller.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is\n * given.\n * EACCES - Another resource is currently trying to access the controller port.\n *\n * \\param id\n *        The ID of the controller (e.g. the master or partner controller).\n *        Must be one of E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER\n *\n * \\return The controller's battery level\n */\nint32_t controller_get_battery_level(controller_id_e_t id);\n\n/**\n * Checks if a digital channel (button) on the controller is currently pressed.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is\n * given.\n * EACCES - Another resource is currently trying to access the controller port.\n *\n * \\param id\n *        The ID of the controller (e.g. the master or partner controller).\n *        Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER\n * \\param button\n *        The button to read.\n *        Must be one of DIGITAL_{RIGHT,DOWN,LEFT,UP,A,B,Y,X,R1,R2,L1,L2}\n *\n * \\return 1 if the button on the controller is pressed.\n * If the controller was not connected, then 0 is returned\n */\nint32_t controller_get_digital(controller_id_e_t id, controller_digital_e_t button);\n\n/**\n * Returns a rising-edge case for a controller button press.\n *\n * This function is not thread-safe.\n * Multiple tasks polling a single button may return different results under the\n * same circumstances, so only one task should call this function for any given\n * button. E.g., Task A calls this function for buttons 1 and 2. Task B may call\n * this function for button 3, but should not for buttons 1 or 2. A typical\n * use-case for this function is to call inside opcontrol to detect new button\n * presses, and not in any other tasks.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is\n * given.\n * EACCES - Another resource is currently trying to access the controller port.\n *\n * \\param id\n *        The ID of the controller (e.g. the master or partner controller).\n *        Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER\n * \\param button\n *            The button to read. Must be one of\n *        DIGITAL_{RIGHT,DOWN,LEFT,UP,A,B,Y,X,R1,R2,L1,L2}\n *\n * \\return 1 if the button on the controller is pressed and had not been pressed\n * the last time this function was called, 0 otherwise.\n */\nint32_t controller_get_digital_new_press(controller_id_e_t id, controller_digital_e_t button);\n\n/**\n * Sets text to the controller LCD screen.\n *\n * \\note Controller text setting is currently in beta, so continuous, fast\n * updates will not work well.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is\n * given.\n * EACCES - Another resource is currently trying to access the controller port.\n *\n * \\param id\n *        The ID of the controller (e.g. the master or partner controller).\n *        Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER\n * \\param line\n *        The line number at which the text will be displayed [0-2]\n * \\param col\n *        The column number at which the text will be displayed [0-14]\n * \\param fmt\n *        The format string to print to the controller\n * \\param ...\n *        The argument list for the format string\n *\n * \\return 1 if the operation was successful or PROS_ERR if the operation\n * failed, setting errno.\n */\nint32_t controller_print(controller_id_e_t id, uint8_t line, uint8_t col, const char* fmt, ...);\n\n/**\n * Sets text to the controller LCD screen.\n *\n * \\note Controller text setting is currently in beta, so continuous, fast\n * updates will not work well.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is\n * given.\n * EACCES - Another resource is currently trying to access the controller port.\n *\n * \\param id\n *        The ID of the controller (e.g. the master or partner controller).\n *        Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER\n * \\param line\n *        The line number at which the text will be displayed [0-2]\n * \\param col\n *        The column number at which the text will be displayed [0-14]\n * \\param str\n *        The pre-formatted string to print to the controller\n *\n * \\return 1 if the operation was successful or PROS_ERR if the operation\n * failed, setting errno.\n */\nint32_t controller_set_text(controller_id_e_t id, uint8_t line, uint8_t col, const char* str);\n\n/**\n * Clears an individual line of the controller screen.\n *\n * \\note Controller text setting is currently in beta, so continuous, fast\n * updates will not work well.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is\n * given.\n * EACCES - Another resource is currently trying to access the controller port.\n *\n * \\param id\n *        The ID of the controller (e.g. the master or partner controller).\n *        Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER\n * \\param line\n *        The line number to clear [0-2]\n *\n * \\return 1 if the operation was successful or PROS_ERR if the operation\n * failed, setting errno.\n */\nint32_t controller_clear_line(controller_id_e_t id, uint8_t line);\n\n/**\n * Clears all of the lines on the controller screen.\n *\n * \\note Controller text setting is currently in beta, so continuous, fast\n * updates will not work well. On vexOS version 1.0.0 this function will block\n * for 110ms.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is\n * given.\n * EACCES - Another resource is currently trying to access the controller port.\n *\n * \\param id\n *        The ID of the controller (e.g. the master or partner controller).\n *        Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER\n *\n * \\return 1 if the operation was successful or PROS_ERR if the operation\n * failed, setting errno.\n */\nint32_t controller_clear(controller_id_e_t id);\n\n/**\n * Rumble the controller.\n *\n * \\note Controller rumble activation is currently in beta, so continuous, fast\n * updates will not work well.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is\n * given.\n * EACCES - Another resource is currently trying to access the controller port.\n *\n * \\param id\n *              The ID of the controller (e.g. the master or partner controller).\n *              Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER\n * \\param rumble_pattern\n *              A string consisting of the characters '.', '-', and ' ', where dots\n *              are short rumbles, dashes are long rumbles, and spaces are pauses.\n *              Maximum supported length is 8 characters.\n *\n * \\return 1 if the operation was successful or PROS_ERR if the operation\n * failed, setting errno.\n */\nint32_t controller_rumble(controller_id_e_t id, const char* rumble_pattern);\n\n/**\n * Gets the current voltage of the battery, as reported by VEXos.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * EACCES - Another resource is currently trying to access the battery port.\n *\n * \\return The current voltage of the battery\n */\nint32_t battery_get_voltage(void);\n\n/**\n * Gets the current current of the battery, as reported by VEXos.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * EACCES - Another resource is currently trying to access the battery port.\n *\n * \\return The current current of the battery\n */\nint32_t battery_get_current(void);\n\n/**\n * Gets the current temperature of the battery, as reported by VEXos.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * EACCES - Another resource is currently trying to access the battery port.\n *\n * \\return The current temperature of the battery\n */\ndouble battery_get_temperature(void);\n\n/**\n * Gets the current capacity of the battery, as reported by VEXos.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * EACCES - Another resource is currently trying to access the battery port.\n *\n * \\return The current capacity of the battery\n */\ndouble battery_get_capacity(void);\n\n/**\n * Checks if the SD card is installed.\n *\n * \\return 1 if the SD card is installed, 0 otherwise\n */\nint32_t usd_is_installed(void);\n\n#ifdef __cplusplus\n}\n}\n}\n#endif\n\n#endif  // _PROS_MISC_H_",
  "publicFunctions": [
    {
      "abstract": false,
      "anchor": "#function-competition_get_status",
      "argsString": "(void)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "uint8_t pros::c::competition_get_status",
      "deleted": false,
      "explicit": false,
      "fullname": "misc.h::competition_get_status",
      "hasDetails": false,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/misc.h",
        "line": 46
      },
      "name": "competition_get_status",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "void",
          "typePlain": "void"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1aeb04d3a78a7596b89366603a0068763b",
      "static": false,
      "strong": false,
      "title": "competition_get_status",
      "type": "uint8_t",
      "typePlain": "uint8_t",
      "url": "misc_8h.md#function-competition_get_status",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-controller_is_connected",
      "argsString": "(controller_id_e_t id)",
      "brief": "Checks if the controller is connected. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::controller_is_connected",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.",
      "explicit": false,
      "fullname": "misc.h::controller_is_connected",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/misc.h",
        "line": 173
      },
      "name": "controller_is_connected",
      "override": false,
      "paramList": [
        {
          "name": "id",
          "text": "The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER"
        }
      ],
      "params": [
        {
          "name": "id",
          "type": "controller_id_e_t",
          "typePlain": "controller_id_e_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a1a381afe1cabb7c9b5dd5a734a5ee4a3",
      "returns": [
        "1 if the controller is connected, 0 otherwise "
      ],
      "static": false,
      "strong": false,
      "summary": "Checks if the controller is connected. ",
      "title": "controller_is_connected",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "misc_8h.md#function-controller_is_connected",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-controller_get_analog",
      "argsString": "(controller_id_e_t id, controller_analog_e_t channel)",
      "brief": "Gets the value of an analog channel (joystick) on a controller. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::controller_get_analog",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.",
      "explicit": false,
      "fullname": "misc.h::controller_get_analog",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/misc.h",
        "line": 195
      },
      "name": "controller_get_analog",
      "override": false,
      "paramList": [
        {
          "name": "id",
          "text": "The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER "
        },
        {
          "name": "channel",
          "text": "The analog channel to get. Must be one of ANALOG_LEFT_X, ANALOG_LEFT_Y, ANALOG_RIGHT_X, ANALOG_RIGHT_Y"
        }
      ],
      "params": [
        {
          "name": "id",
          "type": "controller_id_e_t",
          "typePlain": "controller_id_e_t"
        },
        {
          "name": "channel",
          "type": "controller_analog_e_t",
          "typePlain": "controller_analog_e_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a1a7c4e6bcb39260bf7ce5b1a58638753",
      "returns": [
        "The current reading of the analog channel: [-127, 127]. If the controller was not connected, then 0 is returned "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the value of an analog channel (joystick) on a controller. ",
      "title": "controller_get_analog",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "misc_8h.md#function-controller_get_analog",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-controller_get_battery_capacity",
      "argsString": "(controller_id_e_t id)",
      "brief": "Gets the battery capacity of the given controller. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::controller_get_battery_capacity",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.",
      "explicit": false,
      "fullname": "misc.h::controller_get_battery_capacity",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/misc.h",
        "line": 212
      },
      "name": "controller_get_battery_capacity",
      "override": false,
      "paramList": [
        {
          "name": "id",
          "text": "The ID of the controller (e.g. the master or partner controller). Must be one of E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER"
        }
      ],
      "params": [
        {
          "name": "id",
          "type": "controller_id_e_t",
          "typePlain": "controller_id_e_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a3708b3194feeb243710d0fa2079e57b6",
      "returns": [
        "The controller's battery capacity "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the battery capacity of the given controller. ",
      "title": "controller_get_battery_capacity",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "misc_8h.md#function-controller_get_battery_capacity",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-controller_get_battery_level",
      "argsString": "(controller_id_e_t id)",
      "brief": "Gets the battery level of the given controller. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::controller_get_battery_level",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.",
      "explicit": false,
      "fullname": "misc.h::controller_get_battery_level",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/misc.h",
        "line": 229
      },
      "name": "controller_get_battery_level",
      "override": false,
      "paramList": [
        {
          "name": "id",
          "text": "The ID of the controller (e.g. the master or partner controller). Must be one of E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER"
        }
      ],
      "params": [
        {
          "name": "id",
          "type": "controller_id_e_t",
          "typePlain": "controller_id_e_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a35f22987a76d5a3c9117755b0abc2548",
      "returns": [
        "The controller's battery level "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the battery level of the given controller. ",
      "title": "controller_get_battery_level",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "misc_8h.md#function-controller_get_battery_level",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-controller_get_digital",
      "argsString": "(controller_id_e_t id, controller_digital_e_t button)",
      "brief": "Checks if a digital channel (button) on the controller is currently pressed. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::controller_get_digital",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.",
      "explicit": false,
      "fullname": "misc.h::controller_get_digital",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/misc.h",
        "line": 250
      },
      "name": "controller_get_digital",
      "override": false,
      "paramList": [
        {
          "name": "id",
          "text": "The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER "
        },
        {
          "name": "button",
          "text": "The button to read. Must be one of DIGITAL_{RIGHT,DOWN,LEFT,UP,A,B,Y,X,R1,R2,L1,L2}"
        }
      ],
      "params": [
        {
          "name": "id",
          "type": "controller_id_e_t",
          "typePlain": "controller_id_e_t"
        },
        {
          "name": "button",
          "type": "controller_digital_e_t",
          "typePlain": "controller_digital_e_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a764da856ff7fcb710b10daa1a2fe4519",
      "returns": [
        "1 if the button on the controller is pressed. If the controller was not connected, then 0 is returned "
      ],
      "static": false,
      "strong": false,
      "summary": "Checks if a digital channel (button) on the controller is currently pressed. ",
      "title": "controller_get_digital",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "misc_8h.md#function-controller_get_digital",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-controller_get_digital_new_press",
      "argsString": "(controller_id_e_t id, controller_digital_e_t button)",
      "brief": "Returns a rising-edge case for a controller button press. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::controller_get_digital_new_press",
      "deleted": false,
      "details": "This function is not thread-safe. Multiple tasks polling a single button may return different results under the same circumstances, so only one task should call this function for any given button. E.g., [Task](classpros_1_1Task.md) A calls this function for buttons 1 and 2. [Task](classpros_1_1Task.md) B may call this function for button 3, but should not for buttons 1 or 2. A typical use-case for this function is to call inside opcontrol to detect new button presses, and not in any other tasks.\n\nThis function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.",
      "explicit": false,
      "fullname": "misc.h::controller_get_digital_new_press",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/misc.h",
        "line": 279
      },
      "name": "controller_get_digital_new_press",
      "override": false,
      "paramList": [
        {
          "name": "id",
          "text": "The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER "
        },
        {
          "name": "button",
          "text": "The button to read. Must be one of DIGITAL_{RIGHT,DOWN,LEFT,UP,A,B,Y,X,R1,R2,L1,L2}"
        }
      ],
      "params": [
        {
          "name": "id",
          "type": "controller_id_e_t",
          "typePlain": "controller_id_e_t"
        },
        {
          "name": "button",
          "type": "controller_digital_e_t",
          "typePlain": "controller_digital_e_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ac98088451005003975c19dda4e20a1f8",
      "returns": [
        "1 if the button on the controller is pressed and had not been pressed the last time this function was called, 0 otherwise. "
      ],
      "static": false,
      "strong": false,
      "summary": "Returns a rising-edge case for a controller button press. ",
      "title": "controller_get_digital_new_press",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "misc_8h.md#function-controller_get_digital_new_press",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-controller_print",
      "argsString": "(controller_id_e_t id, uint8_t line, uint8_t col, const char *fmt,...)",
      "brief": "Sets text to the controller LCD screen. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::controller_print",
      "deleted": false,
      "details": "\nThis function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.",
      "explicit": false,
      "fullname": "misc.h::controller_print",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/misc.h",
        "line": 308
      },
      "name": "controller_print",
      "note": [
        "[Controller](classpros_1_1Controller.md) text setting is currently in beta, so continuous, fast updates will not work well."
      ],
      "override": false,
      "paramList": [
        {
          "name": "id",
          "text": "The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER "
        },
        {
          "name": "line",
          "text": "The line number at which the text will be displayed [0-2] "
        },
        {
          "name": "col",
          "text": "The column number at which the text will be displayed [0-14] "
        },
        {
          "name": "fmt",
          "text": "The format string to print to the controller "
        },
        {
          "name": "...",
          "text": "The argument list for the format string"
        }
      ],
      "params": [
        {
          "name": "id",
          "type": "controller_id_e_t",
          "typePlain": "controller_id_e_t"
        },
        {
          "name": "line",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "col",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "fmt",
          "type": "const char *",
          "typePlain": "const char *"
        },
        {
          "name": "",
          "type": "...",
          "typePlain": "..."
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a7bdcfd084f96b7eda87867de947997b8",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets text to the controller LCD screen. ",
      "title": "controller_print",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "misc_8h.md#function-controller_print",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-controller_set_text",
      "argsString": "(controller_id_e_t id, uint8_t line, uint8_t col, const char *str)",
      "brief": "Sets text to the controller LCD screen. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::controller_set_text",
      "deleted": false,
      "details": "\nThis function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.",
      "explicit": false,
      "fullname": "misc.h::controller_set_text",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/misc.h",
        "line": 335
      },
      "name": "controller_set_text",
      "note": [
        "[Controller](classpros_1_1Controller.md) text setting is currently in beta, so continuous, fast updates will not work well."
      ],
      "override": false,
      "paramList": [
        {
          "name": "id",
          "text": "The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER "
        },
        {
          "name": "line",
          "text": "The line number at which the text will be displayed [0-2] "
        },
        {
          "name": "col",
          "text": "The column number at which the text will be displayed [0-14] "
        },
        {
          "name": "str",
          "text": "The pre-formatted string to print to the controller"
        }
      ],
      "params": [
        {
          "name": "id",
          "type": "controller_id_e_t",
          "typePlain": "controller_id_e_t"
        },
        {
          "name": "line",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "col",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "str",
          "type": "const char *",
          "typePlain": "const char *"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a9e301c0fb1fe773010f0f63c07f0ff30",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets text to the controller LCD screen. ",
      "title": "controller_set_text",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "misc_8h.md#function-controller_set_text",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-controller_clear_line",
      "argsString": "(controller_id_e_t id, uint8_t line)",
      "brief": "Clears an individual line of the controller screen. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::controller_clear_line",
      "deleted": false,
      "details": "\nThis function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.",
      "explicit": false,
      "fullname": "misc.h::controller_clear_line",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/misc.h",
        "line": 358
      },
      "name": "controller_clear_line",
      "note": [
        "[Controller](classpros_1_1Controller.md) text setting is currently in beta, so continuous, fast updates will not work well."
      ],
      "override": false,
      "paramList": [
        {
          "name": "id",
          "text": "The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER "
        },
        {
          "name": "line",
          "text": "The line number to clear [0-2]"
        }
      ],
      "params": [
        {
          "name": "id",
          "type": "controller_id_e_t",
          "typePlain": "controller_id_e_t"
        },
        {
          "name": "line",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a57f585f20ca272ce035390e9a7ba8cdc",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Clears an individual line of the controller screen. ",
      "title": "controller_clear_line",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "misc_8h.md#function-controller_clear_line",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-controller_clear",
      "argsString": "(controller_id_e_t id)",
      "brief": "Clears all of the lines on the controller screen. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::controller_clear",
      "deleted": false,
      "details": "\nThis function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.",
      "explicit": false,
      "fullname": "misc.h::controller_clear",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/misc.h",
        "line": 380
      },
      "name": "controller_clear",
      "note": [
        "[Controller](classpros_1_1Controller.md) text setting is currently in beta, so continuous, fast updates will not work well. On vexOS version 1.0.0 this function will block for 110ms."
      ],
      "override": false,
      "paramList": [
        {
          "name": "id",
          "text": "The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER"
        }
      ],
      "params": [
        {
          "name": "id",
          "type": "controller_id_e_t",
          "typePlain": "controller_id_e_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a9ccf53b8954bc4033abebec9a79da0c4",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Clears all of the lines on the controller screen. ",
      "title": "controller_clear",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "misc_8h.md#function-controller_clear",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-controller_rumble",
      "argsString": "(controller_id_e_t id, const char *rumble_pattern)",
      "brief": "Rumble the controller. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::controller_rumble",
      "deleted": false,
      "details": "\nThis function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.",
      "explicit": false,
      "fullname": "misc.h::controller_rumble",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/misc.h",
        "line": 405
      },
      "name": "controller_rumble",
      "note": [
        "[Controller](classpros_1_1Controller.md) rumble activation is currently in beta, so continuous, fast updates will not work well."
      ],
      "override": false,
      "paramList": [
        {
          "name": "id",
          "text": "The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER "
        },
        {
          "name": "rumble_pattern",
          "text": "A string consisting of the characters '.', '-', and ' ', where dots are short rumbles, dashes are long rumbles, and spaces are pauses. Maximum supported length is 8 characters."
        }
      ],
      "params": [
        {
          "name": "id",
          "type": "controller_id_e_t",
          "typePlain": "controller_id_e_t"
        },
        {
          "name": "rumble_pattern",
          "type": "const char *",
          "typePlain": "const char *"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a6a2fde9e8c3eec3dc88cb00235a1df7d",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Rumble the controller. ",
      "title": "controller_rumble",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "misc_8h.md#function-controller_rumble",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-battery_get_voltage",
      "argsString": "(void)",
      "brief": "Gets the current voltage of the battery, as reported by VEXos. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::battery_get_voltage",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the battery port.",
      "explicit": false,
      "fullname": "misc.h::battery_get_voltage",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/misc.h",
        "line": 416
      },
      "name": "battery_get_voltage",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "void",
          "typePlain": "void"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a9d34cbe2b17dc9daec083fdaf8c10a1e",
      "returns": [
        "The current voltage of the battery "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the current voltage of the battery, as reported by VEXos. ",
      "title": "battery_get_voltage",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "misc_8h.md#function-battery_get_voltage",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-battery_get_current",
      "argsString": "(void)",
      "brief": "Gets the current current of the battery, as reported by VEXos. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::battery_get_current",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the battery port.",
      "explicit": false,
      "fullname": "misc.h::battery_get_current",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/misc.h",
        "line": 427
      },
      "name": "battery_get_current",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "void",
          "typePlain": "void"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a6cd34d4960ca5193d70626bc59094505",
      "returns": [
        "The current current of the battery "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the current current of the battery, as reported by VEXos. ",
      "title": "battery_get_current",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "misc_8h.md#function-battery_get_current",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-battery_get_temperature",
      "argsString": "(void)",
      "brief": "Gets the current temperature of the battery, as reported by VEXos. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "double pros::c::battery_get_temperature",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the battery port.",
      "explicit": false,
      "fullname": "misc.h::battery_get_temperature",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "pros/misc.h",
        "line": 438
      },
      "name": "battery_get_temperature",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "void",
          "typePlain": "void"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a79dd0288c3ac547c75c25e374087f91b",
      "returns": [
        "The current temperature of the battery "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the current temperature of the battery, as reported by VEXos. ",
      "title": "battery_get_temperature",
      "type": "double",
      "typePlain": "double",
      "url": "misc_8h.md#function-battery_get_temperature",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-battery_get_capacity",
      "argsString": "(void)",
      "brief": "Gets the current capacity of the battery, as reported by VEXos. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "double pros::c::battery_get_capacity",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the battery port.",
      "explicit": false,
      "fullname": "misc.h::battery_get_capacity",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "pros/misc.h",
        "line": 449
      },
      "name": "battery_get_capacity",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "void",
          "typePlain": "void"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1aa5e755785c93c5cafe6b0d98695d7c20",
      "returns": [
        "The current capacity of the battery "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the current capacity of the battery, as reported by VEXos. ",
      "title": "battery_get_capacity",
      "type": "double",
      "typePlain": "double",
      "url": "misc_8h.md#function-battery_get_capacity",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-usd_is_installed",
      "argsString": "(void)",
      "brief": "Checks if the SD card is installed. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::usd_is_installed",
      "deleted": false,
      "explicit": false,
      "fullname": "misc.h::usd_is_installed",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/misc.h",
        "line": 456
      },
      "name": "usd_is_installed",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "void",
          "typePlain": "void"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1afa370f223e76f68f27bdfed38724724e",
      "returns": [
        "1 if the SD card is installed, 0 otherwise "
      ],
      "static": false,
      "strong": false,
      "summary": "Checks if the SD card is installed. ",
      "title": "usd_is_installed",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "misc_8h.md#function-usd_is_installed",
      "virtual": false,
      "visibility": "public"
    }
  ],
  "publicTypes": [
    {
      "abstract": false,
      "anchor": "#enum-controller_id_e_t",
      "category": "types",
      "const": false,
      "definition": "",
      "enumvalues": [
        {
          "anchor": "#enumvalue-e_controller_master",
          "category": "types",
          "definition": "",
          "fullname": "controller_id_e_t::E_CONTROLLER_MASTER",
          "hasDetails": false,
          "initializer": "= 0",
          "kind": "enumvalue",
          "name": "E_CONTROLLER_MASTER",
          "refid": "namespacepros_1af1323f00203099060d46f722b1fbd460a1c9d9311575877d185c44df1cadad226",
          "title": "E_CONTROLLER_MASTER",
          "url": "misc_8h.md#enumvalue-e_controller_master",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_controller_partner",
          "category": "types",
          "definition": "",
          "fullname": "controller_id_e_t::E_CONTROLLER_PARTNER",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "E_CONTROLLER_PARTNER",
          "refid": "namespacepros_1af1323f00203099060d46f722b1fbd460a62d367ebc8ce395520d786f5c12614ac",
          "title": "E_CONTROLLER_PARTNER",
          "url": "misc_8h.md#enumvalue-e_controller_partner",
          "visibility": "public"
        }
      ],
      "explicit": false,
      "fullname": "misc.h::controller_id_e_t",
      "hasDetails": false,
      "inline": false,
      "kind": "enum",
      "location": {
        "bodyEnd": 64,
        "bodyFile": "pros/misc.h",
        "bodyStart": 64,
        "column": 14,
        "file": "pros/misc.h",
        "line": 64
      },
      "name": "controller_id_e_t",
      "override": false,
      "refid": "namespacepros_1af1323f00203099060d46f722b1fbd460",
      "static": false,
      "strong": false,
      "title": "controller_id_e_t",
      "url": "misc_8h.md#enum-controller_id_e_t",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#enum-controller_analog_e_t",
      "category": "types",
      "const": false,
      "definition": "",
      "enumvalues": [
        {
          "anchor": "#enumvalue-e_controller_analog_left_x",
          "category": "types",
          "definition": "",
          "fullname": "controller_analog_e_t::E_CONTROLLER_ANALOG_LEFT_X",
          "hasDetails": false,
          "initializer": "= 0",
          "kind": "enumvalue",
          "name": "E_CONTROLLER_ANALOG_LEFT_X",
          "refid": "namespacepros_1a8bdd0963e2bc0d4fbe03435eee8a5ca5ac73153bd6a186402cb8fad10c069ec55",
          "title": "E_CONTROLLER_ANALOG_LEFT_X",
          "url": "misc_8h.md#enumvalue-e_controller_analog_left_x",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_controller_analog_left_y",
          "category": "types",
          "definition": "",
          "fullname": "controller_analog_e_t::E_CONTROLLER_ANALOG_LEFT_Y",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "E_CONTROLLER_ANALOG_LEFT_Y",
          "refid": "namespacepros_1a8bdd0963e2bc0d4fbe03435eee8a5ca5ac68939b7adc180b25b95367fd0098e99",
          "title": "E_CONTROLLER_ANALOG_LEFT_Y",
          "url": "misc_8h.md#enumvalue-e_controller_analog_left_y",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_controller_analog_right_x",
          "category": "types",
          "definition": "",
          "fullname": "controller_analog_e_t::E_CONTROLLER_ANALOG_RIGHT_X",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "E_CONTROLLER_ANALOG_RIGHT_X",
          "refid": "namespacepros_1a8bdd0963e2bc0d4fbe03435eee8a5ca5a1881009d58a89b01179876a44a768774",
          "title": "E_CONTROLLER_ANALOG_RIGHT_X",
          "url": "misc_8h.md#enumvalue-e_controller_analog_right_x",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_controller_analog_right_y",
          "category": "types",
          "definition": "",
          "fullname": "controller_analog_e_t::E_CONTROLLER_ANALOG_RIGHT_Y",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "E_CONTROLLER_ANALOG_RIGHT_Y",
          "refid": "namespacepros_1a8bdd0963e2bc0d4fbe03435eee8a5ca5a3954a2f3b6de53400df445cc144a67ca",
          "title": "E_CONTROLLER_ANALOG_RIGHT_Y",
          "url": "misc_8h.md#enumvalue-e_controller_analog_right_y",
          "visibility": "public"
        }
      ],
      "explicit": false,
      "fullname": "misc.h::controller_analog_e_t",
      "hasDetails": false,
      "inline": false,
      "kind": "enum",
      "location": {
        "bodyEnd": 71,
        "bodyFile": "pros/misc.h",
        "bodyStart": 66,
        "column": 14,
        "file": "pros/misc.h",
        "line": 66
      },
      "name": "controller_analog_e_t",
      "override": false,
      "refid": "namespacepros_1a8bdd0963e2bc0d4fbe03435eee8a5ca5",
      "static": false,
      "strong": false,
      "title": "controller_analog_e_t",
      "url": "misc_8h.md#enum-controller_analog_e_t",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#enum-controller_digital_e_t",
      "category": "types",
      "const": false,
      "definition": "",
      "enumvalues": [
        {
          "anchor": "#enumvalue-e_controller_digital_l1",
          "category": "types",
          "definition": "",
          "fullname": "controller_digital_e_t::E_CONTROLLER_DIGITAL_L1",
          "hasDetails": false,
          "initializer": "= 6",
          "kind": "enumvalue",
          "name": "E_CONTROLLER_DIGITAL_L1",
          "refid": "namespacepros_1a8c380ff02828ee53954bc0ce274253eda6152392f863b995bc682e6a7129dbdae",
          "title": "E_CONTROLLER_DIGITAL_L1",
          "url": "misc_8h.md#enumvalue-e_controller_digital_l1",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_controller_digital_l2",
          "category": "types",
          "definition": "",
          "fullname": "controller_digital_e_t::E_CONTROLLER_DIGITAL_L2",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "E_CONTROLLER_DIGITAL_L2",
          "refid": "namespacepros_1a8c380ff02828ee53954bc0ce274253edab0b7af86329d2806c7e52b8396ca3a76",
          "title": "E_CONTROLLER_DIGITAL_L2",
          "url": "misc_8h.md#enumvalue-e_controller_digital_l2",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_controller_digital_r1",
          "category": "types",
          "definition": "",
          "fullname": "controller_digital_e_t::E_CONTROLLER_DIGITAL_R1",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "E_CONTROLLER_DIGITAL_R1",
          "refid": "namespacepros_1a8c380ff02828ee53954bc0ce274253edae3ae971723bd1d263b7661264df420fc",
          "title": "E_CONTROLLER_DIGITAL_R1",
          "url": "misc_8h.md#enumvalue-e_controller_digital_r1",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_controller_digital_r2",
          "category": "types",
          "definition": "",
          "fullname": "controller_digital_e_t::E_CONTROLLER_DIGITAL_R2",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "E_CONTROLLER_DIGITAL_R2",
          "refid": "namespacepros_1a8c380ff02828ee53954bc0ce274253eda982e210433ab2a7ba149c4008ad73851",
          "title": "E_CONTROLLER_DIGITAL_R2",
          "url": "misc_8h.md#enumvalue-e_controller_digital_r2",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_controller_digital_up",
          "category": "types",
          "definition": "",
          "fullname": "controller_digital_e_t::E_CONTROLLER_DIGITAL_UP",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "E_CONTROLLER_DIGITAL_UP",
          "refid": "namespacepros_1a8c380ff02828ee53954bc0ce274253eda092df532483a0b27281748df9d226772",
          "title": "E_CONTROLLER_DIGITAL_UP",
          "url": "misc_8h.md#enumvalue-e_controller_digital_up",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_controller_digital_down",
          "category": "types",
          "definition": "",
          "fullname": "controller_digital_e_t::E_CONTROLLER_DIGITAL_DOWN",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "E_CONTROLLER_DIGITAL_DOWN",
          "refid": "namespacepros_1a8c380ff02828ee53954bc0ce274253eda4290d3c38ae937a54b8409c7567be50d",
          "title": "E_CONTROLLER_DIGITAL_DOWN",
          "url": "misc_8h.md#enumvalue-e_controller_digital_down",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_controller_digital_left",
          "category": "types",
          "definition": "",
          "fullname": "controller_digital_e_t::E_CONTROLLER_DIGITAL_LEFT",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "E_CONTROLLER_DIGITAL_LEFT",
          "refid": "namespacepros_1a8c380ff02828ee53954bc0ce274253eda83537ab72f80c74cb4c06a195b885b6c",
          "title": "E_CONTROLLER_DIGITAL_LEFT",
          "url": "misc_8h.md#enumvalue-e_controller_digital_left",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_controller_digital_right",
          "category": "types",
          "definition": "",
          "fullname": "controller_digital_e_t::E_CONTROLLER_DIGITAL_RIGHT",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "E_CONTROLLER_DIGITAL_RIGHT",
          "refid": "namespacepros_1a8c380ff02828ee53954bc0ce274253eda6311765554410202cc2c099695640d91",
          "title": "E_CONTROLLER_DIGITAL_RIGHT",
          "url": "misc_8h.md#enumvalue-e_controller_digital_right",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_controller_digital_x",
          "category": "types",
          "definition": "",
          "fullname": "controller_digital_e_t::E_CONTROLLER_DIGITAL_X",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "E_CONTROLLER_DIGITAL_X",
          "refid": "namespacepros_1a8c380ff02828ee53954bc0ce274253eda1ba98d2c4900c0ad3123f15090779fad",
          "title": "E_CONTROLLER_DIGITAL_X",
          "url": "misc_8h.md#enumvalue-e_controller_digital_x",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_controller_digital_b",
          "category": "types",
          "definition": "",
          "fullname": "controller_digital_e_t::E_CONTROLLER_DIGITAL_B",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "E_CONTROLLER_DIGITAL_B",
          "refid": "namespacepros_1a8c380ff02828ee53954bc0ce274253eda3b8c6ebc62fb8133413bb7090814ed54",
          "title": "E_CONTROLLER_DIGITAL_B",
          "url": "misc_8h.md#enumvalue-e_controller_digital_b",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_controller_digital_y",
          "category": "types",
          "definition": "",
          "fullname": "controller_digital_e_t::E_CONTROLLER_DIGITAL_Y",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "E_CONTROLLER_DIGITAL_Y",
          "refid": "namespacepros_1a8c380ff02828ee53954bc0ce274253eda89dfc687cc16e2e7b1ad022b47a698c4",
          "title": "E_CONTROLLER_DIGITAL_Y",
          "url": "misc_8h.md#enumvalue-e_controller_digital_y",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_controller_digital_a",
          "category": "types",
          "definition": "",
          "fullname": "controller_digital_e_t::E_CONTROLLER_DIGITAL_A",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "E_CONTROLLER_DIGITAL_A",
          "refid": "namespacepros_1a8c380ff02828ee53954bc0ce274253edabf8d8d50802f9417ba1f1512d2822f98",
          "title": "E_CONTROLLER_DIGITAL_A",
          "url": "misc_8h.md#enumvalue-e_controller_digital_a",
          "visibility": "public"
        }
      ],
      "explicit": false,
      "fullname": "misc.h::controller_digital_e_t",
      "hasDetails": false,
      "inline": false,
      "kind": "enum",
      "location": {
        "bodyEnd": 86,
        "bodyFile": "pros/misc.h",
        "bodyStart": 73,
        "column": 14,
        "file": "pros/misc.h",
        "line": 73
      },
      "name": "controller_digital_e_t",
      "override": false,
      "refid": "namespacepros_1a8c380ff02828ee53954bc0ce274253ed",
      "static": false,
      "strong": false,
      "title": "controller_digital_e_t",
      "url": "misc_8h.md#enum-controller_digital_e_t",
      "visibility": "public"
    }
  ],
  "refid": "misc_8h",
  "static": false,
  "strong": false,
  "title": "pros/misc.h",
  "url": "misc_8h.md#file-misc.h",
  "visibility": "public"
}