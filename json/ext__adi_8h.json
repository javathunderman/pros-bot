{
  "abstract": false,
  "anchor": "#file-ext_adi.h",
  "category": "files",
  "const": false,
  "definition": "",
  "details": "Contains prototypes for interfacing with the 3-Wire Expander.\n\nVisit [https://pros.cs.purdue.edu/v5/tutorials/topical/adi.html](https://pros.cs.purdue.edu/v5/tutorials/topical/adi.html) to learn more.\n\nThis file should not be modified by users, since it gets replaced whenever a kernel upgrade occurs.\n\nCopyright (c) 2017-2020, Purdue University ACM SIGBots.\n\nThis Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at [http://mozilla.org/MPL/2.0/](http://mozilla.org/MPL/2.0/). ",
  "explicit": false,
  "fullname": "pros/ext_adi.h",
  "hasAdditionalMembers": false,
  "hasDetails": true,
  "includes": "<stdbool.h>",
  "inline": false,
  "kind": "file",
  "location": {
    "column": 0,
    "file": "pros/ext_adi.h",
    "line": 0
  },
  "name": "pros/ext_adi.h",
  "namespaces": [
    {
      "anchor": "",
      "brief": "Get the current status of the competition control. ",
      "category": "namespaces",
      "fullname": "pros",
      "kind": "namespace",
      "name": "pros",
      "refid": "namespacepros",
      "summary": "Get the current status of the competition control. ",
      "title": "pros",
      "url": "namespacepros.md",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "pros::c",
      "kind": "namespace",
      "name": "pros::c",
      "refid": "namespacepros_1_1c",
      "title": "pros::c",
      "url": "namespacepros_1_1c.md",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-pros",
    "category": "dirs",
    "fullname": "pros",
    "kind": "dir",
    "name": "pros",
    "refid": "dir_214b722ca0199f3055230149c608b806",
    "title": "pros",
    "url": "dir_214b722ca0199f3055230149c608b806.md#dir-pros",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-pros",
      "category": "dirs",
      "fullname": "pros",
      "kind": "dir",
      "name": "pros",
      "refid": "dir_214b722ca0199f3055230149c608b806",
      "title": "pros",
      "url": "dir_214b722ca0199f3055230149c608b806.md#dir-pros",
      "visibility": "public"
    }
  ],
  "programlisting": "/**\n * \\file pros/ext_adi.h\n *\n * Contains prototypes for interfacing with the 3-Wire Expander.\n *\n * Visit https://pros.cs.purdue.edu/v5/tutorials/topical/adi.html to learn more.\n *\n * This file should not be modified by users, since it gets replaced whenever\n * a kernel upgrade occurs.\n *\n * Copyright (c) 2017-2020, Purdue University ACM SIGBots.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\n#ifndef _PROS_EXT_ADI_H_\n#define _PROS_EXT_ADI_H_\n\n#include <stdbool.h>\n#include <stdint.h>\n\n#include \"adi.h\"\n#include \"pros/adi.h\"\n#ifndef PROS_ERR\n#define PROS_ERR (INT32_MAX)\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\nnamespace pros {\n#endif\n\n#ifdef __cplusplus\nnamespace c {\n#endif\n\n/******************************************************************************/\n/**                         General ADI Use Functions                        **/\n/**                                                                          **/\n/**       These functions allow for interaction with any ADI port type       **/\n/******************************************************************************/\n\n/**\n * Gets the configuration for the given ADI port.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - Either the ADI port value or the smart port value is not within its\n *     valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).\n *\n * \\param smart_port\n *        The smart port number that the ADI Expander is in\n * \\param adi_port\n *        The ADI port number (from 1-8, 'a'-'h', 'A'-'H') for which to return\n *        the configuration\n *\n * \\return The ADI configuration for the given port\n */\nadi_port_config_e_t ext_adi_port_get_config(uint8_t smart_port, uint8_t adi_port);\n\n/**\n * Gets the value for the given ADI port.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - Either the ADI port value or the smart port value is not within its\n *     valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).\n *\n * \\param smart_port\n *        The smart port number that the ADI Expander is in\n * \\param adi_port\n *        The ADI port number (from 1-8, 'a'-'h', 'A'-'H') for which to return\n *        the configuration\n *\n * \\return The value stored for the given port\n */\nint32_t ext_adi_port_get_value(uint8_t smart_port, uint8_t adi_port);\n\n/**\n * Configures an ADI port to act as a given sensor type.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - Either the ADI port value or the smart port value is not within its\n *     valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).\n *\n * \\param smart_port\n *        The smart port number that the ADI Expander is in\n * \\param adi_port\n *        The ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure\n * \\param type\n *        The configuration type for the port\n *\n * \\return 1 if the operation was successful or PROS_ERR if the operation\n * failed, setting errno.\n */\nint32_t ext_adi_port_set_config(uint8_t smart_port, uint8_t adi_port, adi_port_config_e_t type);\n\n/**\n * Sets the value for the given ADI port.\n *\n * This only works on ports configured as outputs, and the behavior will change\n * depending on the configuration of the port.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - Either the ADI port value or the smart port value is not within its\n *     valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).\n *\n * \\param smart_port\n *        The smart port number that the ADI Expander is in\n * \\param adi_port\n *        The ADI port number (from 1-8, 'a'-'h', 'A'-'H') for which the value\n *        will be set\n * \\param value\n *        The value to set the ADI port to\n *\n * \\return 1 if the operation was successful or PROS_ERR if the operation\n * failed, setting errno.\n */\nint32_t ext_adi_port_set_value(uint8_t smart_port, uint8_t adi_port, int32_t value);\n\n/**\n * Calibrates the analog sensor on the specified port and returns the new\n * calibration value.\n *\n * This method assumes that the true sensor value is not actively changing at\n * this time and computes an average from approximately 500 samples, 1 ms apart,\n * for a 0.5 s period of calibration. The average value thus calculated is\n * returned and stored for later calls to the adi_analog_read_calibrated() and\n * adi_analog_read_calibrated_HR() functions. These functions will return\n * the difference between this value and the current sensor value when called.\n *\n * Do not use this function when the sensor value might be unstable\n * (gyro rotation, accelerometer movement).\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - Either the ADI port value or the smart port value is not within its\n *     valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).\n *\n * \\param smart_port\n *        The smart port number that the ADI Expander is in\n * \\param adi_port\n *        The ADI port to calibrate (from 1-8, 'a'-'h', 'A'-'H')\n *\n * \\return The average sensor value computed by this function\n */\nint32_t ext_adi_analog_calibrate(uint8_t smart_port, uint8_t adi_port);\n\n/**\n * Gets the 12-bit value of the specified port.\n *\n * The value returned is undefined if the analog pin has been switched to a\n * different mode.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - Either the ADI port value or the smart port value is not within its\n *     valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).\n * EADDRINUSE - The port is not configured as an analog input\n *\n * \\param smart_port\n *        The smart port number that the ADI Expander is in\n * \\param adi_port\n *        The ADI port (from 1-8, 'a'-'h', 'A'-'H') for which the value will be\n *        returned\n *\n * \\return The analog sensor value, where a value of 0 reflects an input voltage\n * of nearly 0 V and a value of 4095 reflects an input voltage of nearly 5 V\n */\nint32_t ext_adi_analog_read(uint8_t smart_port, uint8_t adi_port);\n\n/**\n * Gets the 12 bit calibrated value of an analog input port.\n *\n * The adi_analog_calibrate() function must be run first. This function is\n * inappropriate for sensor values intended for integration, as round-off error\n * can accumulate causing drift over time. Use adi_analog_read_calibrated_HR()\n * instead.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - Either the ADI port value or the smart port value is not within its\n *     valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).\n * EADDRINUSE - The port is not configured as an analog input\n *\n * \\param smart_port\n *        The smart port number that the ADI Expander is in\n * \\param adi_port\n *        The ADI port (from 1-8, 'a'-'h', 'A'-'H') for which the value will be\n *        returned\n *\n * \\return The difference of the sensor value from its calibrated default from\n * -4095 to 4095\n */\nint32_t ext_adi_analog_read_calibrated(uint8_t smart_port, uint8_t adi_port);\n\n/**\n * Gets the 16 bit calibrated value of an analog input port.\n *\n * The adi_analog_calibrate() function must be run first. This is intended for\n * integrated sensor values such as gyros and accelerometers to reduce drift due\n * to round-off, and should not be used on a sensor such as a line tracker\n * or potentiometer.\n *\n * The value returned actually has 16 bits of \"precision\", even though the ADC\n * only reads 12 bits, so that error induced by the average value being between\n * two values when integrated over time is trivial. Think of the value as the\n * true value times 16.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - Either the ADI port value or the smart port value is not within its\n *     valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).\n * EADDRINUSE - The port is not configured as an analog input\n *\n * \\param smart_port\n *        The smart port number that the ADI Expander is in\n * \\param adi_port\n *        The ADI port (from 1-8, 'a'-'h', 'A'-'H') for which the value will be\n *        returned\n *\n * \\return The difference of the sensor value from its calibrated default from\n * -16384 to 16384\n */\nint32_t ext_adi_analog_read_calibrated_HR(uint8_t smart_port, uint8_t adi_port);\n\n/**\n * Gets the digital value (1 or 0) of a port configured as a digital input.\n *\n * If the port is configured as some other mode, the digital value which\n * reflects the current state of the port is returned, which may or may not\n * differ from the currently set value. The return value is undefined for ports\n * configured as any mode other than a Digital Input.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - Either the ADI port value or the smart port value is not within its\n *     valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).\n * EADDRINUSE - The port is not configured as a digital input\n *\n * \\param smart_port\n *        The smart port number that the ADI Expander is in\n * \\param adi_port\n *        The ADI port to read (from 1-8, 'a'-'h', 'A'-'H')\n *\n * \\return True if the pin is HIGH, or false if it is LOW\n */\nint32_t ext_adi_digital_read(uint8_t smart_port, uint8_t adi_port);\n\n/**\n * Gets a rising-edge case for a digital button press.\n *\n * This function is not thread-safe.\n * Multiple tasks polling a single button may return different results under the\n * same circumstances, so only one task should call this function for any given\n * button. E.g., Task A calls this function for buttons 1 and 2. Task B may call\n * this function for button 3, but should not for buttons 1 or 2. A typical\n * use-case for this function is to call inside opcontrol to detect new button\n * presses, and not in any other tasks.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - Either the ADI port value or the smart port value is not within its\n *     valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).\n * EADDRINUSE - The port is not configured as a digital input\n *\n * \\param smart_port\n *        The smart port number that the ADI Expander is in\n * \\param adi_port\n *        The ADI port to read (from 1-8, 'a'-'h', 'A'-'H')\n *\n * \\return 1 if the button is pressed and had not been pressed\n * the last time this function was called, 0 otherwise.\n */\nint32_t ext_adi_digital_get_new_press(uint8_t smart_port, uint8_t adi_port);\n\n/**\n * Sets the digital value (1 or 0) of a port configured as a digital output.\n *\n * If the port is configured as some other mode, behavior is undefined.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - Either the ADI port value or the smart port value is not within its\n *     valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).\n * EADDRINUSE - The port is not configured as a digital output\n *\n * \\param smart_port\n *        The smart port number that the ADI Expander is in\n * \\param adi_port\n *        The ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure\n * \\param value\n *        An expression evaluating to \"true\" or \"false\" to set the output to\n *        HIGH or LOW respectively, or the constants HIGH or LOW themselves\n *\n * \\return 1 if the operation was successful or PROS_ERR if the operation\n * failed, setting errno.\n */\nint32_t ext_adi_digital_write(uint8_t smart_port, uint8_t adi_port, bool value);\n\n/**\n * Configures the port as an input or output with a variety of settings.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - Either the ADI port value or the smart port value is not within its\n *     valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).\n *\n * \\param smart_port\n *        The smart port number that the ADI Expander is in\n * \\param adi_port\n *        The ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure\n * \\param mode\n *        One of INPUT, INPUT_ANALOG, INPUT_FLOATING, OUTPUT, or OUTPUT_OD\n *\n * \\return 1 if the operation was successful or PROS_ERR if the operation\n * failed, setting errno.\n */\nint32_t ext_adi_pin_mode(uint8_t smart_port, uint8_t adi_port, uint8_t mode);\n\n/**\n * Sets the speed of the motor on the given port.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - Either the ADI port value or the smart port value is not within its\n *     valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).\n * EADDRINUSE - The port is not configured as an motor\n *\n * \\param smart_port\n *        The smart port number that the ADI Expander is in\n * \\param adi_port\n *        The ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure\n * \\param speed\n *        The new signed speed; -127 is full reverse and 127 is full forward,\n *        with 0 being off\n *\n * \\return 1 if the operation was successful or PROS_ERR if the operation\n * failed, setting errno.\n */\nint32_t ext_adi_motor_set(uint8_t smart_port, uint8_t adi_port, int8_t speed);\n\n/**\n * Gets the last set speed of the motor on the given port.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - Either the ADI port value or the smart port value is not within its\n *     valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).\n * EADDRINUSE - The port is not configured as an motor\n *\n * \\param smart_port\n *        The smart port number that the ADI Expander is in\n * \\param adi_port\n *        The ADI port to get (from 1-8, 'a'-'h', 'A'-'H')\n *\n * \\return The last set speed of the motor on the given port\n */\nint32_t ext_adi_motor_get(uint8_t smart_port, uint8_t adi_port);\n\n/**\n * Stops the motor on the given port.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - Either the ADI port value or the smart port value is not within its\n *     valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).\n * EADDRINUSE - The port is not configured as an motor\n *\n * \\param smart_port\n *        The smart port number that the ADI Expander is in\n * \\param adi_port\n *        The ADI port to set (from 1-8, 'a'-'h', 'A'-'H')\n *\n * \\return 1 if the operation was successful or PROS_ERR if the operation\n * failed, setting errno.\n */\nint32_t ext_adi_motor_stop(uint8_t smart_port, uint8_t adi_port);\n\n/**\n * Reference type for an initialized encoder.\n *\n * This merely contains the port number for the encoder, unlike its use as an\n * object to store encoder data in PROS 2.\n */\ntypedef int32_t ext_adi_encoder_t;\n\n/**\n * Gets the number of ticks recorded by the encoder.\n *\n * There are 360 ticks in one revolution.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - Either the ADI port value or the smart port value is not within its\n *     valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).\n * EADDRINUSE - The port is not configured as an encoder\n *\n * \\param enc\n *        The adi_encoder_t object from adi_encoder_init() to read\n *\n * \\return The signed and cumulative number of counts since the last start or\n * reset\n */\nint32_t ext_adi_encoder_get(ext_adi_encoder_t enc);\n\n/**\n * Creates an encoder object and configures the specified ports accordingly.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - Either the ADI port value or the smart port value is not within its\n *     valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).\n * EADDRINUSE - The port is not configured as an encoder\n *\n * \\param smart_port\n *        The smart port number that the ADI Expander is in\n * \\param adi_port_top\n *        The \"top\" wire from the encoder sensor with the removable cover side\n *        up\n * \\param adi_port_bottom\n *        The \"bottom\" wire from the encoder sensor\n * \\param reverse\n *        If \"true\", the sensor will count in the opposite direction\n *\n * \\return An adi_encoder_t object to be stored and used for later calls to\n * encoder functions\n */\next_adi_encoder_t ext_adi_encoder_init(uint8_t smart_port, uint8_t adi_port_top, uint8_t adi_port_bottom, bool reverse);\n\n/**\n * Sets the encoder value to zero.\n *\n * It is safe to use this method while an encoder is enabled. It is not\n * necessary to call this method before stopping or starting an encoder.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - Either the ADI port value or the smart port value is not within its\n *     valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).\n * EADDRINUSE - The port is not configured as an encoder\n *\n * \\param enc\n *        The adi_encoder_t object from adi_encoder_init() to reset\n *\n * \\return 1 if the operation was successful or PROS_ERR if the operation\n * failed, setting errno.\n */\nint32_t ext_adi_encoder_reset(ext_adi_encoder_t enc);\n\n/**\n * Disables the encoder and voids the configuration on its ports.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - Either the ADI port value or the smart port value is not within its\n *     valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).\n * EADDRINUSE - The port is not configured as an encoder\n *\n * \\param enc\n *        The adi_encoder_t object from adi_encoder_init() to stop\n *\n * \\return 1 if the operation was successful or PROS_ERR if the operation\n * failed, setting errno.\n */\nint32_t ext_adi_encoder_shutdown(ext_adi_encoder_t enc);\n\n/**\n * Reference type for an initialized ultrasonic.\n *\n * This merely contains the port number for the ultrasonic, unlike its use as an\n * object to store encoder data in PROS 2.\n */\ntypedef int32_t ext_adi_ultrasonic_t;\n\n/**\n * Gets the current ultrasonic sensor value in centimeters.\n *\n * If no object was found, zero is returned. If the ultrasonic sensor was never\n * started, the return value is undefined. Round and fluffy objects can cause\n * inaccurate values to be returned.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - Either the ADI port value or the smart port value is not within its\n *     valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).\n * EADDRINUSE - The port is not configured as an ultrasonic\n *\n * \\param ult\n *        The adi_ultrasonic_t object from adi_ultrasonic_init() to read\n *\n * \\return The distance to the nearest object in m^-4 (10000 indicates 1 meter),\n * measured from the sensor's mounting points.\n */\nint32_t ext_adi_ultrasonic_get(ext_adi_ultrasonic_t ult);\n\n/**\n * Creates an ultrasonic object and configures the specified ports accordingly.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - Either the ADI port value or the smart port value is not within its\n *     valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).\n * EADDRINUSE - The port is not configured as an ultrasonic\n *\n * \\param smart_port\n *        The smart port number that the ADI Expander is in\n * \\param adi_port_ping\n *        The port connected to the orange OUTPUT cable. This should be in port\n *        1, 3, 5, or 7 ('A', 'C', 'E', 'G').\n * \\param adi_port_echo\n *        The port connected to the yellow INPUT cable. This should be in the\n *        next highest port following port_ping.\n *\n * \\return An adi_ultrasonic_t object to be stored and used for later calls to\n * ultrasonic functions\n */\next_adi_ultrasonic_t ext_adi_ultrasonic_init(uint8_t smart_port, uint8_t adi_port_ping, uint8_t adi_port_echo);\n\n/**\n * Disables the ultrasonic sensor and voids the configuration on its ports.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - Either the ADI port value or the smart port value is not within its\n *     valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).\n * EADDRINUSE - The port is not configured as an ultrasonic\n *\n * \\param ult\n *        The adi_ultrasonic_t object from adi_ultrasonic_init() to stop\n *\n * \\return 1 if the operation was successful or PROS_ERR if the operation\n * failed, setting errno.\n */\nint32_t ext_adi_ultrasonic_shutdown(ext_adi_ultrasonic_t ult);\n\n/**\n * Reference type for an initialized gyroscope.\n *\n * This merely contains the port number for the gyroscope, unlike its use as an\n * object to store gyro data in PROS 2.\n *\n * (Might Be useless with the wire expander.)\n */\ntypedef int32_t ext_adi_gyro_t;\n\n/**\n * Gets the current gyro angle in tenths of a degree. Unless a multiplier is\n * applied to the gyro, the return value will be a whole number representing\n * the number of degrees of rotation times 10.\n *\n * There are 360 degrees in a circle, thus the gyro will return 3600 for one\n * whole rotation.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - Either the ADI port value or the smart port value is not within its\n *     valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).\n * EADDRINUSE - The port is not configured as a gyro\n *\n * \\param gyro\n *        The adi_gyro_t object for which the angle will be returned\n *\n * \\return The gyro angle in degrees.\n */\ndouble ext_adi_gyro_get(ext_adi_gyro_t gyro);\n\n/**\n * Initializes a gyroscope on the given port. If the given port has not\n * previously been configured as a gyro, then this function starts a 1300 ms\n * calibration period.\n *\n * It is highly recommended that this function be called from initialize() when\n * the robot is stationary to ensure proper calibration.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - Either the ADI port value or the smart port value is not within its\n *     valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).\n * EADDRINUSE - The port is not configured as a gyro\n *\n * \\param smart_port\n *        The smart port number that the ADI Expander is in\n * \\param adi_port\n *        The ADI port to initialize as a gyro (from 1-8, 'a'-'h', 'A'-'H')\n * \\param multiplier\n *        A scalar value that will be multiplied by the gyro heading value\n *        supplied by the ADI\n *\n * \\return An adi_gyro_t object containing the given port, or PROS_ERR if the\n * initialization failed.\n */\next_adi_gyro_t ext_adi_gyro_init(uint8_t smart_port, uint8_t adi_port, double multiplier);\n\n/**\n * Resets the gyroscope value to zero.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - Either the ADI port value or the smart port value is not within its\n *     valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).\n * EADDRINUSE - The port is not configured as a gyro\n *\n * \\param gyro\n *        The adi_gyro_t object for which the angle will be returned\n *\n * \\return 1 if the operation was successful or PROS_ERR if the operation\n * failed, setting errno.\n */\nint32_t ext_adi_gyro_reset(ext_adi_gyro_t gyro);\n\n/**\n * Disables the gyro and voids the configuration on its port.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - Either the ADI port value or the smart port value is not within its\n *     valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).\n * EADDRINUSE - The port is not configured as a gyro\n *\n * \\param gyro\n *        The adi_gyro_t object to be shut down\n *\n * \\return 1 if the operation was successful or PROS_ERR if the operation\n * failed, setting errno.\n */\nint32_t ext_adi_gyro_shutdown(ext_adi_gyro_t gyro);\n\n#ifdef __cplusplus\n}  // namespace c\n}  // namespace pros\n}\n#endif\n\n#endif  // _PROS_ADI_H_",
  "publicFunctions": [
    {
      "abstract": false,
      "anchor": "#function-ext_adi_port_get_config",
      "argsString": "(uint8_t smart_port, uint8_t adi_port)",
      "brief": "General ADI Use Functions ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "adi_port_config_e_t pros::c::ext_adi_port_get_config",
      "deleted": false,
      "details": "These functions allow for interaction with any ADI port type \n\n Gets the configuration for the given ADI port.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).",
      "explicit": false,
      "fullname": "ext_adi.h::ext_adi_port_get_config",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 21,
        "file": "pros/ext_adi.h",
        "line": 61
      },
      "name": "ext_adi_port_get_config",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port",
          "text": "The ADI port number (from 1-8, 'a'-'h', 'A'-'H') for which to return the configuration"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a529d923cac85867a1fc20e1b385bb8b2",
      "returns": [
        "The ADI configuration for the given port "
      ],
      "static": false,
      "strong": false,
      "summary": "General ADI Use Functions ",
      "title": "ext_adi_port_get_config",
      "type": "adi_port_config_e_t",
      "typePlain": "adi_port_config_e_t",
      "url": "ext__adi_8h.md#function-ext_adi_port_get_config",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_port_get_value",
      "argsString": "(uint8_t smart_port, uint8_t adi_port)",
      "brief": "Gets the value for the given ADI port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_port_get_value",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).",
      "explicit": false,
      "fullname": "ext_adi.h::ext_adi_port_get_value",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 79
      },
      "name": "ext_adi_port_get_value",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port",
          "text": "The ADI port number (from 1-8, 'a'-'h', 'A'-'H') for which to return the configuration"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a69502c412a1939551aab0f764ef14ebe",
      "returns": [
        "The value stored for the given port "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the value for the given ADI port. ",
      "title": "ext_adi_port_get_value",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "ext__adi_8h.md#function-ext_adi_port_get_value",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_port_set_config",
      "argsString": "(uint8_t smart_port, uint8_t adi_port, adi_port_config_e_t type)",
      "brief": "Configures an ADI port to act as a given sensor type. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_port_set_config",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).",
      "explicit": false,
      "fullname": "ext_adi.h::ext_adi_port_set_config",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 99
      },
      "name": "ext_adi_port_set_config",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port",
          "text": "The ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure "
        },
        {
          "name": "type",
          "text": "The configuration type for the port"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "type",
          "type": "adi_port_config_e_t",
          "typePlain": "adi_port_config_e_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a0a0ac030c3de3ac6374ef6c5ca9e4bc3",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Configures an ADI port to act as a given sensor type. ",
      "title": "ext_adi_port_set_config",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "ext__adi_8h.md#function-ext_adi_port_set_config",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_port_set_value",
      "argsString": "(uint8_t smart_port, uint8_t adi_port, int32_t value)",
      "brief": "Sets the value for the given ADI port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_port_set_value",
      "deleted": false,
      "details": "This only works on ports configured as outputs, and the behavior will change depending on the configuration of the port.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).",
      "explicit": false,
      "fullname": "ext_adi.h::ext_adi_port_set_value",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 123
      },
      "name": "ext_adi_port_set_value",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port",
          "text": "The ADI port number (from 1-8, 'a'-'h', 'A'-'H') for which the value will be set "
        },
        {
          "name": "value",
          "text": "The value to set the ADI port to"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "value",
          "type": "int32_t",
          "typePlain": "int32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a66bcb742f80b237401eebce4e6f509e8",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets the value for the given ADI port. ",
      "title": "ext_adi_port_set_value",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "ext__adi_8h.md#function-ext_adi_port_set_value",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_analog_calibrate",
      "argsString": "(uint8_t smart_port, uint8_t adi_port)",
      "brief": "Calibrates the analog sensor on the specified port and returns the new calibration value. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_analog_calibrate",
      "deleted": false,
      "details": "This method assumes that the true sensor value is not actively changing at this time and computes an average from approximately 500 samples, 1 ms apart, for a 0.5 s period of calibration. The average value thus calculated is returned and stored for later calls to the [adi_analog_read_calibrated()](namespacepros_1_1c.md#function-adi_analog_read_calibrated) and [adi_analog_read_calibrated_HR()](namespacepros_1_1c.md#function-adi_analog_read_calibrated_hr) functions. These functions will return the difference between this value and the current sensor value when called.\n\nDo not use this function when the sensor value might be unstable (gyro rotation, accelerometer movement).\n\nThis function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).",
      "explicit": false,
      "fullname": "ext_adi.h::ext_adi_analog_calibrate",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 151
      },
      "name": "ext_adi_analog_calibrate",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port",
          "text": "The ADI port to calibrate (from 1-8, 'a'-'h', 'A'-'H')"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ac7ce5918ef247fbfbebadb8b87417ced",
      "returns": [
        "The average sensor value computed by this function "
      ],
      "static": false,
      "strong": false,
      "summary": "Calibrates the analog sensor on the specified port and returns the new calibration value. ",
      "title": "ext_adi_analog_calibrate",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "ext__adi_8h.md#function-ext_adi_analog_calibrate",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_analog_read",
      "argsString": "(uint8_t smart_port, uint8_t adi_port)",
      "brief": "Gets the 12-bit value of the specified port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_analog_read",
      "deleted": false,
      "details": "The value returned is undefined if the analog pin has been switched to a different mode.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as an analog input",
      "explicit": false,
      "fullname": "ext_adi.h::ext_adi_analog_read",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 174
      },
      "name": "ext_adi_analog_read",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port",
          "text": "The ADI port (from 1-8, 'a'-'h', 'A'-'H') for which the value will be returned"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ad23c527e73c2008d5bf49030efa255ef",
      "returns": [
        "The analog sensor value, where a value of 0 reflects an input voltage of nearly 0 V and a value of 4095 reflects an input voltage of nearly 5 V "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the 12-bit value of the specified port. ",
      "title": "ext_adi_analog_read",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "ext__adi_8h.md#function-ext_adi_analog_read",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_analog_read_calibrated",
      "argsString": "(uint8_t smart_port, uint8_t adi_port)",
      "brief": "Gets the 12 bit calibrated value of an analog input port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_analog_read_calibrated",
      "deleted": false,
      "details": "The [adi_analog_calibrate()](namespacepros_1_1c.md#function-adi_analog_calibrate) function must be run first. This function is inappropriate for sensor values intended for integration, as round-off error can accumulate causing drift over time. Use [adi_analog_read_calibrated_HR()](namespacepros_1_1c.md#function-adi_analog_read_calibrated_hr) instead.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as an analog input",
      "explicit": false,
      "fullname": "ext_adi.h::ext_adi_analog_read_calibrated",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 199
      },
      "name": "ext_adi_analog_read_calibrated",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port",
          "text": "The ADI port (from 1-8, 'a'-'h', 'A'-'H') for which the value will be returned"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a2dd9e7a9e761ed80088bcf7f44920a42",
      "returns": [
        "The difference of the sensor value from its calibrated default from -4095 to 4095 "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the 12 bit calibrated value of an analog input port. ",
      "title": "ext_adi_analog_read_calibrated",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "ext__adi_8h.md#function-ext_adi_analog_read_calibrated",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_analog_read_calibrated_hr",
      "argsString": "(uint8_t smart_port, uint8_t adi_port)",
      "brief": "Gets the 16 bit calibrated value of an analog input port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_analog_read_calibrated_HR",
      "deleted": false,
      "details": "The [adi_analog_calibrate()](namespacepros_1_1c.md#function-adi_analog_calibrate) function must be run first. This is intended for integrated sensor values such as gyros and accelerometers to reduce drift due to round-off, and should not be used on a sensor such as a line tracker or potentiometer.\n\nThe value returned actually has 16 bits of \"precision\", even though the ADC only reads 12 bits, so that error induced by the average value being between two values when integrated over time is trivial. Think of the value as the true value times 16.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as an analog input",
      "explicit": false,
      "fullname": "ext_adi.h::ext_adi_analog_read_calibrated_HR",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 229
      },
      "name": "ext_adi_analog_read_calibrated_HR",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port",
          "text": "The ADI port (from 1-8, 'a'-'h', 'A'-'H') for which the value will be returned"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a4e1d85f2e166adf83743b9fde5c504e8",
      "returns": [
        "The difference of the sensor value from its calibrated default from -16384 to 16384 "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the 16 bit calibrated value of an analog input port. ",
      "title": "ext_adi_analog_read_calibrated_HR",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "ext__adi_8h.md#function-ext_adi_analog_read_calibrated_hr",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_digital_read",
      "argsString": "(uint8_t smart_port, uint8_t adi_port)",
      "brief": "Gets the digital value (1 or 0) of a port configured as a digital input. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_digital_read",
      "deleted": false,
      "details": "If the port is configured as some other mode, the digital value which reflects the current state of the port is returned, which may or may not differ from the currently set value. The return value is undefined for ports configured as any mode other than a Digital Input.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as a digital input",
      "explicit": false,
      "fullname": "ext_adi.h::ext_adi_digital_read",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 252
      },
      "name": "ext_adi_digital_read",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port",
          "text": "The ADI port to read (from 1-8, 'a'-'h', 'A'-'H')"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ad030dfc04f9d5adb0861f940472974f0",
      "returns": [
        "True if the pin is HIGH, or false if it is LOW "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the digital value (1 or 0) of a port configured as a digital input. ",
      "title": "ext_adi_digital_read",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "ext__adi_8h.md#function-ext_adi_digital_read",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_digital_get_new_press",
      "argsString": "(uint8_t smart_port, uint8_t adi_port)",
      "brief": "Gets a rising-edge case for a digital button press. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_digital_get_new_press",
      "deleted": false,
      "details": "This function is not thread-safe. Multiple tasks polling a single button may return different results under the same circumstances, so only one task should call this function for any given button. E.g., [Task](classpros_1_1Task.md) A calls this function for buttons 1 and 2. [Task](classpros_1_1Task.md) B may call this function for button 3, but should not for buttons 1 or 2. A typical use-case for this function is to call inside opcontrol to detect new button presses, and not in any other tasks.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as a digital input",
      "explicit": false,
      "fullname": "ext_adi.h::ext_adi_digital_get_new_press",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 279
      },
      "name": "ext_adi_digital_get_new_press",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port",
          "text": "The ADI port to read (from 1-8, 'a'-'h', 'A'-'H')"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ac5b25457c1f1277dd545b6fab326299c",
      "returns": [
        "1 if the button is pressed and had not been pressed the last time this function was called, 0 otherwise. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets a rising-edge case for a digital button press. ",
      "title": "ext_adi_digital_get_new_press",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "ext__adi_8h.md#function-ext_adi_digital_get_new_press",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_digital_write",
      "argsString": "(uint8_t smart_port, uint8_t adi_port, bool value)",
      "brief": "Sets the digital value (1 or 0) of a port configured as a digital output. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_digital_write",
      "deleted": false,
      "details": "If the port is configured as some other mode, behavior is undefined.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as a digital output",
      "explicit": false,
      "fullname": "ext_adi.h::ext_adi_digital_write",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 303
      },
      "name": "ext_adi_digital_write",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port",
          "text": "The ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure "
        },
        {
          "name": "value",
          "text": "An expression evaluating to \"true\" or \"false\" to set the output to HIGH or LOW respectively, or the constants HIGH or LOW themselves"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "value",
          "type": "bool",
          "typePlain": "bool"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a638e7d47bbdde4b545be396d4cb20eea",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets the digital value (1 or 0) of a port configured as a digital output. ",
      "title": "ext_adi_digital_write",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "ext__adi_8h.md#function-ext_adi_digital_write",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_pin_mode",
      "argsString": "(uint8_t smart_port, uint8_t adi_port, uint8_t mode)",
      "brief": "Configures the port as an input or output with a variety of settings. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_pin_mode",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).",
      "explicit": false,
      "fullname": "ext_adi.h::ext_adi_pin_mode",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 323
      },
      "name": "ext_adi_pin_mode",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port",
          "text": "The ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure "
        },
        {
          "name": "mode",
          "text": "One of INPUT, INPUT_ANALOG, INPUT_FLOATING, OUTPUT, or OUTPUT_OD"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "mode",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1afbc569ddf47381965a0abdecfcd927bf",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Configures the port as an input or output with a variety of settings. ",
      "title": "ext_adi_pin_mode",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "ext__adi_8h.md#function-ext_adi_pin_mode",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_motor_set",
      "argsString": "(uint8_t smart_port, uint8_t adi_port, int8_t speed)",
      "brief": "Sets the speed of the motor on the given port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_motor_set",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as an motor",
      "explicit": false,
      "fullname": "ext_adi.h::ext_adi_motor_set",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 345
      },
      "name": "ext_adi_motor_set",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port",
          "text": "The ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure "
        },
        {
          "name": "speed",
          "text": "The new signed speed; -127 is full reverse and 127 is full forward, with 0 being off"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "speed",
          "type": "int8_t",
          "typePlain": "int8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a730496b89cb6864e53ade872dfbe479e",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets the speed of the motor on the given port. ",
      "title": "ext_adi_motor_set",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "ext__adi_8h.md#function-ext_adi_motor_set",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_motor_get",
      "argsString": "(uint8_t smart_port, uint8_t adi_port)",
      "brief": "Gets the last set speed of the motor on the given port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_motor_get",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as an motor",
      "explicit": false,
      "fullname": "ext_adi.h::ext_adi_motor_get",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 363
      },
      "name": "ext_adi_motor_get",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port",
          "text": "The ADI port to get (from 1-8, 'a'-'h', 'A'-'H')"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a50b5f4f2d806d8725ec6feb59a13d2b2",
      "returns": [
        "The last set speed of the motor on the given port "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the last set speed of the motor on the given port. ",
      "title": "ext_adi_motor_get",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "ext__adi_8h.md#function-ext_adi_motor_get",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_motor_stop",
      "argsString": "(uint8_t smart_port, uint8_t adi_port)",
      "brief": "Stops the motor on the given port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_motor_stop",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as an motor",
      "explicit": false,
      "fullname": "ext_adi.h::ext_adi_motor_stop",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 382
      },
      "name": "ext_adi_motor_stop",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port",
          "text": "The ADI port to set (from 1-8, 'a'-'h', 'A'-'H')"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a3bcee559e95f3f4cb64e74521b5735d6",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Stops the motor on the given port. ",
      "title": "ext_adi_motor_stop",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "ext__adi_8h.md#function-ext_adi_motor_stop",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_encoder_get",
      "argsString": "(ext_adi_encoder_t enc)",
      "brief": "Gets the number of ticks recorded by the encoder. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_encoder_get",
      "deleted": false,
      "details": "There are 360 ticks in one revolution.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as an encoder",
      "explicit": false,
      "fullname": "ext_adi.h::ext_adi_encoder_get",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 409
      },
      "name": "ext_adi_encoder_get",
      "override": false,
      "paramList": [
        {
          "name": "enc",
          "text": "The adi_encoder_t object from [adi_encoder_init()](namespacepros_1_1c.md#function-adi_encoder_init) to read"
        }
      ],
      "params": [
        {
          "name": "enc",
          "type": "ext_adi_encoder_t",
          "typePlain": "ext_adi_encoder_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a63487c255370a2176334af8895ae188c",
      "returns": [
        "The signed and cumulative number of counts since the last start or reset "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the number of ticks recorded by the encoder. ",
      "title": "ext_adi_encoder_get",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "ext__adi_8h.md#function-ext_adi_encoder_get",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_encoder_init",
      "argsString": "(uint8_t smart_port, uint8_t adi_port_top, uint8_t adi_port_bottom, bool reverse)",
      "brief": "Creates an encoder object and configures the specified ports accordingly. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ext_adi_encoder_t pros::c::ext_adi_encoder_init",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as an encoder",
      "explicit": false,
      "fullname": "ext_adi.h::ext_adi_encoder_init",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 19,
        "file": "pros/ext_adi.h",
        "line": 433
      },
      "name": "ext_adi_encoder_init",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port_top",
          "text": "The \"top\" wire from the encoder sensor with the removable cover side up "
        },
        {
          "name": "adi_port_bottom",
          "text": "The \"bottom\" wire from the encoder sensor "
        },
        {
          "name": "reverse",
          "text": "If \"true\", the sensor will count in the opposite direction"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port_top",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port_bottom",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "reverse",
          "type": "bool",
          "typePlain": "bool"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ad5aecf207806976751067f9b0014d44d",
      "returns": [
        "An adi_encoder_t object to be stored and used for later calls to encoder functions "
      ],
      "static": false,
      "strong": false,
      "summary": "Creates an encoder object and configures the specified ports accordingly. ",
      "title": "ext_adi_encoder_init",
      "type": "ext_adi_encoder_t",
      "typePlain": "ext_adi_encoder_t",
      "url": "ext__adi_8h.md#function-ext_adi_encoder_init",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_encoder_reset",
      "argsString": "(ext_adi_encoder_t enc)",
      "brief": "Sets the encoder value to zero. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_encoder_reset",
      "deleted": false,
      "details": "It is safe to use this method while an encoder is enabled. It is not necessary to call this method before stopping or starting an encoder.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as an encoder",
      "explicit": false,
      "fullname": "ext_adi.h::ext_adi_encoder_reset",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 453
      },
      "name": "ext_adi_encoder_reset",
      "override": false,
      "paramList": [
        {
          "name": "enc",
          "text": "The adi_encoder_t object from [adi_encoder_init()](namespacepros_1_1c.md#function-adi_encoder_init) to reset"
        }
      ],
      "params": [
        {
          "name": "enc",
          "type": "ext_adi_encoder_t",
          "typePlain": "ext_adi_encoder_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a8c631b2f466307d44407d3b5a1bdf021",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets the encoder value to zero. ",
      "title": "ext_adi_encoder_reset",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "ext__adi_8h.md#function-ext_adi_encoder_reset",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_encoder_shutdown",
      "argsString": "(ext_adi_encoder_t enc)",
      "brief": "Disables the encoder and voids the configuration on its ports. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_encoder_shutdown",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as an encoder",
      "explicit": false,
      "fullname": "ext_adi.h::ext_adi_encoder_shutdown",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 470
      },
      "name": "ext_adi_encoder_shutdown",
      "override": false,
      "paramList": [
        {
          "name": "enc",
          "text": "The adi_encoder_t object from [adi_encoder_init()](namespacepros_1_1c.md#function-adi_encoder_init) to stop"
        }
      ],
      "params": [
        {
          "name": "enc",
          "type": "ext_adi_encoder_t",
          "typePlain": "ext_adi_encoder_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ac393c5a6907b482311b430ab0fd01464",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Disables the encoder and voids the configuration on its ports. ",
      "title": "ext_adi_encoder_shutdown",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "ext__adi_8h.md#function-ext_adi_encoder_shutdown",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_ultrasonic_get",
      "argsString": "(ext_adi_ultrasonic_t ult)",
      "brief": "Gets the current ultrasonic sensor value in centimeters. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_ultrasonic_get",
      "deleted": false,
      "details": "If no object was found, zero is returned. If the ultrasonic sensor was never started, the return value is undefined. Round and fluffy objects can cause inaccurate values to be returned.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as an ultrasonic",
      "explicit": false,
      "fullname": "ext_adi.h::ext_adi_ultrasonic_get",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 499
      },
      "name": "ext_adi_ultrasonic_get",
      "override": false,
      "paramList": [
        {
          "name": "ult",
          "text": "The adi_ultrasonic_t object from [adi_ultrasonic_init()](namespacepros_1_1c.md#function-adi_ultrasonic_init) to read"
        }
      ],
      "params": [
        {
          "name": "ult",
          "type": "ext_adi_ultrasonic_t",
          "typePlain": "ext_adi_ultrasonic_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a39da3e5809db13079605708f18156fb7",
      "returns": [
        "The distance to the nearest object in m^-4 (10000 indicates 1 meter), measured from the sensor's mounting points. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the current ultrasonic sensor value in centimeters. ",
      "title": "ext_adi_ultrasonic_get",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "ext__adi_8h.md#function-ext_adi_ultrasonic_get",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_ultrasonic_init",
      "argsString": "(uint8_t smart_port, uint8_t adi_port_ping, uint8_t adi_port_echo)",
      "brief": "Creates an ultrasonic object and configures the specified ports accordingly. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ext_adi_ultrasonic_t pros::c::ext_adi_ultrasonic_init",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as an ultrasonic",
      "explicit": false,
      "fullname": "ext_adi.h::ext_adi_ultrasonic_init",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 22,
        "file": "pros/ext_adi.h",
        "line": 522
      },
      "name": "ext_adi_ultrasonic_init",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port_ping",
          "text": "The port connected to the orange OUTPUT cable. This should be in port 1, 3, 5, or 7 ('A', 'C', 'E', 'G'). "
        },
        {
          "name": "adi_port_echo",
          "text": "The port connected to the yellow INPUT cable. This should be in the next highest port following port_ping."
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port_ping",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port_echo",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1aa9c9828dbd73694315c1b1cf5cdb59d8",
      "returns": [
        "An adi_ultrasonic_t object to be stored and used for later calls to ultrasonic functions "
      ],
      "static": false,
      "strong": false,
      "summary": "Creates an ultrasonic object and configures the specified ports accordingly. ",
      "title": "ext_adi_ultrasonic_init",
      "type": "ext_adi_ultrasonic_t",
      "typePlain": "ext_adi_ultrasonic_t",
      "url": "ext__adi_8h.md#function-ext_adi_ultrasonic_init",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_ultrasonic_shutdown",
      "argsString": "(ext_adi_ultrasonic_t ult)",
      "brief": "Disables the ultrasonic sensor and voids the configuration on its ports. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_ultrasonic_shutdown",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as an ultrasonic",
      "explicit": false,
      "fullname": "ext_adi.h::ext_adi_ultrasonic_shutdown",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 539
      },
      "name": "ext_adi_ultrasonic_shutdown",
      "override": false,
      "paramList": [
        {
          "name": "ult",
          "text": "The adi_ultrasonic_t object from [adi_ultrasonic_init()](namespacepros_1_1c.md#function-adi_ultrasonic_init) to stop"
        }
      ],
      "params": [
        {
          "name": "ult",
          "type": "ext_adi_ultrasonic_t",
          "typePlain": "ext_adi_ultrasonic_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a43715ce7b1d8b4b2b3d09f2a04c14c0d",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Disables the ultrasonic sensor and voids the configuration on its ports. ",
      "title": "ext_adi_ultrasonic_shutdown",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "ext__adi_8h.md#function-ext_adi_ultrasonic_shutdown",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_gyro_get",
      "argsString": "(ext_adi_gyro_t gyro)",
      "brief": "Gets the current gyro angle in tenths of a degree. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "double pros::c::ext_adi_gyro_get",
      "deleted": false,
      "details": "Unless a multiplier is applied to the gyro, the return value will be a whole number representing the number of degrees of rotation times 10.\n\nThere are 360 degrees in a circle, thus the gyro will return 3600 for one whole rotation.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as a gyro",
      "explicit": false,
      "fullname": "ext_adi.h::ext_adi_gyro_get",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "pros/ext_adi.h",
        "line": 570
      },
      "name": "ext_adi_gyro_get",
      "override": false,
      "paramList": [
        {
          "name": "gyro",
          "text": "The adi_gyro_t object for which the angle will be returned"
        }
      ],
      "params": [
        {
          "name": "gyro",
          "type": "ext_adi_gyro_t",
          "typePlain": "ext_adi_gyro_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a0d75771553832ae16e7b45833fb095fd",
      "returns": [
        "The gyro angle in degrees. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the current gyro angle in tenths of a degree. ",
      "title": "ext_adi_gyro_get",
      "type": "double",
      "typePlain": "double",
      "url": "ext__adi_8h.md#function-ext_adi_gyro_get",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_gyro_init",
      "argsString": "(uint8_t smart_port, uint8_t adi_port, double multiplier)",
      "brief": "Initializes a gyroscope on the given port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ext_adi_gyro_t pros::c::ext_adi_gyro_init",
      "deleted": false,
      "details": "If the given port has not previously been configured as a gyro, then this function starts a 1300 ms calibration period.\n\nIt is highly recommended that this function be called from [initialize()](main_8h.md#function-initialize) when the robot is stationary to ensure proper calibration.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as a gyro",
      "explicit": false,
      "fullname": "ext_adi.h::ext_adi_gyro_init",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 16,
        "file": "pros/ext_adi.h",
        "line": 597
      },
      "name": "ext_adi_gyro_init",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port",
          "text": "The ADI port to initialize as a gyro (from 1-8, 'a'-'h', 'A'-'H') "
        },
        {
          "name": "multiplier",
          "text": "A scalar value that will be multiplied by the gyro heading value supplied by the ADI"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "multiplier",
          "type": "double",
          "typePlain": "double"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a62cddb9a1858256f0fa03effc89ddb20",
      "returns": [
        "An adi_gyro_t object containing the given port, or PROS_ERR if the initialization failed. "
      ],
      "static": false,
      "strong": false,
      "summary": "Initializes a gyroscope on the given port. ",
      "title": "ext_adi_gyro_init",
      "type": "ext_adi_gyro_t",
      "typePlain": "ext_adi_gyro_t",
      "url": "ext__adi_8h.md#function-ext_adi_gyro_init",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_gyro_reset",
      "argsString": "(ext_adi_gyro_t gyro)",
      "brief": "Resets the gyroscope value to zero. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_gyro_reset",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as a gyro",
      "explicit": false,
      "fullname": "ext_adi.h::ext_adi_gyro_reset",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 614
      },
      "name": "ext_adi_gyro_reset",
      "override": false,
      "paramList": [
        {
          "name": "gyro",
          "text": "The adi_gyro_t object for which the angle will be returned"
        }
      ],
      "params": [
        {
          "name": "gyro",
          "type": "ext_adi_gyro_t",
          "typePlain": "ext_adi_gyro_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a91d5a238cdf4fcde887bbb88e3a7ecb0",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Resets the gyroscope value to zero. ",
      "title": "ext_adi_gyro_reset",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "ext__adi_8h.md#function-ext_adi_gyro_reset",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_gyro_shutdown",
      "argsString": "(ext_adi_gyro_t gyro)",
      "brief": "Disables the gyro and voids the configuration on its port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_gyro_shutdown",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as a gyro",
      "explicit": false,
      "fullname": "ext_adi.h::ext_adi_gyro_shutdown",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 631
      },
      "name": "ext_adi_gyro_shutdown",
      "override": false,
      "paramList": [
        {
          "name": "gyro",
          "text": "The adi_gyro_t object to be shut down"
        }
      ],
      "params": [
        {
          "name": "gyro",
          "type": "ext_adi_gyro_t",
          "typePlain": "ext_adi_gyro_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a30f807700f54ac3365a4a069f8b76747",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Disables the gyro and voids the configuration on its port. ",
      "title": "ext_adi_gyro_shutdown",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "ext__adi_8h.md#function-ext_adi_gyro_shutdown",
      "virtual": false,
      "visibility": "public"
    }
  ],
  "publicTypes": [
    {
      "abstract": false,
      "anchor": "#typedef-ext_adi_encoder_t",
      "brief": "Reference type for an initialized encoder. ",
      "category": "types",
      "const": false,
      "definition": "typedef int32_t ext_adi_encoder_t",
      "details": "This merely contains the port number for the encoder, unlike its use as an object to store encoder data in PROS 2. ",
      "explicit": false,
      "fullname": "ext_adi.h::ext_adi_encoder_t",
      "hasDetails": true,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "pros/ext_adi.h",
        "bodyStart": 390,
        "column": 17,
        "file": "pros/ext_adi.h",
        "line": 390
      },
      "name": "ext_adi_encoder_t",
      "override": false,
      "refid": "namespacepros_1_1c_1a819f455cfd280a0a3f2489ee88aa19ac",
      "static": false,
      "strong": false,
      "summary": "Reference type for an initialized encoder. ",
      "title": "ext_adi_encoder_t",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "ext__adi_8h.md#typedef-ext_adi_encoder_t",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-ext_adi_ultrasonic_t",
      "brief": "Reference type for an initialized ultrasonic. ",
      "category": "types",
      "const": false,
      "definition": "typedef int32_t ext_adi_ultrasonic_t",
      "details": "This merely contains the port number for the ultrasonic, unlike its use as an object to store encoder data in PROS 2. ",
      "explicit": false,
      "fullname": "ext_adi.h::ext_adi_ultrasonic_t",
      "hasDetails": true,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "pros/ext_adi.h",
        "bodyStart": 478,
        "column": 17,
        "file": "pros/ext_adi.h",
        "line": 478
      },
      "name": "ext_adi_ultrasonic_t",
      "override": false,
      "refid": "namespacepros_1_1c_1a628d2ba74a77b5d590e4b865e3f4a7aa",
      "static": false,
      "strong": false,
      "summary": "Reference type for an initialized ultrasonic. ",
      "title": "ext_adi_ultrasonic_t",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "ext__adi_8h.md#typedef-ext_adi_ultrasonic_t",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-ext_adi_gyro_t",
      "brief": "Reference type for an initialized gyroscope. ",
      "category": "types",
      "const": false,
      "definition": "typedef int32_t ext_adi_gyro_t",
      "details": "This merely contains the port number for the gyroscope, unlike its use as an object to store gyro data in PROS 2.\n\n(Might Be useless with the wire expander.) ",
      "explicit": false,
      "fullname": "ext_adi.h::ext_adi_gyro_t",
      "hasDetails": true,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "pros/ext_adi.h",
        "bodyStart": 549,
        "column": 17,
        "file": "pros/ext_adi.h",
        "line": 549
      },
      "name": "ext_adi_gyro_t",
      "override": false,
      "refid": "namespacepros_1_1c_1aeb1fda9da4589cd3cd2e9efe5693f308",
      "static": false,
      "strong": false,
      "summary": "Reference type for an initialized gyroscope. ",
      "title": "ext_adi_gyro_t",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "ext__adi_8h.md#typedef-ext_adi_gyro_t",
      "visibility": "public"
    }
  ],
  "refid": "ext__adi_8h",
  "static": false,
  "strong": false,
  "title": "pros/ext_adi.h",
  "url": "ext__adi_8h.md#file-ext_adi.h",
  "visibility": "public"
}