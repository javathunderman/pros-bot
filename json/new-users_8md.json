{
  "abstract": false,
  "anchor": "#file-new-users.md",
  "category": "files",
  "const": false,
  "definition": "",
  "explicit": false,
  "fullname": "new-users.md",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "inline": false,
  "kind": "file",
  "location": {
    "column": 0,
    "file": "docs/getting-started/new-users.md",
    "line": 0
  },
  "name": "new-users.md",
  "override": false,
  "parent": null,
  "programlisting": "\\page new-users PROS First Time Users Guide\n\nThe most important characteristic of PROS to note when getting started\nis that PROS is just standard C or C++ programming. Anything that works\nin standard C/C++ will work as a part of a PROS project, and similarly\nthe errors given for code that doesn't work will match errors given for\nany similar C/C++ code. Learning C/C++ is essential for using PROS.\n\n## I've never used PROS or written C/C++ code before, how do I start?\n\nIf you have not used PROS or done non-VEX C/C++ code development before,\nwe recommend that you check out C tutorials on the following topics:\n\n- [Functions](http://www.studytonight.com/c/user-defined-functions-in-c.php).\n  C is a language that heavily emphasizes functions, and knowing how\n  they work is essential to using PROS. The [PROS\n  API](../api/index.html) is a set of functions, so any time that you\n  want to interact with a sensor or motor, you're using functions.\n- [Header\n  Files](https://www.tutorialspoint.com/cprogramming/c_header_files.htm).\n  The PROS template (the set of files automatically created when you\n  start a PROS project) contains a couple of header files, and it's\n  recommended that you make additional header files as you develop\n  your code. Header files contain the declarations for functions and\n  global variables (among other things), which is why the [PROS\n  API](../api/index.html) can be found in `include/pros/api.h`.\n  Knowing what code should go in a header file (`.h`, `.hpp`) or a\n  source file (`.c`, `.cpp`) can be difficult to determine at first,\n  but it is a very useful skill to learn.\n- [printf()](https://www.codingunit.com/printf-format-specifiers-format-conversions-and-formatted-output).\n  At some point when developing PROS code, you will likely want to get\n  some feedback on what the value of a variable is. This is not an\n  exact replacement for a full debugging utility by any means, but is\n  the standard method for troubleshooting issues in most languages and\n  can be used for viewing sensor values or your own variables' values.\n  The output from these `printf()` statements can be viewed in the\n  terminal by running `pros terminal`.\n- [Tasks](../tutorials/topical/multitasking.html). One common mistake\n  that new PROS users make is forgetting to include a `delay()`\n  statement in their tasks (this includes `opcontrol()` too), starving\n  the processor of resources and preventing the PROS kernel from\n  running properly. Every infinite loop, like the one in\n  `opcontrol()`, needs to have a delay statement. We recommend at\n  least 2ms.\n\nAnd then for additional C tutorial topics, visit\n[CProgramming.com](https://www.cprogramming.com/tutorial/c-tutorial.html)\nor [StudyTonight](http://www.studytonight.com/c/overview-of-c.php). A\ngood video tutorial series (as opposed to the previous text-based\ntutorials) can be found on [YouTube](https://youtu.be/nXvy5900m3M).\n\n## I know C/C++, now how do I use PROS?\n\nThe PROS tutorials are designed to show the application of C/C++\nprogramming to a PROS project. The [Programming the\nClawbot](../tutorials/walkthrough/clawbot.html) tutorial is a great\nplace to start, as it goes through every step of putting together a\nsample PROS project. Once you are ready to branch out and create your\nown custom project, looking through the following tutorials is\nrecommended:\n\n- [PROS Project\n  Structure](../tutorials/general/project-structure.html)\n- [Uploading Code](../tutorials/walkthrough/uploading.html)\n- [Debugging](../tutorials/general/debugging.html)\n- [Coding FAQs](./faq.html)\n\nAnd then you can find tutorials for specific subjects from [the\nADI](../tutorials/topical/adi.html) to [tasks and\nmultithreading](../tutorials/topical/multitasking.html) as well.\n\nVEX U team QUEEN has also created a series of YouTube videos about C++,\nobject-oriented programming, and other relevant programming topics in\nthe context of VEX robots; you can find it\n[here](https://www.youtube.com/playlist?list=PLxt0dHFRDpQhy24IL1wAniVq3xf8N7QAV).\n\n## How do I share my code with other people?\n\nIn order to track changes to your code, as well as to help share your\ncode with other people, you can use a version control system like Git in\nconjunction with a service like [GitHub](https://github.com). If you\nwant to share smaller parts of your code with other people in order to\nget help (e.g. through the software channel on Discord), you can use\nsomething like [GitHub Gists](https://gist.github.com) or\n[Pastebin](https://pastebin.com).\n\nFor more information on how to use Git, including the Git CLI tools and\nsetting up a respository on GitHub, check out the [GitHub help\npages](https://help.github.com).",
  "refid": "new-users_8md",
  "static": false,
  "strong": false,
  "title": "new-users.md",
  "url": "new-users_8md.md#file-new-users.md",
  "visibility": "public"
}