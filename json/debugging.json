{
  "abstract": false,
  "anchor": "#page-debugging",
  "category": "pages",
  "const": false,
  "definition": "",
  "details": "This content is subject to change as the PROS CLI for V5 is created.\n\n\nThe [PROS API](../../api/index.html) provides functions like [printf](http://www.cplusplus.com/reference/cstdio/printf/) that allow your robot to output information to a connected serial console during operation.\n\n\n## Viewing printf output\n\nTo view a robot's output, there are two officially supported methods:\n\n\n\n1. Through the PROS CLI:\nRunning `prosv5 terminal` on the command line will open an output stream from a robot connected over direct USB connection, VEXnet, or [JINX Graphical Debugger](jinx.md#page-jinx).\n2. From within Atom:\nClick the button labeled \"Open cortex serial output\"\n![open-cortex.png](open-cortex.png)![open-cortex.png](open-cortex.png)![open-cortex.png](open-cortex.png)![open-cortex.png](open-cortex.png)\n\nA terminal panel will open at the bottom of the screen containing the output of a connected robot.\n\n![terminal-platformio.png](terminal-platformio.png)![terminal-platformio.png](terminal-platformio.png)![terminal-platformio.png](terminal-platformio.png)![terminal-platformio.png](terminal-platformio.png)\n\n\n## Further debug info with <tt>errno</tt>\n\n`errno` is a global value that is set when any part of the PROS kernel encounters an error. The value of `errno` is specific to each function, so check the function headers or the [API docs](../../api/index.html) for possible values and their meaning. If you think you're encountering an error in the kernel code, check the value of `errno` to see what's causing the issue.\n\nDebugging in this manner is standard to other environments besides PROS. For further information on using `errno`, see the following tutorial: [https://www.tutorialspoint.com/cprogramming/c_error_handling.htm](https://www.tutorialspoint.com/cprogramming/c_error_handling.htm)\n\n\n## JINX Graphical Debugger\n\nJINX offers further debugging functionality over traditional debugging through print statements. For a full explanation of JINX's abilities and its use, see [JINX Graphical Debugger](jinx.md#page-jinx). ",
  "explicit": false,
  "fullname": "::debugging",
  "hasAdditionalMembers": false,
  "hasDetails": true,
  "inline": false,
  "kind": "page",
  "name": "debugging",
  "override": false,
  "parent": null,
  "refid": "debugging",
  "static": false,
  "strong": false,
  "title": "Debugging",
  "url": "debugging.md#page-debugging",
  "visibility": "public"
}