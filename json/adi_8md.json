{
  "abstract": false,
  "anchor": "#file-adi.md",
  "category": "files",
  "const": false,
  "definition": "",
  "explicit": false,
  "fullname": "adi.md",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "inline": false,
  "kind": "file",
  "location": {
    "column": 0,
    "file": "docs/tutorials/topical/adi.md",
    "line": 0
  },
  "name": "adi.md",
  "override": false,
  "parent": null,
  "programlisting": "\\page adi ADI (3 Wire Ports)\n\n\\note\nFor a full list of functions for interacting with the ADI, see its\n: [C API](@ref c-adi) and [C++ API](@ref cpp-adi).\n\n## Analog Sensors\n\nWhile computers, microcontrollers, and other devices that interface with\nVEX robots are digital systems, most of the real world operates as\nanalog components, where a range of possible values exist instead of\nsimply an arrangement of 1s and 0s. Analog sensors like potentiometers\nand line trackers are used to communicate with these analog real-world\nsystems. These sensors return a number within a preset range of values\nin accordance with their input, as opposed to a digit sensor which\nsimply returns an on or off state.\n\nTo take these analog inputs and convert them to information that the\nCortex can actually use, ADCs (Analog to Digital Converters) are used on\neach of the Analog In ports to convert the analog input signals (varying\nvoltage signals) to 12 bit integers. As a result, the range of all\nanalog sensors when used with the Cortex is 0 to 4095 (the range of a 12\nbit unsigned integer).\n\n### Initialization\n\nAs with all ADI sensors, the first step to using the sensor is to set\nthe configuration for its ADI port.\n\nAdditionally, it is often worthwhile to calibrate analog sensors before\nusing them in the `initialize()` function. The\n[analog_calibrate](../../api/c/adi.html#adi-analog-calibrate) function\ncollects approximately 500 data samples over a period of half a second\nand returns the average value received over the sampling period. This\naverage value can be used to account for variations like ambient light\nfor line trackers.\n\n### Potentiometer\n\nPotentiometers measure angular position and can be used to determine the\ndirection of rotation of its input. Potentiometers are best used in\napplications such as lifts where the sensor is not at risk of being\nrotated beyond its 250-degree physical constraint. Potentiometers\ntypically do not need to be calibrated, although it may be desired as it\nhelps account for possible shifting in the potentiometer mounting and to\nfind the actual range of the potentiometer due to its mechanical stops\nas that range may be closer to 5-4090 instead of 0-4095. If the\npotentiometer is not calibrated, the\n[analog_read](../../api/c/adi.html#adi-analog-read) function may be\nused to obtain the raw input value of the potentiometer. If the sensor\nwas calibrated, the\n[analog_read_calibrated](../../api/c/adi.html#adi-analog-read-calibrated)\nfunction should be used, as it will account for the sensor's calibration\nand return more accurate results. The input to both of these functions\nis the channel number of the sensor, and an integer is returned.\n\nThus an example of use on a lift would look like:\n\n### Line Tracker\n\nVEX Line Trackers operate by measuring the amount of light reflected to\nthe sensor and determining the existence of lines from the difference in\nlight reflected by the white tape and the dark tiles. The Line Trackers\nreturn a value between 0 and 4095, with 0 being the lightest reading and\n4095 the darkest. It is recommended that Line Trackers be calibrated to\naccount for changes in ambient light.\n\nAn example of Line Tracker use:\n\n### Accelerometer\n\nThe VEX Accelerometer measures acceleration on the x, y, and z axes\nsimultaneously. Accelerometers can be used to infer velocity and\ndisplacement, but due to the error induced by such integration it is\nrecommended that simply the acceleration data be used. By design of the\nVEX Accelerometer each axis is treated as its own analog sensors. Due to\nthis the VEX Accelerometer requires three analog input ports on the\nCortex.\n\nExample accelerometer use:\n\n## Digital Sensors\n\n### Initialization\n\nAs with all ADI sensors, the first step to using the sensor is to set\nthe configuration for its ADI port.\n\nFrom there, using a digital sensor is fairly straightforward. Digital\nSensors always return a true or false (boolean) value.\n\n### Quad Encoder\n\nQuadrature encoders can measure the rotation of the attached axle on\nyour robot. Most common uses of this sensor type are to track distance\ntraveled by attaching them to your robots drivetrain and monitoring how\nmuch the axle spins.\n\nWith these sensors 1 measured tick is 1 degree of revolution.\n\n\\note\nEncoders must be plugged into the ADI such that the top wire\nis in an odd numbered port (1, 3, 5, 7 or 'A', 'C', 'E', or 'G'),\nand then the bottom wire must be in the next highest port number.\nEncoders are initialized as such:\n\n```{.c}\n void initialize() {\n   encoder = adi_encoder_init(QUAD_TOP_PORT, QUAD_BOTTOM_PORT, false);\n }\n```\n\nAnd then used in the following manner:\n\n### Ultrasonic\n\nUltrasonic sensors are used in a manner that is very similar to\nencoders, given that they are both two-wire sensors.\n\n\\note\nUltrasonic sensors must be plugged into the ADI such that the PING wire\n(the orange OUTPUT cable) is in an odd numbered port (1, 3, 5, 7\nor 'A', 'C', 'E', or 'G'), and then the ECHO wire (the yellow\nINPUT cable) must be in the next highest port number.\nUltrasonic sensors are initialized as such:\n\n```{.c}\nvoid initialize() {\n  ultrasonic = adi_ultrasonic_init(ULTRA_PING_PORT, ULTRA_ECHO_PORT);\n}\n```\n\nAnd then used in the following manner:\n\n### Pneumatics\n\nPneumatics in VEX provide two-state linear actuation. They differ from\nother digital sensors in that they are output signals. Therefore, the\ndefault digital sensor configuration is insufficient.\n\nAnd then the pneumatics are used as such:",
  "refid": "adi_8md",
  "static": false,
  "strong": false,
  "title": "adi.md",
  "url": "adi_8md.md#file-adi.md",
  "visibility": "public"
}