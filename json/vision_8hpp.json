{
  "abstract": false,
  "anchor": "#file-vision.hpp",
  "category": "files",
  "const": false,
  "definition": "",
  "details": "Contains prototypes for the VEX Vision Sensor-related functions in C++.\n\nVisit [https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html](https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html) to learn more.\n\nThis file should not be modified by users, since it gets replaced whenever a kernel upgrade occurs.\n\nCopyright (c) 2017-2020, Purdue University ACM SIGBots. All rights reserved.\n\nThis Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at [http://mozilla.org/MPL/2.0/](http://mozilla.org/MPL/2.0/). ",
  "explicit": false,
  "fullname": "pros/vision.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": true,
  "includes": "\"pros/vision.h\"",
  "inline": false,
  "kind": "file",
  "location": {
    "column": 0,
    "file": "pros/vision.hpp",
    "line": 0
  },
  "name": "pros/vision.hpp",
  "namespaces": [
    {
      "anchor": "",
      "brief": "Get the current status of the competition control. ",
      "category": "namespaces",
      "fullname": "pros",
      "kind": "namespace",
      "name": "pros",
      "refid": "namespacepros",
      "summary": "Get the current status of the competition control. ",
      "title": "pros",
      "url": "namespacepros.md",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-pros",
    "category": "dirs",
    "fullname": "pros",
    "kind": "dir",
    "name": "pros",
    "refid": "dir_214b722ca0199f3055230149c608b806",
    "title": "pros",
    "url": "dir_214b722ca0199f3055230149c608b806.md#dir-pros",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-pros",
      "category": "dirs",
      "fullname": "pros",
      "kind": "dir",
      "name": "pros",
      "refid": "dir_214b722ca0199f3055230149c608b806",
      "title": "pros",
      "url": "dir_214b722ca0199f3055230149c608b806.md#dir-pros",
      "visibility": "public"
    }
  ],
  "programlisting": "/**\n * \\file pros/vision.hpp\n *\n * Contains prototypes for the VEX Vision Sensor-related functions in C++.\n *\n * Visit https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html to learn\n * more.\n *\n * This file should not be modified by users, since it gets replaced whenever\n * a kernel upgrade occurs.\n *\n * Copyright (c) 2017-2020, Purdue University ACM SIGBots.\n * All rights reserved.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\n#ifndef _PROS_VISION_HPP_\n#define _PROS_VISION_HPP_\n\n#include \"pros/vision.h\"\n\n#include <cstdint>\n\nnamespace pros {\nclass Vision {\n    public:\n    /**\n     * Create a Vision Sensor object on the given port.\n     *\n     * This function uses the following values of errno when an error state is\n     * reached:\n     * ENXIO - The given value is not within the range of V5 ports (1-21).\n     * ENODEV - The port cannot be configured as a vision sensor\n     *\n     * \\param port\n     *        The V5 port number from 1-21\n     * \\param zero_point\n     *        One of vision_zero_e_t to set the (0,0) coordinate for the FOV\n     */\n    Vision(std::uint8_t port, vision_zero_e_t zero_point = E_VISION_ZERO_TOPLEFT);\n\n    /**\n     * Clears the vision sensor LED color, reseting it back to its default\n     * behavior, displaying the most prominent object signature color.\n     *\n     * This function uses the following values of errno when an error state is\n     * reached:\n     * ENODEV - The port cannot be configured as a vision sensor\n     *\n     * \\return 1 if the operation was successful or PROS_ERR if the operation\n     * failed, setting errno.\n     */\n    std::int32_t clear_led(void) const;\n\n    /**\n     * Creates a signature from the vision sensor utility\n     *\n     * \\param id\n     *        The signature ID\n     * \\param u_min\n     *        Minimum value on U axis\n     * \\param u_max\n     *        Maximum value on U axis\n     * \\param u_mean\n     *        Mean value on U axis\n     * \\param v_min\n     *        Minimum value on V axis\n     * \\param v_max\n     *        Maximum value on V axis\n     * \\param v_mean\n     *        Mean value on V axis\n     * \\param rgb\n     *        Scale factor\n     * \\param type\n     *        Signature type\n     *\n     * \\return A vision_signature_s_t that can be set using Vision::set_signature\n     */\n    static vision_signature_s_t signature_from_utility(const std::int32_t id, const std::int32_t u_min,\n                                                       const std::int32_t u_max, const std::int32_t u_mean,\n                                                       const std::int32_t v_min, const std::int32_t v_max,\n                                                       const std::int32_t v_mean, const float range,\n                                                       const std::int32_t type);\n\n    /**\n     * Creates a color code that represents a combination of the given signature\n     * IDs.\n     *\n     * This function uses the following values of errno when an error state is\n     * reached:\n     * EINVAL - Fewer than two signatures have been provided or one of the\n     *          signatures is out of its [1-7] range (or 0 when omitted).\n     *\n     * \\param sig_id1\n     *        The first signature id [1-7] to add to the color code\n     * \\param sig_id2\n     *        The second signature id [1-7] to add to the color code\n     * \\param sig_id3\n     *        The third signature id [1-7] to add to the color code\n     * \\param sig_id4\n     *        The fourth signature id [1-7] to add to the color code\n     * \\param sig_id5\n     *        The fifth signature id [1-7] to add to the color code\n     *\n     * \\return A vision_color_code_t object containing the color code information.\n     */\n    vision_color_code_t create_color_code(const std::uint32_t sig_id1, const std::uint32_t sig_id2,\n                                          const std::uint32_t sig_id3 = 0, const std::uint32_t sig_id4 = 0,\n                                          const std::uint32_t sig_id5 = 0) const;\n\n    /**\n     * Gets the nth largest object according to size_id.\n     *\n     * This function uses the following values of errno when an error state is\n     * reached:\n     * ENODEV - The port cannot be configured as a vision sensor\n     * EDOM - size_id is greater than the number of available objects.\n     * EAGAIN - Reading the vision sensor failed for an unknown reason.\n     *\n     * \\param size_id\n     *        The object to read from a list roughly ordered by object size\n     *        (0 is the largest item, 1 is the second largest, etc.)\n     *\n     * \\return The vision_object_s_t object corresponding to the given size id, or\n     * PROS_ERR if an error occurred.\n     */\n    vision_object_s_t get_by_size(const std::uint32_t size_id) const;\n\n    /**\n     * Gets the nth largest object of the given signature according to size_id.\n     *\n     * This function uses the following values of errno when an error state is\n     * reached:\n     * ENODEV - The port cannot be configured as a vision sensor\n     * EDOM - size_id is greater than the number of available objects.\n     * EINVAL - sig_id is outside the range [1-8]\n     * EAGAIN - Reading the vision sensor failed for an unknown reason.\n     *\n     * \\param size_id\n     *        The object to read from a list roughly ordered by object size\n     *        (0 is the largest item, 1 is the second largest, etc.)\n     * \\param signature\n     *        The vision_signature_s_t signature for which an object will be\n     *        returned.\n     *\n     * \\return The vision_object_s_t object corresponding to the given signature\n     * and size_id, or PROS_ERR if an error occurred.\n     */\n    vision_object_s_t get_by_sig(const std::uint32_t size_id, const std::uint32_t sig_id) const;\n\n    /**\n     * Gets the nth largest object of the given color code according to size_id.\n     *\n     * This function uses the following values of errno when an error state is\n     * reached:\n     * ENODEV - The port cannot be configured as a vision sensor\n     * EAGAIN - Reading the Vision Sensor failed for an unknown reason.\n     *\n     * \\param size_id\n     *        The object to read from a list roughly ordered by object size\n     *        (0 is the largest item, 1 is the second largest, etc.)\n     * \\param color_code\n     *        The vision_color_code_t for which an object will be returned\n     *\n     * \\return The vision_object_s_t object corresponding to the given color code\n     * and size_id, or PROS_ERR if an error occurred.\n     */\n    vision_object_s_t get_by_code(const std::uint32_t size_id, const vision_color_code_t color_code) const;\n\n    /**\n     * Gets the exposure parameter of the Vision Sensor. See\n     * https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html#exposure-setting\n     * for more detials.\n     *\n     * This function uses the following values of errno when an error state is\n     * reached:\n     * ENODEV - The port cannot be configured as a vision sensor\n     *\n     * \\return The current exposure parameter from [0,150],\n     * PROS_ERR if an error occurred\n     */\n    std::int32_t get_exposure(void) const;\n\n    /**\n     * Gets the number of objects currently detected by the Vision Sensor.\n     *\n     * This function uses the following values of errno when an error state is\n     * reached:\n     * ENODEV - The port cannot be configured as a vision sensor\n     *\n     * \\return The number of objects detected on the specified vision sensor.\n     * Returns PROS_ERR if the port was invalid or an error occurred.\n     */\n    std::int32_t get_object_count(void) const;\n\n    /**\n     * Gets the object detection signature with the given id number.\n     *\n     * This function uses the following values of errno when an error state is\n     * reached:\n     * ENODEV - The port cannot be configured as a vision sensor\n     *\n     * \\param signature_id\n     *        The signature id to read\n     *\n     * \\return A vision_signature_s_t containing information about the signature.\n     */\n    vision_signature_s_t get_signature(const std::uint8_t signature_id) const;\n\n    /**\n     * Get the white balance parameter of the Vision Sensor.\n     *\n     * This function uses the following values of errno when an error state is\n     * reached:\n     * ENODEV - The port cannot be configured as a vision sensor\n     *\n     * \\return The current RGB white balance setting of the sensor\n     */\n    std::int32_t get_white_balance(void) const;\n\n    /**\n     * Gets the port number of the Vision Sensor.\n     *\n     * \\return The vision sensor's port number.\n     */\n    std::uint8_t get_port(void) const;\n\n    /**\n     * Reads up to object_count object descriptors into object_arr.\n     *\n     * This function uses the following values of errno when an error state is\n     * reached:\n     * ENODEV - The port cannot be configured as a vision sensor\n     * EDOM - size_id is greater than the number of available objects.\n     * EAGAIN - Reading the vision sensor failed for an unknown reason.\n     *\n     * \\param size_id\n     *        The object to read from a list roughly ordered by object size\n     *        (0 is the largest item, 1 is the second largest, etc.)\n     * \\param object_count\n     *        The number of objects to read\n     * \\param[out] object_arr\n     *             A pointer to copy the objects into\n     *\n     * \\return The number of object signatures copied. This number will be less than\n     * object_count if there are fewer objects detected by the vision sensor.\n     * Returns PROS_ERR if the port was invalid, an error occurred, or fewer objects\n     * than size_id were found. All objects in object_arr that were not found are\n     * given VISION_OBJECT_ERR_SIG as their signature.\n     */\n    std::int32_t read_by_size(const std::uint32_t size_id, const std::uint32_t object_count,\n                              vision_object_s_t* const object_arr) const;\n\n    /**\n     * Reads up to object_count object descriptors into object_arr.\n     *\n     * This function uses the following values of errno when an error state is\n     * reached:\n     * ENODEV - The port cannot be configured as a vision sensor\n     * EDOM - size_id is greater than the number of available objects.\n     * EINVAL - sig_id is outside the range [1-8]\n     * EAGAIN - Reading the vision sensor failed for an unknown reason.\n     *\n     * \\param object_count\n     *        The number of objects to read\n     * \\param size_id\n     *        The object to read from a list roughly ordered by object size\n     *        (0 is the largest item, 1 is the second largest, etc.)\n     * \\param signature\n     *        The vision_signature_s_t signature for which an object will be\n     *        returned.\n     * \\param[out] object_arr\n     *             A pointer to copy the objects into\n     *\n     * \\return The number of object signatures copied. This number will be less than\n     * object_count if there are fewer objects detected by the vision sensor.\n     * Returns PROS_ERR if the port was invalid, an error occurred, or fewer objects\n     * than size_id were found. All objects in object_arr that were not found are\n     * given VISION_OBJECT_ERR_SIG as their signature.\n     */\n    std::int32_t read_by_sig(const std::uint32_t size_id, const std::uint32_t sig_id, const std::uint32_t object_count,\n                             vision_object_s_t* const object_arr) const;\n\n    /**\n     * Reads up to object_count object descriptors into object_arr.\n     *\n     * This function uses the following values of errno when an error state is\n     * reached:\n     * EDOM - size_id is greater than the number of available objects.\n     * ENODEV - The port cannot be configured as a vision sensor\n     * EAGAIN - Reading the vision sensor failed for an unknown reason.\n     *\n     * \\param object_count\n     *        The number of objects to read\n     * \\param size_id\n     *        The object to read from a list roughly ordered by object size\n     *        (0 is the largest item, 1 is the second largest, etc.)\n     * \\param color_code\n     *        The vision_color_code_t for which objects will be returned\n     * \\param[out] object_arr\n     *             A pointer to copy the objects into\n     *\n     * \\return The number of object signatures copied. This number will be less than\n     * object_count if there are fewer objects detected by the vision sensor.\n     * Returns PROS_ERR if the port was invalid, an error occurred, or fewer objects\n     * than size_id were found. All objects in object_arr that were not found are\n     * given VISION_OBJECT_ERR_SIG as their signature.\n     */\n    int32_t read_by_code(const std::uint32_t size_id, const vision_color_code_t color_code,\n                         const std::uint32_t object_count, vision_object_s_t* const object_arr) const;\n\n    /**\n     * Prints the contents of the signature as an initializer list to the terminal.\n     *\n     * \\param sig\n     *        The signature for which the contents will be printed\n     *\n     * \\return 1 if no errors occured, PROS_ERR otherwise\n     */\n    static std::int32_t print_signature(const vision_signature_s_t sig);\n\n    /**\n     * Enables/disables auto white-balancing on the Vision Sensor.\n     *\n     * This function uses the following values of errno when an error state is\n     * reached:\n     * ENODEV - The port cannot be configured as a vision sensor\n     *\n     * \\param enabled\n     *          Pass 0 to disable, 1 to enable\n     *\n     * \\return 1 if the operation was successful or PROS_ERR if the operation\n     * failed, setting errno.\n     */\n    std::int32_t set_auto_white_balance(const std::uint8_t enable) const;\n\n    /**\n     * Sets the exposure parameter of the Vision Sensor. See\n     * https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html#exposure-setting\n     * for more detials.\n     *\n     * This function uses the following values of errno when an error state is\n     * reached:\n     * ENODEV - The port cannot be configured as a vision sensor\n     *\n     * \\param percent\n     *        The new exposure setting from [0,150].\n     *\n     * \\return 1 if the operation was successful or PROS_ERR if the operation\n     * failed, setting errno.\n     */\n    std::int32_t set_exposure(const std::uint8_t exposure) const;\n\n    /**\n     * Sets the vision sensor LED color, overriding the automatic behavior.\n     *\n     * This function uses the following values of errno when an error state is\n     * reached:\n     * ENODEV - The port cannot be configured as a vision sensor\n     *\n     * \\param rgb\n     *        An RGB code to set the LED to\n     *\n     * \\return 1 if the operation was successful or PROS_ERR if the operation\n     * failed, setting errno.\n     */\n    std::int32_t set_led(const std::int32_t rgb) const;\n\n    /**\n     * Stores the supplied object detection signature onto the vision sensor.\n     *\n     * NOTE: This saves the signature in volatile memory, and the signature will be\n     * lost as soon as the sensor is powered down.\n     *\n     * This function uses the following values of errno when an error state is\n     * reached:\n     * ENODEV - The port cannot be configured as a vision sensor\n     * EINVAL - sig_id is outside the range [1-8]\n     *\n     * \\param signature_id\n     *        The signature id to store into\n     * \\param[in] signature_ptr\n     *            A pointer to the signature to save\n     *\n     * \\return 1 if no errors occured, PROS_ERR otherwise\n     */\n    std::int32_t set_signature(const std::uint8_t signature_id, vision_signature_s_t* const signature_ptr) const;\n\n    /**\n     * Sets the white balance parameter of the Vision Sensor.\n     *\n     * This function uses the following values of errno when an error state is\n     * reached:\n     * ENODEV - The port cannot be configured as a vision sensor\n     *\n     * \\param rgb\n     *        The new RGB white balance setting of the sensor\n     *\n     * \\return 1 if the operation was successful or PROS_ERR if the operation\n     * failed, setting errno.\n     */\n    std::int32_t set_white_balance(const std::int32_t rgb) const;\n\n    /**\n     * Sets the (0,0) coordinate for the Field of View.\n     *\n     * This will affect the coordinates returned for each request for a\n     * vision_object_s_t from the sensor, so it is recommended that this function\n     * only be used to configure the sensor at the beginning of its use.\n     *\n     * This function uses the following values of errno when an error state is\n     * reached:\n     * ENODEV - The port cannot be configured as a vision sensor\n     *\n     * \\param zero_point\n     *        One of vision_zero_e_t to set the (0,0) coordinate for the FOV\n     *\n     * \\return 1 if the operation was successful or PROS_ERR if the operation\n     * failed, setting errno.\n     */\n    std::int32_t set_zero_point(vision_zero_e_t zero_point) const;\n\n    /**\n     * Sets the Wi-Fi mode of the Vision sensor\n     *\n     * This functions uses the following values of errno when an error state is\n     * reached:\n     * ENODEV - The port cannot be configured as a vision sensor\n     *\n     * \\param enable\n     *        Disable Wi-Fi on the Vision sensor if 0, enable otherwise (e.g. 1)\n     *\n     * \\return 1 if the operation was successful or PROS_ERR if the operation\n     * failed, setting errno.\n     */\n    std::int32_t set_wifi_mode(const std::uint8_t enable) const;\n\n    private:\n    std::uint8_t _port;\n};\n}  // namespace pros\n#endif  // _PROS_VISION_HPP_",
  "publicClasses": [
    {
      "anchor": "",
      "category": "classes",
      "fullname": "pros::Vision",
      "kind": "class",
      "name": "pros::Vision",
      "refid": "classpros_1_1Vision",
      "title": "pros::Vision",
      "url": "classpros_1_1Vision.md",
      "visibility": "public"
    }
  ],
  "refid": "vision_8hpp",
  "static": false,
  "strong": false,
  "title": "pros/vision.hpp",
  "url": "vision_8hpp.md#file-vision.hpp",
  "visibility": "public"
}