{
  "abstract": false,
  "anchor": "#file-adi.h",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-pros_err",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "PROS_ERR",
      "hasDetails": false,
      "initializer": "(INT32_MAX)",
      "inline": false,
      "kind": "define",
      "location": {
        "bodyFile": "pros/adi.h",
        "bodyStart": 24,
        "column": 9,
        "file": "pros/adi.h",
        "line": 24
      },
      "name": "PROS_ERR",
      "override": false,
      "refid": "adi_8h_1a8748a4dfbe487cedaafa15f1ff7f2f38",
      "static": false,
      "strong": false,
      "title": "PROS_ERR",
      "url": "adi_8h.md#define-pros_err",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-_deprecate_digital_in",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "_DEPRECATE_DIGITAL_IN",
      "hasDetails": false,
      "initializer": "__attribute__((deprecated(\"use E_ADI_DIGITAL_IN instead\"))) = E_ADI_DIGITAL_IN",
      "inline": false,
      "kind": "define",
      "location": {
        "bodyFile": "pros/adi.h",
        "bodyStart": 45,
        "column": 10,
        "file": "pros/adi.h",
        "line": 45
      },
      "name": "_DEPRECATE_DIGITAL_IN",
      "override": false,
      "refid": "adi_8h_1a1023dc11cdeebb29c37d64d0f281338d",
      "static": false,
      "strong": false,
      "title": "_DEPRECATE_DIGITAL_IN",
      "url": "adi_8h.md#define-_deprecate_digital_in",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-_deprecate_analog_in",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "_DEPRECATE_ANALOG_IN",
      "hasDetails": false,
      "initializer": "__attribute__((deprecated(\"use E_ADI_ANALOG_IN instead\"))) = E_ADI_ANALOG_IN",
      "inline": false,
      "kind": "define",
      "location": {
        "bodyFile": "pros/adi.h",
        "bodyStart": 46,
        "column": 9,
        "file": "pros/adi.h",
        "line": 46
      },
      "name": "_DEPRECATE_ANALOG_IN",
      "override": false,
      "refid": "adi_8h_1a20da5cc0e79c56817a2eca6a4ca16304",
      "static": false,
      "strong": false,
      "title": "_DEPRECATE_ANALOG_IN",
      "url": "adi_8h.md#define-_deprecate_analog_in",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-internal_adi_port",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "INTERNAL_ADI_PORT",
      "hasDetails": false,
      "initializer": "22",
      "inline": false,
      "kind": "define",
      "location": {
        "bodyFile": "pros/adi.h",
        "bodyStart": 114,
        "column": 9,
        "file": "pros/adi.h",
        "line": 114
      },
      "name": "INTERNAL_ADI_PORT",
      "override": false,
      "refid": "adi_8h_1a3a29e9ee344d77d18a94161e3491d9b1",
      "static": false,
      "strong": false,
      "title": "INTERNAL_ADI_PORT",
      "url": "adi_8h.md#define-internal_adi_port",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-num_adi_ports",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "NUM_ADI_PORTS",
      "hasDetails": false,
      "initializer": "8",
      "inline": false,
      "kind": "define",
      "location": {
        "bodyFile": "pros/adi.h",
        "bodyStart": 115,
        "column": 9,
        "file": "pros/adi.h",
        "line": 115
      },
      "name": "NUM_ADI_PORTS",
      "override": false,
      "refid": "adi_8h_1a281d641da695b40c26348155b93f910b",
      "static": false,
      "strong": false,
      "title": "NUM_ADI_PORTS",
      "url": "adi_8h.md#define-num_adi_ports",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-high",
      "brief": "PROS 2 Compatibility Functions ",
      "category": "defines",
      "const": false,
      "definition": "",
      "details": "These functions provide similar functionality to the PROS 2 API \n\n Used for [adi_digital_write()](namespacepros_1_1c.md#function-adi_digital_write) to specify a logic HIGH state to output.\n\nIn reality, using any non-zero expression or \"true\" will work to set a pin to HIGH. ",
      "explicit": false,
      "fullname": "HIGH",
      "hasDetails": true,
      "initializer": "1",
      "inline": false,
      "kind": "define",
      "location": {
        "bodyFile": "pros/adi.h",
        "bodyStart": 207,
        "column": 9,
        "file": "pros/adi.h",
        "line": 207
      },
      "name": "HIGH",
      "override": false,
      "refid": "adi_8h_1a5bb885982ff66a2e0a0a45a8ee9c35e2",
      "static": false,
      "strong": false,
      "summary": "PROS 2 Compatibility Functions ",
      "title": "HIGH",
      "url": "adi_8h.md#define-high",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-low",
      "brief": "Used for [adi_digital_write()](namespacepros_1_1c.md#function-adi_digital_write) to specify a logic LOW state to output. ",
      "category": "defines",
      "const": false,
      "definition": "",
      "details": "In reality, using a zero expression or \"false\" will work to set a pin to LOW. ",
      "explicit": false,
      "fullname": "LOW",
      "hasDetails": true,
      "initializer": "0",
      "inline": false,
      "kind": "define",
      "location": {
        "bodyFile": "pros/adi.h",
        "bodyStart": 213,
        "column": 9,
        "file": "pros/adi.h",
        "line": 213
      },
      "name": "LOW",
      "override": false,
      "refid": "adi_8h_1ab811d8c6ff3a505312d3276590444289",
      "static": false,
      "strong": false,
      "summary": "Used for adi_digital_write() to specify a logic LOW state to output. ",
      "title": "LOW",
      "url": "adi_8h.md#define-low",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-input",
      "brief": "[adi_pin_mode()](namespacepros_1_1c.md#function-adi_pin_mode) state for a digital input. ",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "INPUT",
      "hasDetails": false,
      "initializer": "0x00",
      "inline": false,
      "kind": "define",
      "location": {
        "bodyFile": "pros/adi.h",
        "bodyStart": 218,
        "column": 9,
        "file": "pros/adi.h",
        "line": 218
      },
      "name": "INPUT",
      "override": false,
      "refid": "adi_8h_1a1bb283bd7893b9855e2f23013891fc82",
      "static": false,
      "strong": false,
      "summary": "adi_pin_mode() state for a digital input. ",
      "title": "INPUT",
      "url": "adi_8h.md#define-input",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-output",
      "brief": "[adi_pin_mode()](namespacepros_1_1c.md#function-adi_pin_mode) state for a digital output. ",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "OUTPUT",
      "hasDetails": false,
      "initializer": "0x01",
      "inline": false,
      "kind": "define",
      "location": {
        "bodyFile": "pros/adi.h",
        "bodyStart": 222,
        "column": 9,
        "file": "pros/adi.h",
        "line": 222
      },
      "name": "OUTPUT",
      "override": false,
      "refid": "adi_8h_1a61a3c9a18380aafb6e430e79bf596557",
      "static": false,
      "strong": false,
      "summary": "adi_pin_mode() state for a digital output. ",
      "title": "OUTPUT",
      "url": "adi_8h.md#define-output",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-input_analog",
      "brief": "[adi_pin_mode()](namespacepros_1_1c.md#function-adi_pin_mode) state for an analog input. ",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "INPUT_ANALOG",
      "hasDetails": false,
      "initializer": "0x02",
      "inline": false,
      "kind": "define",
      "location": {
        "bodyFile": "pros/adi.h",
        "bodyStart": 226,
        "column": 9,
        "file": "pros/adi.h",
        "line": 226
      },
      "name": "INPUT_ANALOG",
      "override": false,
      "refid": "adi_8h_1a877f7490feac007f3a904ece06afe87a",
      "static": false,
      "strong": false,
      "summary": "adi_pin_mode() state for an analog input. ",
      "title": "INPUT_ANALOG",
      "url": "adi_8h.md#define-input_analog",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-output_analog",
      "brief": "[adi_pin_mode()](namespacepros_1_1c.md#function-adi_pin_mode) state for an analog output. ",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "OUTPUT_ANALOG",
      "hasDetails": false,
      "initializer": "0x03",
      "inline": false,
      "kind": "define",
      "location": {
        "bodyFile": "pros/adi.h",
        "bodyStart": 231,
        "column": 9,
        "file": "pros/adi.h",
        "line": 231
      },
      "name": "OUTPUT_ANALOG",
      "override": false,
      "refid": "adi_8h_1af4be32f492e2bcaa4691e665df0592e7",
      "static": false,
      "strong": false,
      "summary": "adi_pin_mode() state for an analog output. ",
      "title": "OUTPUT_ANALOG",
      "url": "adi_8h.md#define-output_analog",
      "visibility": "public"
    }
  ],
  "definition": "",
  "details": "Contains prototypes for interfacing with the ADI.\n\nVisit [https://pros.cs.purdue.edu/v5/tutorials/topical/adi.html](https://pros.cs.purdue.edu/v5/tutorials/topical/adi.html) to learn more.\n\nThis file should not be modified by users, since it gets replaced whenever a kernel upgrade occurs.\n\nCopyright (c) 2017-2020, Purdue University ACM SIGBots.\n\nThis Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at [http://mozilla.org/MPL/2.0/](http://mozilla.org/MPL/2.0/). ",
  "explicit": false,
  "fullname": "pros/adi.h",
  "hasAdditionalMembers": false,
  "hasDetails": true,
  "includes": "<stdbool.h>",
  "inline": false,
  "kind": "file",
  "location": {
    "column": 0,
    "file": "pros/adi.h",
    "line": 0
  },
  "name": "pros/adi.h",
  "namespaces": [
    {
      "anchor": "",
      "brief": "Get the current status of the competition control. ",
      "category": "namespaces",
      "fullname": "pros",
      "kind": "namespace",
      "name": "pros",
      "refid": "namespacepros",
      "summary": "Get the current status of the competition control. ",
      "title": "pros",
      "url": "namespacepros.md",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "pros::c",
      "kind": "namespace",
      "name": "pros::c",
      "refid": "namespacepros_1_1c",
      "title": "pros::c",
      "url": "namespacepros_1_1c.md",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-pros",
    "category": "dirs",
    "fullname": "pros",
    "kind": "dir",
    "name": "pros",
    "refid": "dir_214b722ca0199f3055230149c608b806",
    "title": "pros",
    "url": "dir_214b722ca0199f3055230149c608b806.md#dir-pros",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-pros",
      "category": "dirs",
      "fullname": "pros",
      "kind": "dir",
      "name": "pros",
      "refid": "dir_214b722ca0199f3055230149c608b806",
      "title": "pros",
      "url": "dir_214b722ca0199f3055230149c608b806.md#dir-pros",
      "visibility": "public"
    }
  ],
  "programlisting": "/**\n * \\file pros/adi.h\n *\n * Contains prototypes for interfacing with the ADI.\n *\n * Visit https://pros.cs.purdue.edu/v5/tutorials/topical/adi.html to learn more.\n *\n * This file should not be modified by users, since it gets replaced whenever\n * a kernel upgrade occurs.\n *\n * Copyright (c) 2017-2020, Purdue University ACM SIGBots.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\n#ifndef _PROS_ADI_H_\n#define _PROS_ADI_H_\n\n#include <stdbool.h>\n#include <stdint.h>\n#ifndef PROS_ERR\n#define PROS_ERR (INT32_MAX)\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\nnamespace pros {\n#endif\n\n/**\n * Represents the port type for an ADI port.\n */\ntypedef enum adi_port_config_e {\n    E_ADI_ANALOG_IN = 0,\n    E_ADI_ANALOG_OUT = 1,\n    E_ADI_DIGITAL_IN = 2,\n    E_ADI_DIGITAL_OUT = 3,\n\n#ifdef _INTELLISENSE\n#define _DEPRECATE_DIGITAL_IN = E_ADI_DIGITAL_IN\n#define _DEPRECATE_ANALOG_IN = E_ADI_ANALOG_IN\n#else\n#define _DEPRECATE_DIGITAL_IN __attribute__((deprecated(\"use E_ADI_DIGITAL_IN instead\"))) = E_ADI_DIGITAL_IN\n#define _DEPRECATE_ANALOG_IN __attribute__((deprecated(\"use E_ADI_ANALOG_IN instead\"))) = E_ADI_ANALOG_IN\n#endif\n\n    E_ADI_SMART_BUTTON _DEPRECATE_DIGITAL_IN,\n    E_ADI_SMART_POT _DEPRECATE_ANALOG_IN,\n\n    E_ADI_LEGACY_BUTTON _DEPRECATE_DIGITAL_IN,\n    E_ADI_LEGACY_POT _DEPRECATE_ANALOG_IN,\n    E_ADI_LEGACY_LINE_SENSOR _DEPRECATE_ANALOG_IN,\n    E_ADI_LEGACY_LIGHT_SENSOR _DEPRECATE_ANALOG_IN,\n    E_ADI_LEGACY_GYRO = 10,\n    E_ADI_LEGACY_ACCELEROMETER _DEPRECATE_ANALOG_IN,\n\n#undef _DEPRECATE_DIGITAL_IN\n#undef _DEPRECATE_ANALOG_IN\n\n    E_ADI_LEGACY_SERVO = 12,\n    E_ADI_LEGACY_PWM = 13,\n\n    E_ADI_LEGACY_ENCODER = 14,\n    E_ADI_LEGACY_ULTRASONIC = 15,\n\n    E_ADI_TYPE_UNDEFINED = 255,\n    E_ADI_ERR = PROS_ERR\n} adi_port_config_e_t;\n\n#ifdef PROS_USE_SIMPLE_NAMES\n#ifdef __cplusplus\n#define ADI_ANALOG_IN pros::E_ADI_ANALOG_IN\n#define ADI_ANALOG_OUT pros::E_ADI_ANALOG_OUT\n#define ADI_DIGITAL_IN pros::E_ADI_DIGITAL_IN\n#define ADI_DIGITAL_OUT pros::E_ADI_DIGITAL_OUT\n#define ADI_SMART_BUTTON pros::E_ADI_SMART_BUTTON\n#define ADI_SMART_POT pros::E_ADI_SMART_POT\n#define ADI_LEGACY_BUTTON pros::E_ADI_LEGACY_BUTTON\n#define ADI_LEGACY_POT pros::E_ADI_LEGACY_POT\n#define ADI_LEGACY_LINE_SENSOR pros::E_ADI_LEGACY_LINE_SENSOR\n#define ADI_LEGACY_LIGHT_SENSOR pros::E_ADI_LEGACY_LIGHT_SENSOR\n#define ADI_LEGACY_GYRO pros::E_ADI_LEGACY_GYRO\n#define ADI_LEGACY_ACCELEROMETER pros::E_ADI_LEGACY_ACCELEROMETER\n#define ADI_LEGACY_SERVO pros::E_ADI_LEGACY_SERVO\n#define ADI_LEGACY_PWM pros::E_ADI_LEGACY_PWM\n#define ADI_LEGACY_ENCODER pros::E_ADI_LEGACY_ENCODER\n#define ADI_LEGACY_ULTRASONIC pros::E_ADI_LEGACY_ULTRASONIC\n#define ADI_TYPE_UNDEFINED pros::E_ADI_TYPE_UNDEFINED\n#define ADI_ERR pros::E_ADI_ERR\n#else\n#define ADI_ANALOG_IN E_ADI_ANALOG_IN\n#define ADI_ANALOG_OUT E_ADI_ANALOG_OUT\n#define ADI_DIGITAL_IN E_ADI_DIGITAL_IN\n#define ADI_DIGITAL_OUT E_ADI_DIGITAL_OUT\n#define ADI_SMART_BUTTON E_ADI_SMART_BUTTON\n#define ADI_SMART_POT E_ADI_SMART_POT\n#define ADI_LEGACY_BUTTON E_ADI_LEGACY_BUTTON\n#define ADI_LEGACY_POT E_ADI_LEGACY_POT\n#define ADI_LEGACY_LINE_SENSOR E_ADI_LEGACY_LINE_SENSOR\n#define ADI_LEGACY_LIGHT_SENSOR E_ADI_LEGACY_LIGHT_SENSOR\n#define ADI_LEGACY_GYRO E_ADI_LEGACY_GYRO\n#define ADI_LEGACY_ACCELEROMETER E_ADI_LEGACY_ACCELEROMETER\n#define ADI_LEGACY_SERVO E_ADI_LEGACY_SERVO\n#define ADI_LEGACY_PWM E_ADI_LEGACY_PWM\n#define ADI_LEGACY_ENCODER E_ADI_LEGACY_ENCODER\n#define ADI_LEGACY_ULTRASONIC E_ADI_LEGACY_ULTRASONIC\n#define ADI_TYPE_UNDEFINED E_ADI_TYPE_UNDEFINED\n#define ADI_ERR E_ADI_ERR\n#endif\n#endif\n\n#define INTERNAL_ADI_PORT 22\n#define NUM_ADI_PORTS 8\n\n#ifdef __cplusplus\nnamespace c {\n#endif\n\n/******************************************************************************/\n/**                         General ADI Use Functions                        **/\n/**                                                                          **/\n/**       These functions allow for interaction with any ADI port type       **/\n/******************************************************************************/\n\n/**\n * Gets the configuration for the given ADI port.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - The given value is not within the range of ADI Ports.\n *\n * \\param port\n *        The ADI port number (from 1-8, 'a'-'h', 'A'-'H') for which to return\n *        the configuration\n *\n * \\return The ADI configuration for the given port\n */\nadi_port_config_e_t adi_port_get_config(uint8_t port);\n\n/**\n * Gets the value for the given ADI port.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - The given value is not within the range of ADI Ports.\n *\n * \\param port\n *        The ADI port number (from 1-8, 'a'-'h', 'A'-'H') for which the value\n *        will be returned\n *\n * \\return The value stored for the given port\n */\nint32_t adi_port_get_value(uint8_t port);\n\n/**\n * Configures an ADI port to act as a given sensor type.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - The given value is not within the range of ADI Ports.\n *\n * \\param port\n *        The ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure\n * \\param type\n *        The configuration type for the port\n *\n * \\return 1 if the operation was successful or PROS_ERR if the operation\n * failed, setting errno.\n */\nint32_t adi_port_set_config(uint8_t port, adi_port_config_e_t type);\n\n/**\n * Sets the value for the given ADI port.\n *\n * This only works on ports configured as outputs, and the behavior will change\n * depending on the configuration of the port.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO  - The given value is not within the range of ADI Ports.\n *\n * \\param port\n *        The ADI port number (from 1-8, 'a'-'h', 'A'-'H') for which the value\n *        will be set\n * \\param value\n *        The value to set the ADI port to\n *\n * \\return 1 if the operation was successful or PROS_ERR if the operation\n * failed, setting errno.\n */\nint32_t adi_port_set_value(uint8_t port, int32_t value);\n\n/******************************************************************************/\n/**                      PROS 2 Compatibility Functions                      **/\n/**                                                                          **/\n/**     These functions provide similar functionality to the PROS 2 API      **/\n/******************************************************************************/\n\n/**\n * Used for adi_digital_write() to specify a logic HIGH state to output.\n *\n * In reality, using any non-zero expression or \"true\" will work to set a pin to\n * HIGH.\n */\n#define HIGH 1\n/**\n * Used for adi_digital_write() to specify a logic LOW state to output.\n *\n * In reality, using a zero expression or \"false\" will work to set a pin to LOW.\n */\n#define LOW 0\n\n/**\n * adi_pin_mode() state for a digital input.\n */\n#define INPUT 0x00\n/**\n * adi_pin_mode() state for a digital output.\n */\n#define OUTPUT 0x01\n/**\n * adi_pin_mode() state for an analog input.\n */\n#define INPUT_ANALOG 0x02\n\n/**\n * adi_pin_mode() state for an analog output.\n */\n#define OUTPUT_ANALOG 0x03\n\n/**\n * Calibrates the analog sensor on the specified port and returns the new\n * calibration value.\n *\n * This method assumes that the true sensor value is not actively changing at\n * this time and computes an average from approximately 500 samples, 1 ms apart,\n * for a 0.5 s period of calibration. The average value thus calculated is\n * returned and stored for later calls to the adi_analog_read_calibrated() and\n * adi_analog_read_calibrated_HR() functions. These functions will return\n * the difference between this value and the current sensor value when called.\n *\n * Do not use this function when the sensor value might be unstable\n * (gyro rotation, accelerometer movement).\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - The given value is not within the range of ADI Ports\n *\n * \\param port\n *        The ADI port to calibrate (from 1-8, 'a'-'h', 'A'-'H')\n *\n * \\return The average sensor value computed by this function\n */\nint32_t adi_analog_calibrate(uint8_t port);\n\n/**\n * Gets the 12-bit value of the specified port.\n *\n * The value returned is undefined if the analog pin has been switched to a\n * different mode.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - The given value is not within the range of ADI Ports\n * EADDRINUSE - The port is not configured as an analog input\n *\n * \\param port\n *        The ADI port (from 1-8, 'a'-'h', 'A'-'H') for which the value will be\n *        returned\n *\n * \\return The analog sensor value, where a value of 0 reflects an input voltage\n * of nearly 0 V and a value of 4095 reflects an input voltage of nearly 5 V\n */\nint32_t adi_analog_read(uint8_t port);\n\n/**\n * Gets the 12 bit calibrated value of an analog input port.\n *\n * The adi_analog_calibrate() function must be run first. This function is\n * inappropriate for sensor values intended for integration, as round-off error\n * can accumulate causing drift over time. Use adi_analog_read_calibrated_HR()\n * instead.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - The given value is not within the range of ADI Ports\n * EADDRINUSE - The port is not configured as an analog input\n *\n * \\param port\n *        The ADI port (from 1-8, 'a'-'h', 'A'-'H') for which the value will be\n *        returned\n *\n * \\return The difference of the sensor value from its calibrated default from\n * -4095 to 4095\n */\nint32_t adi_analog_read_calibrated(uint8_t port);\n\n/**\n * Gets the 16 bit calibrated value of an analog input port.\n *\n * The adi_analog_calibrate() function must be run first. This is intended for\n * integrated sensor values such as gyros and accelerometers to reduce drift due\n * to round-off, and should not be used on a sensor such as a line tracker\n * or potentiometer.\n *\n * The value returned actually has 16 bits of \"precision\", even though the ADC\n * only reads 12 bits, so that error induced by the average value being between\n * two values when integrated over time is trivial. Think of the value as the\n * true value times 16.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - The given value is not within the range of ADI Ports\n * EADDRINUSE - The port is not configured as an analog input\n *\n * \\param port\n *        The ADI port (from 1-8, 'a'-'h', 'A'-'H') for which the value will be\n *        returned\n *\n * \\return The difference of the sensor value from its calibrated default from\n * -16384 to 16384\n */\nint32_t adi_analog_read_calibrated_HR(uint8_t port);\n\n/**\n * Gets the digital value (1 or 0) of a port configured as a digital input.\n *\n * If the port is configured as some other mode, the digital value which\n * reflects the current state of the port is returned, which may or may not\n * differ from the currently set value. The return value is undefined for ports\n * configured as any mode other than a Digital Input.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - The given value is not within the range of ADI Ports\n * EADDRINUSE - The port is not configured as a digital input\n *\n * \\param port\n *        The ADI port to read (from 1-8, 'a'-'h', 'A'-'H')\n *\n * \\return True if the pin is HIGH, or false if it is LOW\n */\nint32_t adi_digital_read(uint8_t port);\n\n/**\n * Gets a rising-edge case for a digital button press.\n *\n * This function is not thread-safe.\n * Multiple tasks polling a single button may return different results under the\n * same circumstances, so only one task should call this function for any given\n * button. E.g., Task A calls this function for buttons 1 and 2. Task B may call\n * this function for button 3, but should not for buttons 1 or 2. A typical\n * use-case for this function is to call inside opcontrol to detect new button\n * presses, and not in any other tasks.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - The given value is not within the range of ADI Ports\n * EADDRINUSE - The port is not configured as a digital input\n *\n * \\param port\n *        The ADI port to read (from 1-8, 'a'-'h', 'A'-'H')\n *\n * \\return 1 if the button is pressed and had not been pressed\n * the last time this function was called, 0 otherwise.\n */\nint32_t adi_digital_get_new_press(uint8_t port);\n\n/**\n * Sets the digital value (1 or 0) of a port configured as a digital output.\n *\n * If the port is configured as some other mode, behavior is undefined.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - The given value is not within the range of ADI Ports\n * EADDRINUSE - The port is not configured as a digital output\n *\n * \\param port\n *        The ADI port to read (from 1-8, 'a'-'h', 'A'-'H')\n * \\param value\n *        An expression evaluating to \"true\" or \"false\" to set the output to\n *        HIGH or LOW respectively, or the constants HIGH or LOW themselves\n *\n * \\return 1 if the operation was successful or PROS_ERR if the operation\n * failed, setting errno.\n */\nint32_t adi_digital_write(uint8_t port, bool value);\n\n/**\n * Configures the port as an input or output with a variety of settings.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - The given value is not within the range of ADI Ports\n *\n * \\param port\n *        The ADI port to read (from 1-8, 'a'-'h', 'A'-'H')\n * \\param mode\n *        One of INPUT, INPUT_ANALOG, INPUT_FLOATING, OUTPUT, or OUTPUT_OD\n *\n * \\return 1 if the operation was successful or PROS_ERR if the operation\n * failed, setting errno.\n */\nint32_t adi_pin_mode(uint8_t port, uint8_t mode);\n\n/**\n * Sets the speed of the motor on the given port.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - The given value is not within the range of ADI Ports\n * EADDRINUSE - The port is not configured as an motor\n *\n * \\param port\n *        The ADI port to set (from 1-8, 'a'-'h', 'A'-'H')\n * \\param speed\n *        The new signed speed; -127 is full reverse and 127 is full forward,\n *        with 0 being off\n *\n * \\return 1 if the operation was successful or PROS_ERR if the operation\n * failed, setting errno.\n */\nint32_t adi_motor_set(uint8_t port, int8_t speed);\n\n/**\n * Gets the last set speed of the motor on the given port.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - The given value is not within the range of ADI Ports\n * EADDRINUSE - The port is not configured as an motor\n *\n * \\param port\n *        The ADI port to get (from 1-8, 'a'-'h', 'A'-'H')\n *\n * \\return The last set speed of the motor on the given port\n */\nint32_t adi_motor_get(uint8_t port);\n\n/**\n * Stops the motor on the given port.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - The given value is not within the range of ADI Ports\n * EADDRINUSE - The port is not configured as an motor\n *\n * \\param port\n *        The ADI port to set (from 1-8, 'a'-'h', 'A'-'H')\n *\n * \\return 1 if the operation was successful or PROS_ERR if the operation\n * failed, setting errno.\n */\nint32_t adi_motor_stop(uint8_t port);\n\n/**\n * Reference type for an initialized encoder.\n *\n * This merely contains the port number for the encoder, unlike its use as an\n * object to store encoder data in PROS 2.\n */\ntypedef int32_t adi_encoder_t;\n\n/**\n * Gets the number of ticks recorded by the encoder.\n *\n * There are 360 ticks in one revolution.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - The given value is not within the range of ADI Ports\n * EADDRINUSE - The port is not configured as an encoder\n\n *\n * \\param enc\n *        The adi_encoder_t object from adi_encoder_init() to read\n *\n * \\return The signed and cumulative number of counts since the last start or\n * reset\n */\nint32_t adi_encoder_get(adi_encoder_t enc);\n\n/**\n * Creates an encoder object and configures the specified ports accordingly.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - The given value is not within the range of ADI Ports\n * EADDRINUSE - The port is not configured as an encoder\n\n *\n * \\param port_top\n *        The \"top\" wire from the encoder sensor with the removable cover side\n *        up\n * \\param port_bottom\n *        The \"bottom\" wire from the encoder sensor\n * \\param reverse\n *        If \"true\", the sensor will count in the opposite direction\n *\n * \\return An adi_encoder_t object to be stored and used for later calls to\n * encoder functions\n */\nadi_encoder_t adi_encoder_init(uint8_t port_top, uint8_t port_bottom, bool reverse);\n\n/**\n * Sets the encoder value to zero.\n *\n * It is safe to use this method while an encoder is enabled. It is not\n * necessary to call this method before stopping or starting an encoder.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - The given value is not within the range of ADI Ports\n * EADDRINUSE - The port is not configured as an encoder\n\n *\n * \\param enc\n *        The adi_encoder_t object from adi_encoder_init() to reset\n *\n * \\return 1 if the operation was successful or PROS_ERR if the operation\n * failed, setting errno.\n */\nint32_t adi_encoder_reset(adi_encoder_t enc);\n\n/**\n * Disables the encoder and voids the configuration on its ports.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - The given value is not within the range of ADI Ports\n * EADDRINUSE - The port is not configured as an encoder\n *\n * \\param enc\n *        The adi_encoder_t object from adi_encoder_init() to stop\n *\n * \\return 1 if the operation was successful or PROS_ERR if the operation\n * failed, setting errno.\n */\nint32_t adi_encoder_shutdown(adi_encoder_t enc);\n\n/**\n * Reference type for an initialized ultrasonic.\n *\n * This merely contains the port number for the ultrasonic, unlike its use as an\n * object to store ultrasonic data in PROS 2.\n */\ntypedef int32_t adi_ultrasonic_t;\n\n/**\n * Gets the current ultrasonic sensor value in centimeters.\n *\n * If no object was found, zero is returned. If the ultrasonic sensor was never\n * started, the return value is undefined. Round and fluffy objects can cause\n * inaccurate values to be returned.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - The given value is not within the range of ADI Ports\n * EADDRINUSE - The port is not configured as an ultrasonic\n *\n * \\param ult\n *        The adi_ultrasonic_t object from adi_ultrasonic_init() to read\n *\n * \\return The distance to the nearest object in m^-4 (10000 indicates 1 meter),\n * measured from the sensor's mounting points.\n */\nint32_t adi_ultrasonic_get(adi_ultrasonic_t ult);\n\n/**\n * Creates an ultrasonic object and configures the specified ports accordingly.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - The given value is not within the range of ADI Ports\n * EADDRINUSE - The port is not configured as an ultrasonic\n *\n * \\param port_ping\n *        The port connected to the orange OUTPUT cable. This should be in port\n *        1, 3, 5, or 7 ('A', 'C', 'E', 'G').\n * \\param port_echo\n *        The port connected to the yellow INPUT cable. This should be in the\n *        next highest port following port_ping.\n *\n * \\return An adi_ultrasonic_t object to be stored and used for later calls to\n * ultrasonic functions\n */\nadi_ultrasonic_t adi_ultrasonic_init(uint8_t port_ping, uint8_t port_echo);\n\n/**\n * Disables the ultrasonic sensor and voids the configuration on its ports.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - The given value is not within the range of ADI Ports\n * EADDRINUSE - The port is not configured as an ultrasonic\n *\n * \\param ult\n *        The adi_ultrasonic_t object from adi_ultrasonic_init() to stop\n *\n * \\return 1 if the operation was successful or PROS_ERR if the operation\n * failed, setting errno.\n */\nint32_t adi_ultrasonic_shutdown(adi_ultrasonic_t ult);\n\n/**\n * Reference type for an initialized gyroscope.\n *\n * This merely contains the port number for the gyroscope, unlike its use as an\n * object to store gyro data in PROS 2.\n */\ntypedef int32_t adi_gyro_t;\n\n/**\n * Gets the current gyro angle in tenths of a degree. Unless a multiplier is\n * applied to the gyro, the return value will be a whole number representing\n * the number of degrees of rotation times 10.\n *\n * There are 360 degrees in a circle, thus the gyro will return 3600 for one\n * whole rotation.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - The given value is not within the range of ADI Ports\n * EADDRINUSE - The port is not configured as a gyro\n *\n * \\param gyro\n *        The adi_gyro_t object for which the angle will be returned\n *\n * \\return The gyro angle in degrees.\n */\ndouble adi_gyro_get(adi_gyro_t gyro);\n\n/**\n * Initializes a gyroscope on the given port. If the given port has not\n * previously been configured as a gyro, then this function starts a 1300 ms\n * calibration period.\n *\n * It is highly recommended that this function be called from initialize() when\n * the robot is stationary to ensure proper calibration.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - The given value is not within the range of ADI Ports\n * EADDRINUSE - The port is not configured as a gyro\n *\n * \\param port\n *        The ADI port to initialize as a gyro (from 1-8, 'a'-'h', 'A'-'H')\n * \\param multiplier\n *        A scalar value that will be multiplied by the gyro heading value\n *        supplied by the ADI\n *\n * \\return An adi_gyro_t object containing the given port, or PROS_ERR if the\n * initialization failed.\n */\nadi_gyro_t adi_gyro_init(uint8_t port, double multiplier);\n\n/**\n * Resets the gyroscope value to zero.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - The given value is not within the range of ADI Ports\n * EADDRINUSE - The port is not configured as a gyro\n *\n * \\param gyro\n *        The adi_gyro_t object for which the angle will be returned\n *\n * \\return 1 if the operation was successful or PROS_ERR if the operation\n * failed, setting errno.\n */\nint32_t adi_gyro_reset(adi_gyro_t gyro);\n\n/**\n * Disables the gyro and voids the configuration on its port.\n *\n * This function uses the following values of errno when an error state is\n * reached:\n * ENXIO - The given value is not within the range of ADI Ports\n * EADDRINUSE - The port is not configured as a gyro\n *\n * \\param gyro\n *        The adi_gyro_t object to be shut down\n *\n * \\return 1 if the operation was successful or PROS_ERR if the operation\n * failed, setting errno.\n */\nint32_t adi_gyro_shutdown(adi_gyro_t gyro);\n\n#ifdef __cplusplus\n}  // namespace c\n}  // namespace pros\n}\n#endif\n\n#endif  // _PROS_ADI_H_",
  "publicFunctions": [
    {
      "abstract": false,
      "anchor": "#function-adi_port_get_config",
      "argsString": "(uint8_t port)",
      "brief": "General ADI Use Functions ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "adi_port_config_e_t pros::c::adi_port_get_config",
      "deleted": false,
      "details": "These functions allow for interaction with any ADI port type \n\n Gets the configuration for the given ADI port.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports.",
      "explicit": false,
      "fullname": "adi.h::adi_port_get_config",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 21,
        "file": "pros/adi.h",
        "line": 140
      },
      "name": "adi_port_get_config",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The ADI port number (from 1-8, 'a'-'h', 'A'-'H') for which to return the configuration"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ab1441b4f7106ca07eabeb274a94d5e2b",
      "returns": [
        "The ADI configuration for the given port "
      ],
      "static": false,
      "strong": false,
      "summary": "General ADI Use Functions ",
      "title": "adi_port_get_config",
      "type": "adi_port_config_e_t",
      "typePlain": "adi_port_config_e_t",
      "url": "adi_8h.md#function-adi_port_get_config",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_port_get_value",
      "argsString": "(uint8_t port)",
      "brief": "Gets the value for the given ADI port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_port_get_value",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports.",
      "explicit": false,
      "fullname": "adi.h::adi_port_get_value",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 155
      },
      "name": "adi_port_get_value",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The ADI port number (from 1-8, 'a'-'h', 'A'-'H') for which the value will be returned"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1abe2a3c30fa74bb9c4ba202d79e636d15",
      "returns": [
        "The value stored for the given port "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the value for the given ADI port. ",
      "title": "adi_port_get_value",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "adi_8h.md#function-adi_port_get_value",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_port_set_config",
      "argsString": "(uint8_t port, adi_port_config_e_t type)",
      "brief": "Configures an ADI port to act as a given sensor type. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_port_set_config",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports.",
      "explicit": false,
      "fullname": "adi.h::adi_port_set_config",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 172
      },
      "name": "adi_port_set_config",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure "
        },
        {
          "name": "type",
          "text": "The configuration type for the port"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "type",
          "type": "adi_port_config_e_t",
          "typePlain": "adi_port_config_e_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a280137f3b1ec70ac5d22462cdc7b715d",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Configures an ADI port to act as a given sensor type. ",
      "title": "adi_port_set_config",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "adi_8h.md#function-adi_port_set_config",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_port_set_value",
      "argsString": "(uint8_t port, int32_t value)",
      "brief": "Sets the value for the given ADI port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_port_set_value",
      "deleted": false,
      "details": "This only works on ports configured as outputs, and the behavior will change depending on the configuration of the port.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports.",
      "explicit": false,
      "fullname": "adi.h::adi_port_set_value",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 193
      },
      "name": "adi_port_set_value",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The ADI port number (from 1-8, 'a'-'h', 'A'-'H') for which the value will be set "
        },
        {
          "name": "value",
          "text": "The value to set the ADI port to"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "value",
          "type": "int32_t",
          "typePlain": "int32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a2cf397ea5cb6d0927e5f5c93ec34bb3d",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets the value for the given ADI port. ",
      "title": "adi_port_set_value",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "adi_8h.md#function-adi_port_set_value",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_analog_calibrate",
      "argsString": "(uint8_t port)",
      "brief": "Calibrates the analog sensor on the specified port and returns the new calibration value. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_analog_calibrate",
      "deleted": false,
      "details": "This method assumes that the true sensor value is not actively changing at this time and computes an average from approximately 500 samples, 1 ms apart, for a 0.5 s period of calibration. The average value thus calculated is returned and stored for later calls to the [adi_analog_read_calibrated()](namespacepros_1_1c.md#function-adi_analog_read_calibrated) and [adi_analog_read_calibrated_HR()](namespacepros_1_1c.md#function-adi_analog_read_calibrated_hr) functions. These functions will return the difference between this value and the current sensor value when called.\n\nDo not use this function when the sensor value might be unstable (gyro rotation, accelerometer movement).\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports",
      "explicit": false,
      "fullname": "adi.h::adi_analog_calibrate",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 256
      },
      "name": "adi_analog_calibrate",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The ADI port to calibrate (from 1-8, 'a'-'h', 'A'-'H')"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1adebbf89bed5c3464bd77712c4c53edef",
      "returns": [
        "The average sensor value computed by this function "
      ],
      "static": false,
      "strong": false,
      "summary": "Calibrates the analog sensor on the specified port and returns the new calibration value. ",
      "title": "adi_analog_calibrate",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "adi_8h.md#function-adi_analog_calibrate",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_analog_read",
      "argsString": "(uint8_t port)",
      "brief": "Gets the 12-bit value of the specified port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_analog_read",
      "deleted": false,
      "details": "The value returned is undefined if the analog pin has been switched to a different mode.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an analog input",
      "explicit": false,
      "fullname": "adi.h::adi_analog_read",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 276
      },
      "name": "adi_analog_read",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The ADI port (from 1-8, 'a'-'h', 'A'-'H') for which the value will be returned"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1aaec9c097a2fb6ae1632954591eea35d7",
      "returns": [
        "The analog sensor value, where a value of 0 reflects an input voltage of nearly 0 V and a value of 4095 reflects an input voltage of nearly 5 V "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the 12-bit value of the specified port. ",
      "title": "adi_analog_read",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "adi_8h.md#function-adi_analog_read",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_analog_read_calibrated",
      "argsString": "(uint8_t port)",
      "brief": "Gets the 12 bit calibrated value of an analog input port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_analog_read_calibrated",
      "deleted": false,
      "details": "The [adi_analog_calibrate()](namespacepros_1_1c.md#function-adi_analog_calibrate) function must be run first. This function is inappropriate for sensor values intended for integration, as round-off error can accumulate causing drift over time. Use [adi_analog_read_calibrated_HR()](namespacepros_1_1c.md#function-adi_analog_read_calibrated_hr) instead.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an analog input",
      "explicit": false,
      "fullname": "adi.h::adi_analog_read_calibrated",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 298
      },
      "name": "adi_analog_read_calibrated",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The ADI port (from 1-8, 'a'-'h', 'A'-'H') for which the value will be returned"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a34a3205b4beecc2efb561a068ac869e7",
      "returns": [
        "The difference of the sensor value from its calibrated default from -4095 to 4095 "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the 12 bit calibrated value of an analog input port. ",
      "title": "adi_analog_read_calibrated",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "adi_8h.md#function-adi_analog_read_calibrated",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_analog_read_calibrated_hr",
      "argsString": "(uint8_t port)",
      "brief": "Gets the 16 bit calibrated value of an analog input port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_analog_read_calibrated_HR",
      "deleted": false,
      "details": "The [adi_analog_calibrate()](namespacepros_1_1c.md#function-adi_analog_calibrate) function must be run first. This is intended for integrated sensor values such as gyros and accelerometers to reduce drift due to round-off, and should not be used on a sensor such as a line tracker or potentiometer.\n\nThe value returned actually has 16 bits of \"precision\", even though the ADC only reads 12 bits, so that error induced by the average value being between two values when integrated over time is trivial. Think of the value as the true value times 16.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an analog input",
      "explicit": false,
      "fullname": "adi.h::adi_analog_read_calibrated_HR",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 325
      },
      "name": "adi_analog_read_calibrated_HR",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The ADI port (from 1-8, 'a'-'h', 'A'-'H') for which the value will be returned"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a0a62ec5516d617b8282f9f1c21e68e15",
      "returns": [
        "The difference of the sensor value from its calibrated default from -16384 to 16384 "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the 16 bit calibrated value of an analog input port. ",
      "title": "adi_analog_read_calibrated_HR",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "adi_8h.md#function-adi_analog_read_calibrated_hr",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_digital_read",
      "argsString": "(uint8_t port)",
      "brief": "Gets the digital value (1 or 0) of a port configured as a digital input. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_digital_read",
      "deleted": false,
      "details": "If the port is configured as some other mode, the digital value which reflects the current state of the port is returned, which may or may not differ from the currently set value. The return value is undefined for ports configured as any mode other than a Digital Input.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a digital input",
      "explicit": false,
      "fullname": "adi.h::adi_digital_read",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 345
      },
      "name": "adi_digital_read",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The ADI port to read (from 1-8, 'a'-'h', 'A'-'H')"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a4acc4110678a3f4ae8f6b793b2dc1793",
      "returns": [
        "True if the pin is HIGH, or false if it is LOW "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the digital value (1 or 0) of a port configured as a digital input. ",
      "title": "adi_digital_read",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "adi_8h.md#function-adi_digital_read",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_digital_get_new_press",
      "argsString": "(uint8_t port)",
      "brief": "Gets a rising-edge case for a digital button press. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_digital_get_new_press",
      "deleted": false,
      "details": "This function is not thread-safe. Multiple tasks polling a single button may return different results under the same circumstances, so only one task should call this function for any given button. E.g., [Task](classpros_1_1Task.md) A calls this function for buttons 1 and 2. [Task](classpros_1_1Task.md) B may call this function for button 3, but should not for buttons 1 or 2. A typical use-case for this function is to call inside opcontrol to detect new button presses, and not in any other tasks.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a digital input",
      "explicit": false,
      "fullname": "adi.h::adi_digital_get_new_press",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 369
      },
      "name": "adi_digital_get_new_press",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The ADI port to read (from 1-8, 'a'-'h', 'A'-'H')"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1af67d01f4e0aad2806c699e249d869977",
      "returns": [
        "1 if the button is pressed and had not been pressed the last time this function was called, 0 otherwise. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets a rising-edge case for a digital button press. ",
      "title": "adi_digital_get_new_press",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "adi_8h.md#function-adi_digital_get_new_press",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_digital_write",
      "argsString": "(uint8_t port, bool value)",
      "brief": "Sets the digital value (1 or 0) of a port configured as a digital output. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_digital_write",
      "deleted": false,
      "details": "If the port is configured as some other mode, behavior is undefined.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a digital output",
      "explicit": false,
      "fullname": "adi.h::adi_digital_write",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 390
      },
      "name": "adi_digital_write",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The ADI port to read (from 1-8, 'a'-'h', 'A'-'H') "
        },
        {
          "name": "value",
          "text": "An expression evaluating to \"true\" or \"false\" to set the output to HIGH or LOW respectively, or the constants HIGH or LOW themselves"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "value",
          "type": "bool",
          "typePlain": "bool"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1adbbe71d4934bbe5218b33405207f5f39",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets the digital value (1 or 0) of a port configured as a digital output. ",
      "title": "adi_digital_write",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "adi_8h.md#function-adi_digital_write",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_pin_mode",
      "argsString": "(uint8_t port, uint8_t mode)",
      "brief": "Configures the port as an input or output with a variety of settings. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_pin_mode",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports",
      "explicit": false,
      "fullname": "adi.h::adi_pin_mode",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 407
      },
      "name": "adi_pin_mode",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The ADI port to read (from 1-8, 'a'-'h', 'A'-'H') "
        },
        {
          "name": "mode",
          "text": "One of INPUT, INPUT_ANALOG, INPUT_FLOATING, OUTPUT, or OUTPUT_OD"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "mode",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a81c189bfd3e3d2c7dff5d26459ecd6b9",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Configures the port as an input or output with a variety of settings. ",
      "title": "adi_pin_mode",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "adi_8h.md#function-adi_pin_mode",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_motor_set",
      "argsString": "(uint8_t port, int8_t speed)",
      "brief": "Sets the speed of the motor on the given port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_motor_set",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an motor",
      "explicit": false,
      "fullname": "adi.h::adi_motor_set",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 426
      },
      "name": "adi_motor_set",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The ADI port to set (from 1-8, 'a'-'h', 'A'-'H') "
        },
        {
          "name": "speed",
          "text": "The new signed speed; -127 is full reverse and 127 is full forward, with 0 being off"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "speed",
          "type": "int8_t",
          "typePlain": "int8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a4f0f74ad94f8d1ea90581ed55674241c",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets the speed of the motor on the given port. ",
      "title": "adi_motor_set",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "adi_8h.md#function-adi_motor_set",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_motor_get",
      "argsString": "(uint8_t port)",
      "brief": "Gets the last set speed of the motor on the given port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_motor_get",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an motor",
      "explicit": false,
      "fullname": "adi.h::adi_motor_get",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 441
      },
      "name": "adi_motor_get",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The ADI port to get (from 1-8, 'a'-'h', 'A'-'H')"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1acff400470df9136fc1c05e51644e08c9",
      "returns": [
        "The last set speed of the motor on the given port "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the last set speed of the motor on the given port. ",
      "title": "adi_motor_get",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "adi_8h.md#function-adi_motor_get",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_motor_stop",
      "argsString": "(uint8_t port)",
      "brief": "Stops the motor on the given port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_motor_stop",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an motor",
      "explicit": false,
      "fullname": "adi.h::adi_motor_stop",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 457
      },
      "name": "adi_motor_stop",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The ADI port to set (from 1-8, 'a'-'h', 'A'-'H')"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1abeb2cc7e1edda5a9370a1ae268db08ac",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Stops the motor on the given port. ",
      "title": "adi_motor_stop",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "adi_8h.md#function-adi_motor_stop",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_encoder_get",
      "argsString": "(adi_encoder_t enc)",
      "brief": "Gets the number of ticks recorded by the encoder. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_encoder_get",
      "deleted": false,
      "details": "There are 360 ticks in one revolution.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an encoder",
      "explicit": false,
      "fullname": "adi.h::adi_encoder_get",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 484
      },
      "name": "adi_encoder_get",
      "override": false,
      "paramList": [
        {
          "name": "enc",
          "text": "The adi_encoder_t object from [adi_encoder_init()](namespacepros_1_1c.md#function-adi_encoder_init) to read"
        }
      ],
      "params": [
        {
          "name": "enc",
          "type": "adi_encoder_t",
          "typePlain": "adi_encoder_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a22e55a80b8f8e20bc8b787a92d9253f2",
      "returns": [
        "The signed and cumulative number of counts since the last start or reset "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the number of ticks recorded by the encoder. ",
      "title": "adi_encoder_get",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "adi_8h.md#function-adi_encoder_get",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_encoder_init",
      "argsString": "(uint8_t port_top, uint8_t port_bottom, bool reverse)",
      "brief": "Creates an encoder object and configures the specified ports accordingly. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "adi_encoder_t pros::c::adi_encoder_init",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an encoder",
      "explicit": false,
      "fullname": "adi.h::adi_encoder_init",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 15,
        "file": "pros/adi.h",
        "line": 506
      },
      "name": "adi_encoder_init",
      "override": false,
      "paramList": [
        {
          "name": "port_top",
          "text": "The \"top\" wire from the encoder sensor with the removable cover side up "
        },
        {
          "name": "port_bottom",
          "text": "The \"bottom\" wire from the encoder sensor "
        },
        {
          "name": "reverse",
          "text": "If \"true\", the sensor will count in the opposite direction"
        }
      ],
      "params": [
        {
          "name": "port_top",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "port_bottom",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "reverse",
          "type": "bool",
          "typePlain": "bool"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ac21579276dee544ecfedd917cfef27e0",
      "returns": [
        "An adi_encoder_t object to be stored and used for later calls to encoder functions "
      ],
      "static": false,
      "strong": false,
      "summary": "Creates an encoder object and configures the specified ports accordingly. ",
      "title": "adi_encoder_init",
      "type": "adi_encoder_t",
      "typePlain": "adi_encoder_t",
      "url": "adi_8h.md#function-adi_encoder_init",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_encoder_reset",
      "argsString": "(adi_encoder_t enc)",
      "brief": "Sets the encoder value to zero. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_encoder_reset",
      "deleted": false,
      "details": "It is safe to use this method while an encoder is enabled. It is not necessary to call this method before stopping or starting an encoder.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an encoder",
      "explicit": false,
      "fullname": "adi.h::adi_encoder_reset",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 526
      },
      "name": "adi_encoder_reset",
      "override": false,
      "paramList": [
        {
          "name": "enc",
          "text": "The adi_encoder_t object from [adi_encoder_init()](namespacepros_1_1c.md#function-adi_encoder_init) to reset"
        }
      ],
      "params": [
        {
          "name": "enc",
          "type": "adi_encoder_t",
          "typePlain": "adi_encoder_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a0aa1c29410c89a930400c779b9093ed8",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets the encoder value to zero. ",
      "title": "adi_encoder_reset",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "adi_8h.md#function-adi_encoder_reset",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_encoder_shutdown",
      "argsString": "(adi_encoder_t enc)",
      "brief": "Disables the encoder and voids the configuration on its ports. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_encoder_shutdown",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an encoder",
      "explicit": false,
      "fullname": "adi.h::adi_encoder_shutdown",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 542
      },
      "name": "adi_encoder_shutdown",
      "override": false,
      "paramList": [
        {
          "name": "enc",
          "text": "The adi_encoder_t object from [adi_encoder_init()](namespacepros_1_1c.md#function-adi_encoder_init) to stop"
        }
      ],
      "params": [
        {
          "name": "enc",
          "type": "adi_encoder_t",
          "typePlain": "adi_encoder_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ad9821a0243b2e14d0dac5099872129ae",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Disables the encoder and voids the configuration on its ports. ",
      "title": "adi_encoder_shutdown",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "adi_8h.md#function-adi_encoder_shutdown",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_ultrasonic_get",
      "argsString": "(adi_ultrasonic_t ult)",
      "brief": "Gets the current ultrasonic sensor value in centimeters. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_ultrasonic_get",
      "deleted": false,
      "details": "If no object was found, zero is returned. If the ultrasonic sensor was never started, the return value is undefined. Round and fluffy objects can cause inaccurate values to be returned.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an ultrasonic",
      "explicit": false,
      "fullname": "adi.h::adi_ultrasonic_get",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 570
      },
      "name": "adi_ultrasonic_get",
      "override": false,
      "paramList": [
        {
          "name": "ult",
          "text": "The adi_ultrasonic_t object from [adi_ultrasonic_init()](namespacepros_1_1c.md#function-adi_ultrasonic_init) to read"
        }
      ],
      "params": [
        {
          "name": "ult",
          "type": "adi_ultrasonic_t",
          "typePlain": "adi_ultrasonic_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a65ac514a03673a535cdf43e7f57e2716",
      "returns": [
        "The distance to the nearest object in m^-4 (10000 indicates 1 meter), measured from the sensor's mounting points. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the current ultrasonic sensor value in centimeters. ",
      "title": "adi_ultrasonic_get",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "adi_8h.md#function-adi_ultrasonic_get",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_ultrasonic_init",
      "argsString": "(uint8_t port_ping, uint8_t port_echo)",
      "brief": "Creates an ultrasonic object and configures the specified ports accordingly. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "adi_ultrasonic_t pros::c::adi_ultrasonic_init",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an ultrasonic",
      "explicit": false,
      "fullname": "adi.h::adi_ultrasonic_init",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 18,
        "file": "pros/adi.h",
        "line": 590
      },
      "name": "adi_ultrasonic_init",
      "override": false,
      "paramList": [
        {
          "name": "port_ping",
          "text": "The port connected to the orange OUTPUT cable. This should be in port 1, 3, 5, or 7 ('A', 'C', 'E', 'G'). "
        },
        {
          "name": "port_echo",
          "text": "The port connected to the yellow INPUT cable. This should be in the next highest port following port_ping."
        }
      ],
      "params": [
        {
          "name": "port_ping",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "port_echo",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a2bd844aa49e221c1e68c0b94d148c3b4",
      "returns": [
        "An adi_ultrasonic_t object to be stored and used for later calls to ultrasonic functions "
      ],
      "static": false,
      "strong": false,
      "summary": "Creates an ultrasonic object and configures the specified ports accordingly. ",
      "title": "adi_ultrasonic_init",
      "type": "adi_ultrasonic_t",
      "typePlain": "adi_ultrasonic_t",
      "url": "adi_8h.md#function-adi_ultrasonic_init",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_ultrasonic_shutdown",
      "argsString": "(adi_ultrasonic_t ult)",
      "brief": "Disables the ultrasonic sensor and voids the configuration on its ports. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_ultrasonic_shutdown",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an ultrasonic",
      "explicit": false,
      "fullname": "adi.h::adi_ultrasonic_shutdown",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 606
      },
      "name": "adi_ultrasonic_shutdown",
      "override": false,
      "paramList": [
        {
          "name": "ult",
          "text": "The adi_ultrasonic_t object from [adi_ultrasonic_init()](namespacepros_1_1c.md#function-adi_ultrasonic_init) to stop"
        }
      ],
      "params": [
        {
          "name": "ult",
          "type": "adi_ultrasonic_t",
          "typePlain": "adi_ultrasonic_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a38f7e3b4d99f5dc21972a9f178f5908f",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Disables the ultrasonic sensor and voids the configuration on its ports. ",
      "title": "adi_ultrasonic_shutdown",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "adi_8h.md#function-adi_ultrasonic_shutdown",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_gyro_get",
      "argsString": "(adi_gyro_t gyro)",
      "brief": "Gets the current gyro angle in tenths of a degree. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "double pros::c::adi_gyro_get",
      "deleted": false,
      "details": "Unless a multiplier is applied to the gyro, the return value will be a whole number representing the number of degrees of rotation times 10.\n\nThere are 360 degrees in a circle, thus the gyro will return 3600 for one whole rotation.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a gyro",
      "explicit": false,
      "fullname": "adi.h::adi_gyro_get",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "pros/adi.h",
        "line": 634
      },
      "name": "adi_gyro_get",
      "override": false,
      "paramList": [
        {
          "name": "gyro",
          "text": "The adi_gyro_t object for which the angle will be returned"
        }
      ],
      "params": [
        {
          "name": "gyro",
          "type": "adi_gyro_t",
          "typePlain": "adi_gyro_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a7ee7cf11c1a604af68b9373f4b7c8799",
      "returns": [
        "The gyro angle in degrees. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the current gyro angle in tenths of a degree. ",
      "title": "adi_gyro_get",
      "type": "double",
      "typePlain": "double",
      "url": "adi_8h.md#function-adi_gyro_get",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_gyro_init",
      "argsString": "(uint8_t port, double multiplier)",
      "brief": "Initializes a gyroscope on the given port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "adi_gyro_t pros::c::adi_gyro_init",
      "deleted": false,
      "details": "If the given port has not previously been configured as a gyro, then this function starts a 1300 ms calibration period.\n\nIt is highly recommended that this function be called from [initialize()](main_8h.md#function-initialize) when the robot is stationary to ensure proper calibration.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a gyro",
      "explicit": false,
      "fullname": "adi.h::adi_gyro_init",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 12,
        "file": "pros/adi.h",
        "line": 658
      },
      "name": "adi_gyro_init",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The ADI port to initialize as a gyro (from 1-8, 'a'-'h', 'A'-'H') "
        },
        {
          "name": "multiplier",
          "text": "A scalar value that will be multiplied by the gyro heading value supplied by the ADI"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "multiplier",
          "type": "double",
          "typePlain": "double"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a6ee6e73d3be33d0b2f5c4bfbe37f2d4c",
      "returns": [
        "An adi_gyro_t object containing the given port, or PROS_ERR if the initialization failed. "
      ],
      "static": false,
      "strong": false,
      "summary": "Initializes a gyroscope on the given port. ",
      "title": "adi_gyro_init",
      "type": "adi_gyro_t",
      "typePlain": "adi_gyro_t",
      "url": "adi_8h.md#function-adi_gyro_init",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_gyro_reset",
      "argsString": "(adi_gyro_t gyro)",
      "brief": "Resets the gyroscope value to zero. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_gyro_reset",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a gyro",
      "explicit": false,
      "fullname": "adi.h::adi_gyro_reset",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 674
      },
      "name": "adi_gyro_reset",
      "override": false,
      "paramList": [
        {
          "name": "gyro",
          "text": "The adi_gyro_t object for which the angle will be returned"
        }
      ],
      "params": [
        {
          "name": "gyro",
          "type": "adi_gyro_t",
          "typePlain": "adi_gyro_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a79a193e42f59415cf1f860812a7248d6",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Resets the gyroscope value to zero. ",
      "title": "adi_gyro_reset",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "adi_8h.md#function-adi_gyro_reset",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_gyro_shutdown",
      "argsString": "(adi_gyro_t gyro)",
      "brief": "Disables the gyro and voids the configuration on its port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_gyro_shutdown",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a gyro",
      "explicit": false,
      "fullname": "adi.h::adi_gyro_shutdown",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 690
      },
      "name": "adi_gyro_shutdown",
      "override": false,
      "paramList": [
        {
          "name": "gyro",
          "text": "The adi_gyro_t object to be shut down"
        }
      ],
      "params": [
        {
          "name": "gyro",
          "type": "adi_gyro_t",
          "typePlain": "adi_gyro_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a618baab8adbdec65f418f68cf98325d0",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Disables the gyro and voids the configuration on its port. ",
      "title": "adi_gyro_shutdown",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "adi_8h.md#function-adi_gyro_shutdown",
      "virtual": false,
      "visibility": "public"
    }
  ],
  "publicTypes": [
    {
      "abstract": false,
      "anchor": "#enum-adi_port_config_e",
      "brief": "Represents the port type for an ADI port. ",
      "category": "types",
      "const": false,
      "definition": "",
      "enumvalues": [
        {
          "anchor": "#enumvalue-e_adi_analog_in",
          "category": "types",
          "definition": "",
          "fullname": "adi_port_config_e::E_ADI_ANALOG_IN",
          "hasDetails": false,
          "initializer": "= 0",
          "kind": "enumvalue",
          "name": "E_ADI_ANALOG_IN",
          "refid": "namespacepros_1ad5f9ddf0fd9de73c4b23fa5485144b7fad0a7bcc9cc1afab74574c968e398218e",
          "title": "E_ADI_ANALOG_IN",
          "url": "adi_8h.md#enumvalue-e_adi_analog_in",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_adi_analog_out",
          "category": "types",
          "definition": "",
          "fullname": "adi_port_config_e::E_ADI_ANALOG_OUT",
          "hasDetails": false,
          "initializer": "= 1",
          "kind": "enumvalue",
          "name": "E_ADI_ANALOG_OUT",
          "refid": "namespacepros_1ad5f9ddf0fd9de73c4b23fa5485144b7fa38965ad11f779512181510198b1f295c",
          "title": "E_ADI_ANALOG_OUT",
          "url": "adi_8h.md#enumvalue-e_adi_analog_out",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_adi_digital_in",
          "category": "types",
          "definition": "",
          "fullname": "adi_port_config_e::E_ADI_DIGITAL_IN",
          "hasDetails": false,
          "initializer": "= 2",
          "kind": "enumvalue",
          "name": "E_ADI_DIGITAL_IN",
          "refid": "namespacepros_1ad5f9ddf0fd9de73c4b23fa5485144b7faf9bb3aab6efa231ff5bfc014e880e7b6",
          "title": "E_ADI_DIGITAL_IN",
          "url": "adi_8h.md#enumvalue-e_adi_digital_in",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_adi_digital_out",
          "category": "types",
          "definition": "",
          "fullname": "adi_port_config_e::E_ADI_DIGITAL_OUT",
          "hasDetails": false,
          "initializer": "= 3",
          "kind": "enumvalue",
          "name": "E_ADI_DIGITAL_OUT",
          "refid": "namespacepros_1ad5f9ddf0fd9de73c4b23fa5485144b7fa291cfb590ab68d822095e2047d0c6b19",
          "title": "E_ADI_DIGITAL_OUT",
          "url": "adi_8h.md#enumvalue-e_adi_digital_out",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-_deprecate_digital_in",
          "category": "types",
          "definition": "",
          "fullname": "adi_port_config_e::_DEPRECATE_DIGITAL_IN",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "_DEPRECATE_DIGITAL_IN",
          "refid": "namespacepros_1ad5f9ddf0fd9de73c4b23fa5485144b7fa2a40a89102061b63ec36da8d0515bbc2",
          "title": "_DEPRECATE_DIGITAL_IN",
          "url": "adi_8h.md#enumvalue-_deprecate_digital_in",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-_deprecate_analog_in",
          "category": "types",
          "definition": "",
          "fullname": "adi_port_config_e::_DEPRECATE_ANALOG_IN",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "_DEPRECATE_ANALOG_IN",
          "refid": "namespacepros_1ad5f9ddf0fd9de73c4b23fa5485144b7faf66ad69b6d2d7504f09bf54f1598cb01",
          "title": "_DEPRECATE_ANALOG_IN",
          "url": "adi_8h.md#enumvalue-_deprecate_analog_in",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-_deprecate_digital_in",
          "category": "types",
          "definition": "",
          "fullname": "adi_port_config_e::_DEPRECATE_DIGITAL_IN",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "_DEPRECATE_DIGITAL_IN",
          "refid": "namespacepros_1ad5f9ddf0fd9de73c4b23fa5485144b7fa2a40a89102061b63ec36da8d0515bbc2",
          "title": "_DEPRECATE_DIGITAL_IN",
          "url": "adi_8h.md#enumvalue-_deprecate_digital_in",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-_deprecate_analog_in",
          "category": "types",
          "definition": "",
          "fullname": "adi_port_config_e::_DEPRECATE_ANALOG_IN",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "_DEPRECATE_ANALOG_IN",
          "refid": "namespacepros_1ad5f9ddf0fd9de73c4b23fa5485144b7faf66ad69b6d2d7504f09bf54f1598cb01",
          "title": "_DEPRECATE_ANALOG_IN",
          "url": "adi_8h.md#enumvalue-_deprecate_analog_in",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-_deprecate_digital_in",
          "category": "types",
          "definition": "",
          "fullname": "adi_port_config_e::_DEPRECATE_DIGITAL_IN",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "_DEPRECATE_DIGITAL_IN",
          "refid": "namespacepros_1ad5f9ddf0fd9de73c4b23fa5485144b7fa2a40a89102061b63ec36da8d0515bbc2",
          "title": "_DEPRECATE_DIGITAL_IN",
          "url": "adi_8h.md#enumvalue-_deprecate_digital_in",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-_deprecate_analog_in",
          "category": "types",
          "definition": "",
          "fullname": "adi_port_config_e::_DEPRECATE_ANALOG_IN",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "_DEPRECATE_ANALOG_IN",
          "refid": "namespacepros_1ad5f9ddf0fd9de73c4b23fa5485144b7faf66ad69b6d2d7504f09bf54f1598cb01",
          "title": "_DEPRECATE_ANALOG_IN",
          "url": "adi_8h.md#enumvalue-_deprecate_analog_in",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-_deprecate_analog_in",
          "category": "types",
          "definition": "",
          "fullname": "adi_port_config_e::_DEPRECATE_ANALOG_IN",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "_DEPRECATE_ANALOG_IN",
          "refid": "namespacepros_1ad5f9ddf0fd9de73c4b23fa5485144b7faf66ad69b6d2d7504f09bf54f1598cb01",
          "title": "_DEPRECATE_ANALOG_IN",
          "url": "adi_8h.md#enumvalue-_deprecate_analog_in",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-_deprecate_analog_in",
          "category": "types",
          "definition": "",
          "fullname": "adi_port_config_e::_DEPRECATE_ANALOG_IN",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "_DEPRECATE_ANALOG_IN",
          "refid": "namespacepros_1ad5f9ddf0fd9de73c4b23fa5485144b7faf66ad69b6d2d7504f09bf54f1598cb01",
          "title": "_DEPRECATE_ANALOG_IN",
          "url": "adi_8h.md#enumvalue-_deprecate_analog_in",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_adi_legacy_gyro",
          "category": "types",
          "definition": "",
          "fullname": "adi_port_config_e::E_ADI_LEGACY_GYRO",
          "hasDetails": false,
          "initializer": "= 10",
          "kind": "enumvalue",
          "name": "E_ADI_LEGACY_GYRO",
          "refid": "namespacepros_1ad5f9ddf0fd9de73c4b23fa5485144b7faa4353dc20c129036f937f582eb6f7541",
          "title": "E_ADI_LEGACY_GYRO",
          "url": "adi_8h.md#enumvalue-e_adi_legacy_gyro",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-_deprecate_analog_in",
          "category": "types",
          "definition": "",
          "fullname": "adi_port_config_e::_DEPRECATE_ANALOG_IN",
          "hasDetails": false,
          "kind": "enumvalue",
          "name": "_DEPRECATE_ANALOG_IN",
          "refid": "namespacepros_1ad5f9ddf0fd9de73c4b23fa5485144b7faf66ad69b6d2d7504f09bf54f1598cb01",
          "title": "_DEPRECATE_ANALOG_IN",
          "url": "adi_8h.md#enumvalue-_deprecate_analog_in",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_adi_legacy_servo",
          "category": "types",
          "definition": "",
          "fullname": "adi_port_config_e::E_ADI_LEGACY_SERVO",
          "hasDetails": false,
          "initializer": "= 12",
          "kind": "enumvalue",
          "name": "E_ADI_LEGACY_SERVO",
          "refid": "namespacepros_1ad5f9ddf0fd9de73c4b23fa5485144b7fa64e8c424fa7583513860321fb268494c",
          "title": "E_ADI_LEGACY_SERVO",
          "url": "adi_8h.md#enumvalue-e_adi_legacy_servo",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_adi_legacy_pwm",
          "category": "types",
          "definition": "",
          "fullname": "adi_port_config_e::E_ADI_LEGACY_PWM",
          "hasDetails": false,
          "initializer": "= 13",
          "kind": "enumvalue",
          "name": "E_ADI_LEGACY_PWM",
          "refid": "namespacepros_1ad5f9ddf0fd9de73c4b23fa5485144b7fa9676667cf9b2184460e7beda21f914e5",
          "title": "E_ADI_LEGACY_PWM",
          "url": "adi_8h.md#enumvalue-e_adi_legacy_pwm",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_adi_legacy_encoder",
          "category": "types",
          "definition": "",
          "fullname": "adi_port_config_e::E_ADI_LEGACY_ENCODER",
          "hasDetails": false,
          "initializer": "= 14",
          "kind": "enumvalue",
          "name": "E_ADI_LEGACY_ENCODER",
          "refid": "namespacepros_1ad5f9ddf0fd9de73c4b23fa5485144b7fa2f4f849fce4638f96c206d24049c4a5e",
          "title": "E_ADI_LEGACY_ENCODER",
          "url": "adi_8h.md#enumvalue-e_adi_legacy_encoder",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_adi_legacy_ultrasonic",
          "category": "types",
          "definition": "",
          "fullname": "adi_port_config_e::E_ADI_LEGACY_ULTRASONIC",
          "hasDetails": false,
          "initializer": "= 15",
          "kind": "enumvalue",
          "name": "E_ADI_LEGACY_ULTRASONIC",
          "refid": "namespacepros_1ad5f9ddf0fd9de73c4b23fa5485144b7fa112941f306553d05fd0dd1759d3c4d89",
          "title": "E_ADI_LEGACY_ULTRASONIC",
          "url": "adi_8h.md#enumvalue-e_adi_legacy_ultrasonic",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_adi_type_undefined",
          "category": "types",
          "definition": "",
          "fullname": "adi_port_config_e::E_ADI_TYPE_UNDEFINED",
          "hasDetails": false,
          "initializer": "= 255",
          "kind": "enumvalue",
          "name": "E_ADI_TYPE_UNDEFINED",
          "refid": "namespacepros_1ad5f9ddf0fd9de73c4b23fa5485144b7fa37e9d6ebc03d88c58db1904a7f2b7373",
          "title": "E_ADI_TYPE_UNDEFINED",
          "url": "adi_8h.md#enumvalue-e_adi_type_undefined",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_adi_err",
          "category": "types",
          "definition": "",
          "fullname": "adi_port_config_e::E_ADI_ERR",
          "hasDetails": false,
          "initializer": "= PROS_ERR",
          "kind": "enumvalue",
          "name": "E_ADI_ERR",
          "refid": "namespacepros_1ad5f9ddf0fd9de73c4b23fa5485144b7fa33d9a21daeabc122fcef7259fa6602f2",
          "title": "E_ADI_ERR",
          "url": "adi_8h.md#enumvalue-e_adi_err",
          "visibility": "public"
        }
      ],
      "explicit": false,
      "fullname": "adi.h::adi_port_config_e",
      "hasDetails": false,
      "inline": false,
      "kind": "enum",
      "location": {
        "bodyEnd": 70,
        "bodyFile": "pros/adi.h",
        "bodyStart": 35,
        "column": 31,
        "file": "pros/adi.h",
        "line": 35
      },
      "name": "adi_port_config_e",
      "override": false,
      "refid": "namespacepros_1ad5f9ddf0fd9de73c4b23fa5485144b7f",
      "static": false,
      "strong": false,
      "summary": "Represents the port type for an ADI port. ",
      "title": "adi_port_config_e",
      "url": "adi_8h.md#enum-adi_port_config_e",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-adi_encoder_t",
      "brief": "Reference type for an initialized encoder. ",
      "category": "types",
      "const": false,
      "definition": "typedef int32_t adi_encoder_t",
      "details": "This merely contains the port number for the encoder, unlike its use as an object to store encoder data in PROS 2. ",
      "explicit": false,
      "fullname": "adi.h::adi_encoder_t",
      "hasDetails": true,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "pros/adi.h",
        "bodyStart": 465,
        "column": 17,
        "file": "pros/adi.h",
        "line": 465
      },
      "name": "adi_encoder_t",
      "override": false,
      "refid": "namespacepros_1_1c_1adc7331a863ca648693c688af1ae9a940",
      "static": false,
      "strong": false,
      "summary": "Reference type for an initialized encoder. ",
      "title": "adi_encoder_t",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "adi_8h.md#typedef-adi_encoder_t",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-adi_ultrasonic_t",
      "brief": "Reference type for an initialized ultrasonic. ",
      "category": "types",
      "const": false,
      "definition": "typedef int32_t adi_ultrasonic_t",
      "details": "This merely contains the port number for the ultrasonic, unlike its use as an object to store ultrasonic data in PROS 2. ",
      "explicit": false,
      "fullname": "adi.h::adi_ultrasonic_t",
      "hasDetails": true,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "pros/adi.h",
        "bodyStart": 550,
        "column": 17,
        "file": "pros/adi.h",
        "line": 550
      },
      "name": "adi_ultrasonic_t",
      "override": false,
      "refid": "namespacepros_1_1c_1a642e06a44cad02177d4111261e17c3df",
      "static": false,
      "strong": false,
      "summary": "Reference type for an initialized ultrasonic. ",
      "title": "adi_ultrasonic_t",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "adi_8h.md#typedef-adi_ultrasonic_t",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-adi_gyro_t",
      "brief": "Reference type for an initialized gyroscope. ",
      "category": "types",
      "const": false,
      "definition": "typedef int32_t adi_gyro_t",
      "details": "This merely contains the port number for the gyroscope, unlike its use as an object to store gyro data in PROS 2. ",
      "explicit": false,
      "fullname": "adi.h::adi_gyro_t",
      "hasDetails": true,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "pros/adi.h",
        "bodyStart": 614,
        "column": 17,
        "file": "pros/adi.h",
        "line": 614
      },
      "name": "adi_gyro_t",
      "override": false,
      "refid": "namespacepros_1_1c_1a9c451728d4193f1a4e59d7dc489ac292",
      "static": false,
      "strong": false,
      "summary": "Reference type for an initialized gyroscope. ",
      "title": "adi_gyro_t",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "adi_8h.md#typedef-adi_gyro_t",
      "visibility": "public"
    }
  ],
  "refid": "adi_8h",
  "static": false,
  "strong": false,
  "title": "pros/adi.h",
  "url": "adi_8h.md#file-adi.h",
  "visibility": "public"
}