{
  "abstract": false,
  "anchor": "",
  "category": "namespaces",
  "const": false,
  "definition": "",
  "explicit": false,
  "fullname": "pros::c",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "inline": false,
  "kind": "namespace",
  "location": {
    "column": 11,
    "file": "pros/adi.h",
    "line": 118
  },
  "name": "pros::c",
  "override": false,
  "parent": {
    "anchor": "",
    "brief": "Get the current status of the competition control. ",
    "category": "namespaces",
    "fullname": "pros",
    "kind": "namespace",
    "name": "pros",
    "refid": "namespacepros",
    "summary": "Get the current status of the competition control. ",
    "title": "pros",
    "url": "namespacepros.md",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "",
      "brief": "Get the current status of the competition control. ",
      "category": "namespaces",
      "fullname": "pros",
      "kind": "namespace",
      "name": "pros",
      "refid": "namespacepros",
      "summary": "Get the current status of the competition control. ",
      "title": "pros",
      "url": "namespacepros.md",
      "visibility": "public"
    }
  ],
  "publicAttributes": [
    {
      "abstract": false,
      "anchor": "#variable-quaternion_s_t",
      "category": "attributes",
      "const": false,
      "definition": "quaternion_s_t",
      "explicit": false,
      "fullname": "pros::c::quaternion_s_t",
      "hasDetails": false,
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "pros/imu.h",
        "bodyStart": 42,
        "column": 2,
        "file": "pros/imu.h",
        "line": 42
      },
      "name": "quaternion_s_t",
      "override": false,
      "refid": "namespacepros_1_1c_1a1f3d4bf4251e6ce7cb374297de6390a1",
      "static": false,
      "strong": false,
      "title": "quaternion_s_t",
      "url": "namespacepros_1_1c.md#variable-quaternion_s_t",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-euler_s_t",
      "category": "attributes",
      "const": false,
      "definition": "euler_s_t",
      "explicit": false,
      "fullname": "pros::c::euler_s_t",
      "hasDetails": false,
      "inline": false,
      "kind": "variable",
      "location": {
        "bodyFile": "pros/imu.h",
        "bodyStart": 57,
        "column": 2,
        "file": "pros/imu.h",
        "line": 57
      },
      "name": "euler_s_t",
      "override": false,
      "refid": "namespacepros_1_1c_1a93e80020ec907b7e11ac7166e5d01c55",
      "static": false,
      "strong": false,
      "title": "euler_s_t",
      "url": "namespacepros_1_1c.md#variable-euler_s_t",
      "visibility": "public"
    }
  ],
  "publicFunctions": [
    {
      "abstract": false,
      "anchor": "#function-adi_port_get_config",
      "argsString": "(uint8_t port)",
      "brief": "General ADI Use Functions ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "adi_port_config_e_t pros::c::adi_port_get_config",
      "deleted": false,
      "details": "These functions allow for interaction with any ADI port type \n\n Gets the configuration for the given ADI port.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports.",
      "explicit": false,
      "fullname": "pros::c::adi_port_get_config",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 21,
        "file": "pros/adi.h",
        "line": 140
      },
      "name": "adi_port_get_config",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The ADI port number (from 1-8, 'a'-'h', 'A'-'H') for which to return the configuration"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ab1441b4f7106ca07eabeb274a94d5e2b",
      "returns": [
        "The ADI configuration for the given port "
      ],
      "static": false,
      "strong": false,
      "summary": "General ADI Use Functions ",
      "title": "adi_port_get_config",
      "type": "adi_port_config_e_t",
      "typePlain": "adi_port_config_e_t",
      "url": "namespacepros_1_1c.md#function-adi_port_get_config",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_port_get_value",
      "argsString": "(uint8_t port)",
      "brief": "Gets the value for the given ADI port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_port_get_value",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports.",
      "explicit": false,
      "fullname": "pros::c::adi_port_get_value",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 155
      },
      "name": "adi_port_get_value",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The ADI port number (from 1-8, 'a'-'h', 'A'-'H') for which the value will be returned"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1abe2a3c30fa74bb9c4ba202d79e636d15",
      "returns": [
        "The value stored for the given port "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the value for the given ADI port. ",
      "title": "adi_port_get_value",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-adi_port_get_value",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_port_set_config",
      "argsString": "(uint8_t port, adi_port_config_e_t type)",
      "brief": "Configures an ADI port to act as a given sensor type. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_port_set_config",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports.",
      "explicit": false,
      "fullname": "pros::c::adi_port_set_config",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 172
      },
      "name": "adi_port_set_config",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure "
        },
        {
          "name": "type",
          "text": "The configuration type for the port"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "type",
          "type": "adi_port_config_e_t",
          "typePlain": "adi_port_config_e_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a280137f3b1ec70ac5d22462cdc7b715d",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Configures an ADI port to act as a given sensor type. ",
      "title": "adi_port_set_config",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-adi_port_set_config",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_port_set_value",
      "argsString": "(uint8_t port, int32_t value)",
      "brief": "Sets the value for the given ADI port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_port_set_value",
      "deleted": false,
      "details": "This only works on ports configured as outputs, and the behavior will change depending on the configuration of the port.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports.",
      "explicit": false,
      "fullname": "pros::c::adi_port_set_value",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 193
      },
      "name": "adi_port_set_value",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The ADI port number (from 1-8, 'a'-'h', 'A'-'H') for which the value will be set "
        },
        {
          "name": "value",
          "text": "The value to set the ADI port to"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "value",
          "type": "int32_t",
          "typePlain": "int32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a2cf397ea5cb6d0927e5f5c93ec34bb3d",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets the value for the given ADI port. ",
      "title": "adi_port_set_value",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-adi_port_set_value",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_analog_calibrate",
      "argsString": "(uint8_t port)",
      "brief": "Calibrates the analog sensor on the specified port and returns the new calibration value. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_analog_calibrate",
      "deleted": false,
      "details": "This method assumes that the true sensor value is not actively changing at this time and computes an average from approximately 500 samples, 1 ms apart, for a 0.5 s period of calibration. The average value thus calculated is returned and stored for later calls to the [adi_analog_read_calibrated()](namespacepros_1_1c.md#function-adi_analog_read_calibrated) and [adi_analog_read_calibrated_HR()](namespacepros_1_1c.md#function-adi_analog_read_calibrated_hr) functions. These functions will return the difference between this value and the current sensor value when called.\n\nDo not use this function when the sensor value might be unstable (gyro rotation, accelerometer movement).\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports",
      "explicit": false,
      "fullname": "pros::c::adi_analog_calibrate",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 256
      },
      "name": "adi_analog_calibrate",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The ADI port to calibrate (from 1-8, 'a'-'h', 'A'-'H')"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1adebbf89bed5c3464bd77712c4c53edef",
      "returns": [
        "The average sensor value computed by this function "
      ],
      "static": false,
      "strong": false,
      "summary": "Calibrates the analog sensor on the specified port and returns the new calibration value. ",
      "title": "adi_analog_calibrate",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-adi_analog_calibrate",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_analog_read",
      "argsString": "(uint8_t port)",
      "brief": "Gets the 12-bit value of the specified port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_analog_read",
      "deleted": false,
      "details": "The value returned is undefined if the analog pin has been switched to a different mode.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an analog input",
      "explicit": false,
      "fullname": "pros::c::adi_analog_read",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 276
      },
      "name": "adi_analog_read",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The ADI port (from 1-8, 'a'-'h', 'A'-'H') for which the value will be returned"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1aaec9c097a2fb6ae1632954591eea35d7",
      "returns": [
        "The analog sensor value, where a value of 0 reflects an input voltage of nearly 0 V and a value of 4095 reflects an input voltage of nearly 5 V "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the 12-bit value of the specified port. ",
      "title": "adi_analog_read",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-adi_analog_read",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_analog_read_calibrated",
      "argsString": "(uint8_t port)",
      "brief": "Gets the 12 bit calibrated value of an analog input port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_analog_read_calibrated",
      "deleted": false,
      "details": "The [adi_analog_calibrate()](namespacepros_1_1c.md#function-adi_analog_calibrate) function must be run first. This function is inappropriate for sensor values intended for integration, as round-off error can accumulate causing drift over time. Use [adi_analog_read_calibrated_HR()](namespacepros_1_1c.md#function-adi_analog_read_calibrated_hr) instead.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an analog input",
      "explicit": false,
      "fullname": "pros::c::adi_analog_read_calibrated",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 298
      },
      "name": "adi_analog_read_calibrated",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The ADI port (from 1-8, 'a'-'h', 'A'-'H') for which the value will be returned"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a34a3205b4beecc2efb561a068ac869e7",
      "returns": [
        "The difference of the sensor value from its calibrated default from -4095 to 4095 "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the 12 bit calibrated value of an analog input port. ",
      "title": "adi_analog_read_calibrated",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-adi_analog_read_calibrated",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_analog_read_calibrated_hr",
      "argsString": "(uint8_t port)",
      "brief": "Gets the 16 bit calibrated value of an analog input port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_analog_read_calibrated_HR",
      "deleted": false,
      "details": "The [adi_analog_calibrate()](namespacepros_1_1c.md#function-adi_analog_calibrate) function must be run first. This is intended for integrated sensor values such as gyros and accelerometers to reduce drift due to round-off, and should not be used on a sensor such as a line tracker or potentiometer.\n\nThe value returned actually has 16 bits of \"precision\", even though the ADC only reads 12 bits, so that error induced by the average value being between two values when integrated over time is trivial. Think of the value as the true value times 16.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an analog input",
      "explicit": false,
      "fullname": "pros::c::adi_analog_read_calibrated_HR",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 325
      },
      "name": "adi_analog_read_calibrated_HR",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The ADI port (from 1-8, 'a'-'h', 'A'-'H') for which the value will be returned"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a0a62ec5516d617b8282f9f1c21e68e15",
      "returns": [
        "The difference of the sensor value from its calibrated default from -16384 to 16384 "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the 16 bit calibrated value of an analog input port. ",
      "title": "adi_analog_read_calibrated_HR",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-adi_analog_read_calibrated_hr",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_digital_read",
      "argsString": "(uint8_t port)",
      "brief": "Gets the digital value (1 or 0) of a port configured as a digital input. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_digital_read",
      "deleted": false,
      "details": "If the port is configured as some other mode, the digital value which reflects the current state of the port is returned, which may or may not differ from the currently set value. The return value is undefined for ports configured as any mode other than a Digital Input.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a digital input",
      "explicit": false,
      "fullname": "pros::c::adi_digital_read",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 345
      },
      "name": "adi_digital_read",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The ADI port to read (from 1-8, 'a'-'h', 'A'-'H')"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a4acc4110678a3f4ae8f6b793b2dc1793",
      "returns": [
        "True if the pin is HIGH, or false if it is LOW "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the digital value (1 or 0) of a port configured as a digital input. ",
      "title": "adi_digital_read",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-adi_digital_read",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_digital_get_new_press",
      "argsString": "(uint8_t port)",
      "brief": "Gets a rising-edge case for a digital button press. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_digital_get_new_press",
      "deleted": false,
      "details": "This function is not thread-safe. Multiple tasks polling a single button may return different results under the same circumstances, so only one task should call this function for any given button. E.g., [Task](classpros_1_1Task.md) A calls this function for buttons 1 and 2. [Task](classpros_1_1Task.md) B may call this function for button 3, but should not for buttons 1 or 2. A typical use-case for this function is to call inside opcontrol to detect new button presses, and not in any other tasks.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a digital input",
      "explicit": false,
      "fullname": "pros::c::adi_digital_get_new_press",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 369
      },
      "name": "adi_digital_get_new_press",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The ADI port to read (from 1-8, 'a'-'h', 'A'-'H')"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1af67d01f4e0aad2806c699e249d869977",
      "returns": [
        "1 if the button is pressed and had not been pressed the last time this function was called, 0 otherwise. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets a rising-edge case for a digital button press. ",
      "title": "adi_digital_get_new_press",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-adi_digital_get_new_press",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_digital_write",
      "argsString": "(uint8_t port, bool value)",
      "brief": "Sets the digital value (1 or 0) of a port configured as a digital output. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_digital_write",
      "deleted": false,
      "details": "If the port is configured as some other mode, behavior is undefined.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a digital output",
      "explicit": false,
      "fullname": "pros::c::adi_digital_write",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 390
      },
      "name": "adi_digital_write",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The ADI port to read (from 1-8, 'a'-'h', 'A'-'H') "
        },
        {
          "name": "value",
          "text": "An expression evaluating to \"true\" or \"false\" to set the output to HIGH or LOW respectively, or the constants HIGH or LOW themselves"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "value",
          "type": "bool",
          "typePlain": "bool"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1adbbe71d4934bbe5218b33405207f5f39",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets the digital value (1 or 0) of a port configured as a digital output. ",
      "title": "adi_digital_write",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-adi_digital_write",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_pin_mode",
      "argsString": "(uint8_t port, uint8_t mode)",
      "brief": "Configures the port as an input or output with a variety of settings. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_pin_mode",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports",
      "explicit": false,
      "fullname": "pros::c::adi_pin_mode",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 407
      },
      "name": "adi_pin_mode",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The ADI port to read (from 1-8, 'a'-'h', 'A'-'H') "
        },
        {
          "name": "mode",
          "text": "One of INPUT, INPUT_ANALOG, INPUT_FLOATING, OUTPUT, or OUTPUT_OD"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "mode",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a81c189bfd3e3d2c7dff5d26459ecd6b9",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Configures the port as an input or output with a variety of settings. ",
      "title": "adi_pin_mode",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-adi_pin_mode",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_motor_set",
      "argsString": "(uint8_t port, int8_t speed)",
      "brief": "Sets the speed of the motor on the given port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_motor_set",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an motor",
      "explicit": false,
      "fullname": "pros::c::adi_motor_set",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 426
      },
      "name": "adi_motor_set",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The ADI port to set (from 1-8, 'a'-'h', 'A'-'H') "
        },
        {
          "name": "speed",
          "text": "The new signed speed; -127 is full reverse and 127 is full forward, with 0 being off"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "speed",
          "type": "int8_t",
          "typePlain": "int8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a4f0f74ad94f8d1ea90581ed55674241c",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets the speed of the motor on the given port. ",
      "title": "adi_motor_set",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-adi_motor_set",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_motor_get",
      "argsString": "(uint8_t port)",
      "brief": "Gets the last set speed of the motor on the given port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_motor_get",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an motor",
      "explicit": false,
      "fullname": "pros::c::adi_motor_get",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 441
      },
      "name": "adi_motor_get",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The ADI port to get (from 1-8, 'a'-'h', 'A'-'H')"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1acff400470df9136fc1c05e51644e08c9",
      "returns": [
        "The last set speed of the motor on the given port "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the last set speed of the motor on the given port. ",
      "title": "adi_motor_get",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-adi_motor_get",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_motor_stop",
      "argsString": "(uint8_t port)",
      "brief": "Stops the motor on the given port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_motor_stop",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an motor",
      "explicit": false,
      "fullname": "pros::c::adi_motor_stop",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 457
      },
      "name": "adi_motor_stop",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The ADI port to set (from 1-8, 'a'-'h', 'A'-'H')"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1abeb2cc7e1edda5a9370a1ae268db08ac",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Stops the motor on the given port. ",
      "title": "adi_motor_stop",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-adi_motor_stop",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_encoder_get",
      "argsString": "(adi_encoder_t enc)",
      "brief": "Gets the number of ticks recorded by the encoder. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_encoder_get",
      "deleted": false,
      "details": "There are 360 ticks in one revolution.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an encoder",
      "explicit": false,
      "fullname": "pros::c::adi_encoder_get",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 484
      },
      "name": "adi_encoder_get",
      "override": false,
      "paramList": [
        {
          "name": "enc",
          "text": "The adi_encoder_t object from [adi_encoder_init()](namespacepros_1_1c.md#function-adi_encoder_init) to read"
        }
      ],
      "params": [
        {
          "name": "enc",
          "type": "[adi_encoder_t](namespacepros_1_1c.md#typedef-adi_encoder_t)",
          "typePlain": "adi_encoder_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a22e55a80b8f8e20bc8b787a92d9253f2",
      "returns": [
        "The signed and cumulative number of counts since the last start or reset "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the number of ticks recorded by the encoder. ",
      "title": "adi_encoder_get",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-adi_encoder_get",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_encoder_init",
      "argsString": "(uint8_t port_top, uint8_t port_bottom, bool reverse)",
      "brief": "Creates an encoder object and configures the specified ports accordingly. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "adi_encoder_t pros::c::adi_encoder_init",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an encoder",
      "explicit": false,
      "fullname": "pros::c::adi_encoder_init",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 15,
        "file": "pros/adi.h",
        "line": 506
      },
      "name": "adi_encoder_init",
      "override": false,
      "paramList": [
        {
          "name": "port_top",
          "text": "The \"top\" wire from the encoder sensor with the removable cover side up "
        },
        {
          "name": "port_bottom",
          "text": "The \"bottom\" wire from the encoder sensor "
        },
        {
          "name": "reverse",
          "text": "If \"true\", the sensor will count in the opposite direction"
        }
      ],
      "params": [
        {
          "name": "port_top",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "port_bottom",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "reverse",
          "type": "bool",
          "typePlain": "bool"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ac21579276dee544ecfedd917cfef27e0",
      "returns": [
        "An adi_encoder_t object to be stored and used for later calls to encoder functions "
      ],
      "static": false,
      "strong": false,
      "summary": "Creates an encoder object and configures the specified ports accordingly. ",
      "title": "adi_encoder_init",
      "type": "[adi_encoder_t](namespacepros_1_1c.md#typedef-adi_encoder_t)",
      "typePlain": "adi_encoder_t",
      "url": "namespacepros_1_1c.md#function-adi_encoder_init",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_encoder_reset",
      "argsString": "(adi_encoder_t enc)",
      "brief": "Sets the encoder value to zero. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_encoder_reset",
      "deleted": false,
      "details": "It is safe to use this method while an encoder is enabled. It is not necessary to call this method before stopping or starting an encoder.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an encoder",
      "explicit": false,
      "fullname": "pros::c::adi_encoder_reset",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 526
      },
      "name": "adi_encoder_reset",
      "override": false,
      "paramList": [
        {
          "name": "enc",
          "text": "The adi_encoder_t object from [adi_encoder_init()](namespacepros_1_1c.md#function-adi_encoder_init) to reset"
        }
      ],
      "params": [
        {
          "name": "enc",
          "type": "[adi_encoder_t](namespacepros_1_1c.md#typedef-adi_encoder_t)",
          "typePlain": "adi_encoder_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a0aa1c29410c89a930400c779b9093ed8",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets the encoder value to zero. ",
      "title": "adi_encoder_reset",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-adi_encoder_reset",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_encoder_shutdown",
      "argsString": "(adi_encoder_t enc)",
      "brief": "Disables the encoder and voids the configuration on its ports. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_encoder_shutdown",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an encoder",
      "explicit": false,
      "fullname": "pros::c::adi_encoder_shutdown",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 542
      },
      "name": "adi_encoder_shutdown",
      "override": false,
      "paramList": [
        {
          "name": "enc",
          "text": "The adi_encoder_t object from [adi_encoder_init()](namespacepros_1_1c.md#function-adi_encoder_init) to stop"
        }
      ],
      "params": [
        {
          "name": "enc",
          "type": "[adi_encoder_t](namespacepros_1_1c.md#typedef-adi_encoder_t)",
          "typePlain": "adi_encoder_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ad9821a0243b2e14d0dac5099872129ae",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Disables the encoder and voids the configuration on its ports. ",
      "title": "adi_encoder_shutdown",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-adi_encoder_shutdown",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_ultrasonic_get",
      "argsString": "(adi_ultrasonic_t ult)",
      "brief": "Gets the current ultrasonic sensor value in centimeters. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_ultrasonic_get",
      "deleted": false,
      "details": "If no object was found, zero is returned. If the ultrasonic sensor was never started, the return value is undefined. Round and fluffy objects can cause inaccurate values to be returned.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an ultrasonic",
      "explicit": false,
      "fullname": "pros::c::adi_ultrasonic_get",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 570
      },
      "name": "adi_ultrasonic_get",
      "override": false,
      "paramList": [
        {
          "name": "ult",
          "text": "The adi_ultrasonic_t object from [adi_ultrasonic_init()](namespacepros_1_1c.md#function-adi_ultrasonic_init) to read"
        }
      ],
      "params": [
        {
          "name": "ult",
          "type": "[adi_ultrasonic_t](namespacepros_1_1c.md#typedef-adi_ultrasonic_t)",
          "typePlain": "adi_ultrasonic_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a65ac514a03673a535cdf43e7f57e2716",
      "returns": [
        "The distance to the nearest object in m^-4 (10000 indicates 1 meter), measured from the sensor's mounting points. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the current ultrasonic sensor value in centimeters. ",
      "title": "adi_ultrasonic_get",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-adi_ultrasonic_get",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_ultrasonic_init",
      "argsString": "(uint8_t port_ping, uint8_t port_echo)",
      "brief": "Creates an ultrasonic object and configures the specified ports accordingly. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "adi_ultrasonic_t pros::c::adi_ultrasonic_init",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an ultrasonic",
      "explicit": false,
      "fullname": "pros::c::adi_ultrasonic_init",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 18,
        "file": "pros/adi.h",
        "line": 590
      },
      "name": "adi_ultrasonic_init",
      "override": false,
      "paramList": [
        {
          "name": "port_ping",
          "text": "The port connected to the orange OUTPUT cable. This should be in port 1, 3, 5, or 7 ('A', 'C', 'E', 'G'). "
        },
        {
          "name": "port_echo",
          "text": "The port connected to the yellow INPUT cable. This should be in the next highest port following port_ping."
        }
      ],
      "params": [
        {
          "name": "port_ping",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "port_echo",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a2bd844aa49e221c1e68c0b94d148c3b4",
      "returns": [
        "An adi_ultrasonic_t object to be stored and used for later calls to ultrasonic functions "
      ],
      "static": false,
      "strong": false,
      "summary": "Creates an ultrasonic object and configures the specified ports accordingly. ",
      "title": "adi_ultrasonic_init",
      "type": "[adi_ultrasonic_t](namespacepros_1_1c.md#typedef-adi_ultrasonic_t)",
      "typePlain": "adi_ultrasonic_t",
      "url": "namespacepros_1_1c.md#function-adi_ultrasonic_init",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_ultrasonic_shutdown",
      "argsString": "(adi_ultrasonic_t ult)",
      "brief": "Disables the ultrasonic sensor and voids the configuration on its ports. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_ultrasonic_shutdown",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an ultrasonic",
      "explicit": false,
      "fullname": "pros::c::adi_ultrasonic_shutdown",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 606
      },
      "name": "adi_ultrasonic_shutdown",
      "override": false,
      "paramList": [
        {
          "name": "ult",
          "text": "The adi_ultrasonic_t object from [adi_ultrasonic_init()](namespacepros_1_1c.md#function-adi_ultrasonic_init) to stop"
        }
      ],
      "params": [
        {
          "name": "ult",
          "type": "[adi_ultrasonic_t](namespacepros_1_1c.md#typedef-adi_ultrasonic_t)",
          "typePlain": "adi_ultrasonic_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a38f7e3b4d99f5dc21972a9f178f5908f",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Disables the ultrasonic sensor and voids the configuration on its ports. ",
      "title": "adi_ultrasonic_shutdown",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-adi_ultrasonic_shutdown",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_gyro_get",
      "argsString": "(adi_gyro_t gyro)",
      "brief": "Gets the current gyro angle in tenths of a degree. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "double pros::c::adi_gyro_get",
      "deleted": false,
      "details": "Unless a multiplier is applied to the gyro, the return value will be a whole number representing the number of degrees of rotation times 10.\n\nThere are 360 degrees in a circle, thus the gyro will return 3600 for one whole rotation.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a gyro",
      "explicit": false,
      "fullname": "pros::c::adi_gyro_get",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "pros/adi.h",
        "line": 634
      },
      "name": "adi_gyro_get",
      "override": false,
      "paramList": [
        {
          "name": "gyro",
          "text": "The adi_gyro_t object for which the angle will be returned"
        }
      ],
      "params": [
        {
          "name": "gyro",
          "type": "[adi_gyro_t](namespacepros_1_1c.md#typedef-adi_gyro_t)",
          "typePlain": "adi_gyro_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a7ee7cf11c1a604af68b9373f4b7c8799",
      "returns": [
        "The gyro angle in degrees. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the current gyro angle in tenths of a degree. ",
      "title": "adi_gyro_get",
      "type": "double",
      "typePlain": "double",
      "url": "namespacepros_1_1c.md#function-adi_gyro_get",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_gyro_init",
      "argsString": "(uint8_t port, double multiplier)",
      "brief": "Initializes a gyroscope on the given port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "adi_gyro_t pros::c::adi_gyro_init",
      "deleted": false,
      "details": "If the given port has not previously been configured as a gyro, then this function starts a 1300 ms calibration period.\n\nIt is highly recommended that this function be called from [initialize()](main_8h.md#function-initialize) when the robot is stationary to ensure proper calibration.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a gyro",
      "explicit": false,
      "fullname": "pros::c::adi_gyro_init",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 12,
        "file": "pros/adi.h",
        "line": 658
      },
      "name": "adi_gyro_init",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The ADI port to initialize as a gyro (from 1-8, 'a'-'h', 'A'-'H') "
        },
        {
          "name": "multiplier",
          "text": "A scalar value that will be multiplied by the gyro heading value supplied by the ADI"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "multiplier",
          "type": "double",
          "typePlain": "double"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a6ee6e73d3be33d0b2f5c4bfbe37f2d4c",
      "returns": [
        "An adi_gyro_t object containing the given port, or PROS_ERR if the initialization failed. "
      ],
      "static": false,
      "strong": false,
      "summary": "Initializes a gyroscope on the given port. ",
      "title": "adi_gyro_init",
      "type": "[adi_gyro_t](namespacepros_1_1c.md#typedef-adi_gyro_t)",
      "typePlain": "adi_gyro_t",
      "url": "namespacepros_1_1c.md#function-adi_gyro_init",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_gyro_reset",
      "argsString": "(adi_gyro_t gyro)",
      "brief": "Resets the gyroscope value to zero. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_gyro_reset",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a gyro",
      "explicit": false,
      "fullname": "pros::c::adi_gyro_reset",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 674
      },
      "name": "adi_gyro_reset",
      "override": false,
      "paramList": [
        {
          "name": "gyro",
          "text": "The adi_gyro_t object for which the angle will be returned"
        }
      ],
      "params": [
        {
          "name": "gyro",
          "type": "[adi_gyro_t](namespacepros_1_1c.md#typedef-adi_gyro_t)",
          "typePlain": "adi_gyro_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a79a193e42f59415cf1f860812a7248d6",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Resets the gyroscope value to zero. ",
      "title": "adi_gyro_reset",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-adi_gyro_reset",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adi_gyro_shutdown",
      "argsString": "(adi_gyro_t gyro)",
      "brief": "Disables the gyro and voids the configuration on its port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::adi_gyro_shutdown",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a gyro",
      "explicit": false,
      "fullname": "pros::c::adi_gyro_shutdown",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/adi.h",
        "line": 690
      },
      "name": "adi_gyro_shutdown",
      "override": false,
      "paramList": [
        {
          "name": "gyro",
          "text": "The adi_gyro_t object to be shut down"
        }
      ],
      "params": [
        {
          "name": "gyro",
          "type": "[adi_gyro_t](namespacepros_1_1c.md#typedef-adi_gyro_t)",
          "typePlain": "adi_gyro_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a618baab8adbdec65f418f68cf98325d0",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Disables the gyro and voids the configuration on its port. ",
      "title": "adi_gyro_shutdown",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-adi_gyro_shutdown",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_abort_delay",
      "argsString": "(task_t task)",
      "brief": "Unblocks a task in the Blocked state (e.g. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool pros::c::task_abort_delay",
      "deleted": false,
      "details": "waiting for a delay, on a semaphore, etc.).\n\nSee [https://pros.cs.purdue.edu/v5/extended/multitasking.html#abort_delay](https://pros.cs.purdue.edu/v5/extended/multitasking.html#abort_delay) for details. ",
      "explicit": false,
      "fullname": "pros::c::task_abort_delay",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/apix.h",
        "line": 56
      },
      "name": "task_abort_delay",
      "override": false,
      "params": [
        {
          "name": "task",
          "type": "[task_t](namespacepros.md#typedef-task_t)",
          "typePlain": "task_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1aeace1284e382f9a8cd7734a34965770a",
      "static": false,
      "strong": false,
      "summary": "Unblocks a task in the Blocked state (e.g. ",
      "title": "task_abort_delay",
      "type": "bool",
      "typePlain": "bool",
      "url": "namespacepros_1_1c.md#function-task_abort_delay",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_notify_when_deleting",
      "argsString": "(task_t target_task, task_t task_to_notify, uint32_t value, notify_action_e_t notify_action)",
      "brief": "Notify a task when a target task is being deleted. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void pros::c::task_notify_when_deleting",
      "deleted": false,
      "details": "This function will configure the PROS kernel to call task_notify_ext(task_to_notify, value, action, NULL) when target_task is deleted.",
      "explicit": false,
      "fullname": "pros::c::task_notify_when_deleting",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/apix.h",
        "line": 75
      },
      "name": "task_notify_when_deleting",
      "override": false,
      "paramList": [
        {
          "name": "target_task",
          "text": "The task being watched for deletion "
        },
        {
          "name": "task_to_notify",
          "text": "The task to notify when target_task is deleted "
        },
        {
          "name": "value",
          "text": "The value to supply to task_notify_ext "
        },
        {
          "name": "notify_action",
          "text": "The action to supply to task_notify_ext "
        }
      ],
      "params": [
        {
          "name": "target_task",
          "type": "[task_t](namespacepros.md#typedef-task_t)",
          "typePlain": "task_t"
        },
        {
          "name": "task_to_notify",
          "type": "[task_t](namespacepros.md#typedef-task_t)",
          "typePlain": "task_t"
        },
        {
          "name": "value",
          "type": "uint32_t",
          "typePlain": "uint32_t"
        },
        {
          "name": "notify_action",
          "type": "[notify_action_e_t](namespacepros.md#enum-notify_action_e_t)",
          "typePlain": "notify_action_e_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a8e451f518ac641b2aba0dad90ba12a28",
      "static": false,
      "strong": false,
      "summary": "Notify a task when a target task is being deleted. ",
      "title": "task_notify_when_deleting",
      "type": "void",
      "typePlain": "void",
      "url": "namespacepros_1_1c.md#function-task_notify_when_deleting",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-mutex_recursive_create",
      "argsString": "(void)",
      "brief": "Creates a recursive mutex which can be locked recursively by the owner. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "mutex_t pros::c::mutex_recursive_create",
      "deleted": false,
      "details": "See [https://pros.cs.purdue.edu/v5/extended/multitasking.html#recursive_mutexes](https://pros.cs.purdue.edu/v5/extended/multitasking.html#recursive_mutexes) for details.",
      "explicit": false,
      "fullname": "pros::c::mutex_recursive_create",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/apix.h",
        "line": 87
      },
      "name": "mutex_recursive_create",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "void",
          "typePlain": "void"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a4eef1a2598a22cbf8000fe03633d0b13",
      "returns": [
        "A newly created recursive mutex. "
      ],
      "static": false,
      "strong": false,
      "summary": "Creates a recursive mutex which can be locked recursively by the owner. ",
      "title": "mutex_recursive_create",
      "type": "[mutex_t](namespacepros.md#typedef-mutex_t)",
      "typePlain": "mutex_t",
      "url": "namespacepros_1_1c.md#function-mutex_recursive_create",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-mutex_recursive_take",
      "argsString": "(mutex_t mutex, uint32_t timeout)",
      "brief": "Takes a recursive mutex. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool pros::c::mutex_recursive_take",
      "deleted": false,
      "details": "See [https://pros.cs.purdue.edu/v5/extended/multitasking.html#recursive_mutexes](https://pros.cs.purdue.edu/v5/extended/multitasking.html#recursive_mutexes) for details.",
      "explicit": false,
      "fullname": "pros::c::mutex_recursive_take",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/apix.h",
        "line": 103
      },
      "name": "mutex_recursive_take",
      "override": false,
      "paramList": [
        {
          "name": "mutex",
          "text": "A mutex handle created by mutex_recursive_create "
        },
        {
          "name": "wait_time",
          "text": "Amount of time to wait before timing out"
        }
      ],
      "params": [
        {
          "name": "mutex",
          "type": "[mutex_t](namespacepros.md#typedef-mutex_t)",
          "typePlain": "mutex_t"
        },
        {
          "name": "timeout",
          "type": "uint32_t",
          "typePlain": "uint32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a960dac0c60f0f13331f14325d56d7506",
      "returns": [
        "1 if the mutex was obtained, 0 otherwise "
      ],
      "static": false,
      "strong": false,
      "summary": "Takes a recursive mutex. ",
      "title": "mutex_recursive_take",
      "type": "bool",
      "typePlain": "bool",
      "url": "namespacepros_1_1c.md#function-mutex_recursive_take",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-mutex_recursive_give",
      "argsString": "(mutex_t mutex)",
      "brief": "Gives a recursive mutex. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool pros::c::mutex_recursive_give",
      "deleted": false,
      "details": "See [https://pros.cs.purdue.edu/v5/extended/multitasking.html#recursive_mutexes](https://pros.cs.purdue.edu/v5/extended/multitasking.html#recursive_mutexes) for details.",
      "explicit": false,
      "fullname": "pros::c::mutex_recursive_give",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/apix.h",
        "line": 117
      },
      "name": "mutex_recursive_give",
      "override": false,
      "paramList": [
        {
          "name": "mutex",
          "text": "A mutex handle created by mutex_recursive_create"
        }
      ],
      "params": [
        {
          "name": "mutex",
          "type": "[mutex_t](namespacepros.md#typedef-mutex_t)",
          "typePlain": "mutex_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a0366fbae5b45a13bb3d76ba963fde37b",
      "returns": [
        "1 if the mutex was obtained, 0 otherwise "
      ],
      "static": false,
      "strong": false,
      "summary": "Gives a recursive mutex. ",
      "title": "mutex_recursive_give",
      "type": "bool",
      "typePlain": "bool",
      "url": "namespacepros_1_1c.md#function-mutex_recursive_give",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-mutex_get_owner",
      "argsString": "(mutex_t mutex)",
      "brief": "Returns a handle to the current owner of a mutex. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "task_t pros::c::mutex_get_owner",
      "deleted": false,
      "details": "See [https://pros.cs.purdue.edu/v5/extended/multitasking.html#extra](https://pros.cs.purdue.edu/v5/extended/multitasking.html#extra) for details.",
      "explicit": false,
      "fullname": "pros::c::mutex_get_owner",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "pros/apix.h",
        "line": 131
      },
      "name": "mutex_get_owner",
      "override": false,
      "paramList": [
        {
          "name": "mutex",
          "text": "A mutex handle"
        }
      ],
      "params": [
        {
          "name": "mutex",
          "type": "[mutex_t](namespacepros.md#typedef-mutex_t)",
          "typePlain": "mutex_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a35e2514c392ad052f702c7c6a3ed5ae2",
      "returns": [
        "A handle to the current task that owns the mutex, or NULL if the mutex isn't owned. "
      ],
      "static": false,
      "strong": false,
      "summary": "Returns a handle to the current owner of a mutex. ",
      "title": "mutex_get_owner",
      "type": "[task_t](namespacepros.md#typedef-task_t)",
      "typePlain": "task_t",
      "url": "namespacepros_1_1c.md#function-mutex_get_owner",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sem_create",
      "argsString": "(uint32_t max_count, uint32_t init_count)",
      "brief": "Creates a counting sempahore. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "sem_t pros::c::sem_create",
      "deleted": false,
      "details": "See [https://pros.cs.purdue.edu/v5/tutorials/multitasking.html#semaphores](https://pros.cs.purdue.edu/v5/tutorials/multitasking.html#semaphores) for details.",
      "explicit": false,
      "fullname": "pros::c::sem_create",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 7,
        "file": "pros/apix.h",
        "line": 147
      },
      "name": "sem_create",
      "override": false,
      "paramList": [
        {
          "name": "max_count",
          "text": "The maximum count value that can be reached. "
        },
        {
          "name": "init_count",
          "text": "The initial count value assigned to the new semaphore."
        }
      ],
      "params": [
        {
          "name": "max_count",
          "type": "uint32_t",
          "typePlain": "uint32_t"
        },
        {
          "name": "init_count",
          "type": "uint32_t",
          "typePlain": "uint32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a5a6c741414670ea06a33a740e00a6fb6",
      "returns": [
        "A newly created semaphore. If an error occurred, NULL will be returned and errno can be checked for hints as to why sem_create failed. "
      ],
      "static": false,
      "strong": false,
      "summary": "Creates a counting sempahore. ",
      "title": "sem_create",
      "type": "[sem_t](namespacepros_1_1c.md#typedef-sem_t)",
      "typePlain": "sem_t",
      "url": "namespacepros_1_1c.md#function-sem_create",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sem_delete",
      "argsString": "(sem_t sem)",
      "brief": "Deletes a semaphore (or binary semaphore) ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void pros::c::sem_delete",
      "deleted": false,
      "details": "See [https://pros.cs.purdue.edu/v5/extended/multitasking.html#semaphores](https://pros.cs.purdue.edu/v5/extended/multitasking.html#semaphores) for details.",
      "explicit": false,
      "fullname": "pros::c::sem_delete",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/apix.h",
        "line": 158
      },
      "name": "sem_delete",
      "override": false,
      "paramList": [
        {
          "name": "sem",
          "text": "Semaphore to delete "
        }
      ],
      "params": [
        {
          "name": "sem",
          "type": "[sem_t](namespacepros_1_1c.md#typedef-sem_t)",
          "typePlain": "sem_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ab5d0d18da11c1a8787a22def530943ae",
      "static": false,
      "strong": false,
      "summary": "Deletes a semaphore (or binary semaphore) ",
      "title": "sem_delete",
      "type": "void",
      "typePlain": "void",
      "url": "namespacepros_1_1c.md#function-sem_delete",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sem_binary_create",
      "argsString": "(void)",
      "brief": "Creates a binary semaphore. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "sem_t pros::c::sem_binary_create",
      "deleted": false,
      "details": "See [https://pros.cs.purdue.edu/v5/extended/multitasking#.htmlbinary_semaphores](https://pros.cs.purdue.edu/v5/extended/multitasking#.htmlbinary_semaphores) for details.",
      "explicit": false,
      "fullname": "pros::c::sem_binary_create",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 7,
        "file": "pros/apix.h",
        "line": 169
      },
      "name": "sem_binary_create",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "void",
          "typePlain": "void"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ab60398e0ab4ac65a8556dbf67907ad64",
      "returns": [
        "A newly created semaphore. "
      ],
      "static": false,
      "strong": false,
      "summary": "Creates a binary semaphore. ",
      "title": "sem_binary_create",
      "type": "[sem_t](namespacepros_1_1c.md#typedef-sem_t)",
      "typePlain": "sem_t",
      "url": "namespacepros_1_1c.md#function-sem_binary_create",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sem_wait",
      "argsString": "(sem_t sem, uint32_t timeout)",
      "brief": "Waits for the semaphore's value to be greater than 0. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool pros::c::sem_wait",
      "deleted": false,
      "details": "If the value is already greater than 0, this function immediately returns.\n\nSee [https://pros.cs.purdue.edu/v5/tutorials/multitasking.html#semaphores](https://pros.cs.purdue.edu/v5/tutorials/multitasking.html#semaphores) for details.",
      "explicit": false,
      "fullname": "pros::c::sem_wait",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/apix.h",
        "line": 189
      },
      "name": "sem_wait",
      "override": false,
      "paramList": [
        {
          "name": "sem",
          "text": "Semaphore to wait on "
        },
        {
          "name": "timeout",
          "text": "Time to wait before the semaphore's becomes available. A timeout of 0 can be used to poll the sempahore. TIMEOUT_MAX can be used to block indefinitely."
        }
      ],
      "params": [
        {
          "name": "sem",
          "type": "[sem_t](namespacepros_1_1c.md#typedef-sem_t)",
          "typePlain": "sem_t"
        },
        {
          "name": "timeout",
          "type": "uint32_t",
          "typePlain": "uint32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a29a092d6f1b15aed15a76a79b027ab89",
      "returns": [
        "True if the semaphore was successfully take, false otherwise. If false is returned, then errno is set with a hint about why the sempahore couldn't be taken. "
      ],
      "static": false,
      "strong": false,
      "summary": "Waits for the semaphore's value to be greater than 0. ",
      "title": "sem_wait",
      "type": "bool",
      "typePlain": "bool",
      "url": "namespacepros_1_1c.md#function-sem_wait",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sem_post",
      "argsString": "(sem_t sem)",
      "brief": "Increments a semaphore's value. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool pros::c::sem_post",
      "deleted": false,
      "details": "See [https://pros.cs.purdue.edu/v5/tutorials/multitasking.html#semaphores](https://pros.cs.purdue.edu/v5/tutorials/multitasking.html#semaphores) for details.",
      "explicit": false,
      "fullname": "pros::c::sem_post",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/apix.h",
        "line": 204
      },
      "name": "sem_post",
      "override": false,
      "paramList": [
        {
          "name": "sem",
          "text": "Semaphore to post"
        }
      ],
      "params": [
        {
          "name": "sem",
          "type": "[sem_t](namespacepros_1_1c.md#typedef-sem_t)",
          "typePlain": "sem_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a1224c0d9b29e68b15971b90d2fdb6f98",
      "returns": [
        "True if the value was incremented, false otherwise. If false is returned, then errno is set with a hint about why the semaphore couldn't be taken. "
      ],
      "static": false,
      "strong": false,
      "summary": "Increments a semaphore's value. ",
      "title": "sem_post",
      "type": "bool",
      "typePlain": "bool",
      "url": "namespacepros_1_1c.md#function-sem_post",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sem_get_count",
      "argsString": "(sem_t sem)",
      "brief": "Returns the current value of the semaphore. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "uint32_t pros::c::sem_get_count",
      "deleted": false,
      "details": "See [https://pros.cs.purdue.edu/v5/extended/multitasking.html#extra](https://pros.cs.purdue.edu/v5/extended/multitasking.html#extra) for details.",
      "explicit": false,
      "fullname": "pros::c::sem_get_count",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 10,
        "file": "pros/apix.h",
        "line": 218
      },
      "name": "sem_get_count",
      "override": false,
      "paramList": [
        {
          "name": "sem",
          "text": "A semaphore handle"
        }
      ],
      "params": [
        {
          "name": "sem",
          "type": "[sem_t](namespacepros_1_1c.md#typedef-sem_t)",
          "typePlain": "sem_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ae41c284e8d4047254e20c4d5f41a6d5a",
      "returns": [
        "The current value of the semaphore (e.g. the number of resources available) "
      ],
      "static": false,
      "strong": false,
      "summary": "Returns the current value of the semaphore. ",
      "title": "sem_get_count",
      "type": "uint32_t",
      "typePlain": "uint32_t",
      "url": "namespacepros_1_1c.md#function-sem_get_count",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-queue_create",
      "argsString": "(uint32_t length, uint32_t item_size)",
      "brief": "Creates a queue. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "queue_t pros::c::queue_create",
      "deleted": false,
      "details": "See [https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues](https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues) for details.",
      "explicit": false,
      "fullname": "pros::c::queue_create",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/apix.h",
        "line": 234
      },
      "name": "queue_create",
      "override": false,
      "paramList": [
        {
          "name": "length",
          "text": "The maximum number of items that the queue can contain. "
        },
        {
          "name": "item_size",
          "text": "The number of bytes each item in the queue will require."
        }
      ],
      "params": [
        {
          "name": "length",
          "type": "uint32_t",
          "typePlain": "uint32_t"
        },
        {
          "name": "item_size",
          "type": "uint32_t",
          "typePlain": "uint32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ae60412052d83e6c9b62ff02398547518",
      "returns": [
        "A handle to a newly created queue, or NULL if the queue cannot be created. "
      ],
      "static": false,
      "strong": false,
      "summary": "Creates a queue. ",
      "title": "queue_create",
      "type": "[queue_t](namespacepros_1_1c.md#typedef-queue_t)",
      "typePlain": "queue_t",
      "url": "namespacepros_1_1c.md#function-queue_create",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-queue_prepend",
      "argsString": "(queue_t queue, const void *item, uint32_t timeout)",
      "brief": "Posts an item to the front of a queue. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool pros::c::queue_prepend",
      "deleted": false,
      "details": "The item is queued by copy, not by reference.\n\nSee [https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues](https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues) for details.",
      "explicit": false,
      "fullname": "pros::c::queue_prepend",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/apix.h",
        "line": 254
      },
      "name": "queue_prepend",
      "override": false,
      "paramList": [
        {
          "name": "queue",
          "text": "The queue handle "
        },
        {
          "name": "item",
          "text": "A pointer to the item that will be placed on the queue. "
        },
        {
          "name": "timeout",
          "text": "Time to wait for space to become available. A timeout of 0 can be used to attempt to post without blocking. TIMEOUT_MAX can be used to block indefinitely."
        }
      ],
      "params": [
        {
          "name": "queue",
          "type": "[queue_t](namespacepros_1_1c.md#typedef-queue_t)",
          "typePlain": "queue_t"
        },
        {
          "name": "item",
          "type": "const void *",
          "typePlain": "const void *"
        },
        {
          "name": "timeout",
          "type": "uint32_t",
          "typePlain": "uint32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1af9cc8a3a8c3ce36dcd31ead2a0c3f4cf",
      "returns": [
        "True if the item was preprended, false otherwise. "
      ],
      "static": false,
      "strong": false,
      "summary": "Posts an item to the front of a queue. ",
      "title": "queue_prepend",
      "type": "bool",
      "typePlain": "bool",
      "url": "namespacepros_1_1c.md#function-queue_prepend",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-queue_append",
      "argsString": "(queue_t queue, const void *item, uint32_t timeout)",
      "brief": "Posts an item to the end of a queue. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool pros::c::queue_append",
      "deleted": false,
      "details": "The item is queued by copy, not by reference.\n\nSee [https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues](https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues) for details.",
      "explicit": false,
      "fullname": "pros::c::queue_append",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/apix.h",
        "line": 274
      },
      "name": "queue_append",
      "override": false,
      "paramList": [
        {
          "name": "queue",
          "text": "The queue handle "
        },
        {
          "name": "item",
          "text": "A pointer to the item that will be placed on the queue. "
        },
        {
          "name": "timeout",
          "text": "Time to wait for space to become available. A timeout of 0 can be used to attempt to post without blocking. TIMEOUT_MAX can be used to block indefinitely."
        }
      ],
      "params": [
        {
          "name": "queue",
          "type": "[queue_t](namespacepros_1_1c.md#typedef-queue_t)",
          "typePlain": "queue_t"
        },
        {
          "name": "item",
          "type": "const void *",
          "typePlain": "const void *"
        },
        {
          "name": "timeout",
          "type": "uint32_t",
          "typePlain": "uint32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1aa42af929135978ccfd393931ec464980",
      "returns": [
        "True if the item was preprended, false otherwise. "
      ],
      "static": false,
      "strong": false,
      "summary": "Posts an item to the end of a queue. ",
      "title": "queue_append",
      "type": "bool",
      "typePlain": "bool",
      "url": "namespacepros_1_1c.md#function-queue_append",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-queue_peek",
      "argsString": "(queue_t queue, void *const buffer, uint32_t timeout)",
      "brief": "Receive an item from a queue without removing the item from the queue. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool pros::c::queue_peek",
      "deleted": false,
      "details": "See [https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues](https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues) for details.",
      "explicit": false,
      "fullname": "pros::c::queue_peek",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/apix.h",
        "line": 292
      },
      "name": "queue_peek",
      "override": false,
      "paramList": [
        {
          "name": "queue",
          "text": "The queue handle "
        },
        {
          "name": "buffer",
          "text": "Pointer to a buffer to which the received item will be copied "
        },
        {
          "name": "timeout",
          "text": "The maximum amount of time the task should block waiting for an item to receive should the queue be empty at the time of the call. TIMEOUT_MAX can be used to block indefinitely."
        }
      ],
      "params": [
        {
          "name": "queue",
          "type": "[queue_t](namespacepros_1_1c.md#typedef-queue_t)",
          "typePlain": "queue_t"
        },
        {
          "name": "buffer",
          "type": "void *const",
          "typePlain": "void *const"
        },
        {
          "name": "timeout",
          "type": "uint32_t",
          "typePlain": "uint32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1af9b0095a2b8ba4e68b45cebb7105af34",
      "returns": [
        "True if an item was copied into the buffer, false otherwise. "
      ],
      "static": false,
      "strong": false,
      "summary": "Receive an item from a queue without removing the item from the queue. ",
      "title": "queue_peek",
      "type": "bool",
      "typePlain": "bool",
      "url": "namespacepros_1_1c.md#function-queue_peek",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-queue_recv",
      "argsString": "(queue_t queue, void *const buffer, uint32_t timeout)",
      "brief": "Receive an item from the queue. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool pros::c::queue_recv",
      "deleted": false,
      "details": "See [https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues](https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues) for details.",
      "explicit": false,
      "fullname": "pros::c::queue_recv",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/apix.h",
        "line": 312
      },
      "name": "queue_recv",
      "override": false,
      "paramList": [
        {
          "name": "queue",
          "text": "The queue handle "
        },
        {
          "name": "buffer",
          "text": "Pointer to a buffer to which the received item will be copied "
        },
        {
          "name": "timeout",
          "text": "The maximum amount of time the task should block waiting for an item to receive should the queue be empty at the time of the call. [queue_recv()](namespacepros_1_1c.md#function-queue_recv) will return immediately if timeout is zero and the queue is empty."
        }
      ],
      "params": [
        {
          "name": "queue",
          "type": "[queue_t](namespacepros_1_1c.md#typedef-queue_t)",
          "typePlain": "queue_t"
        },
        {
          "name": "buffer",
          "type": "void *const",
          "typePlain": "void *const"
        },
        {
          "name": "timeout",
          "type": "uint32_t",
          "typePlain": "uint32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a8f80179b408b88dcc17e472816fa89d6",
      "returns": [
        "True if an item was copied into the buffer, false otherwise. "
      ],
      "static": false,
      "strong": false,
      "summary": "Receive an item from the queue. ",
      "title": "queue_recv",
      "type": "bool",
      "typePlain": "bool",
      "url": "namespacepros_1_1c.md#function-queue_recv",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-queue_get_waiting",
      "argsString": "(const queue_t queue)",
      "brief": "Return the number of messages stored in a queue. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "uint32_t pros::c::queue_get_waiting",
      "deleted": false,
      "details": "See [https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues](https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues) for details.",
      "explicit": false,
      "fullname": "pros::c::queue_get_waiting",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 10,
        "file": "pros/apix.h",
        "line": 325
      },
      "name": "queue_get_waiting",
      "override": false,
      "paramList": [
        {
          "name": "queue",
          "text": "The queue handle."
        }
      ],
      "params": [
        {
          "name": "queue",
          "type": "const [queue_t](namespacepros_1_1c.md#typedef-queue_t)",
          "typePlain": "const queue_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a96ad85640c15b62c066ed406be70970b",
      "returns": [
        "The number of messages available in the queue. "
      ],
      "static": false,
      "strong": false,
      "summary": "Return the number of messages stored in a queue. ",
      "title": "queue_get_waiting",
      "type": "uint32_t",
      "typePlain": "uint32_t",
      "url": "namespacepros_1_1c.md#function-queue_get_waiting",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-queue_get_available",
      "argsString": "(const queue_t queue)",
      "brief": "Return the number of spaces left in a queue. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "uint32_t pros::c::queue_get_available",
      "deleted": false,
      "details": "See [https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues](https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues) for details.",
      "explicit": false,
      "fullname": "pros::c::queue_get_available",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 10,
        "file": "pros/apix.h",
        "line": 338
      },
      "name": "queue_get_available",
      "override": false,
      "paramList": [
        {
          "name": "queue",
          "text": "The queue handle."
        }
      ],
      "params": [
        {
          "name": "queue",
          "type": "const [queue_t](namespacepros_1_1c.md#typedef-queue_t)",
          "typePlain": "const queue_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a1b26a8014aaedc3b376c0a2ec3cfc42a",
      "returns": [
        "The number of spaces available in the queue. "
      ],
      "static": false,
      "strong": false,
      "summary": "Return the number of spaces left in a queue. ",
      "title": "queue_get_available",
      "type": "uint32_t",
      "typePlain": "uint32_t",
      "url": "namespacepros_1_1c.md#function-queue_get_available",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-queue_delete",
      "argsString": "(queue_t queue)",
      "brief": "Delete a queue. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void pros::c::queue_delete",
      "deleted": false,
      "details": "See [https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues](https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues) for details.",
      "explicit": false,
      "fullname": "pros::c::queue_delete",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/apix.h",
        "line": 349
      },
      "name": "queue_delete",
      "override": false,
      "paramList": [
        {
          "name": "queue",
          "text": "Queue handle to delete "
        }
      ],
      "params": [
        {
          "name": "queue",
          "type": "[queue_t](namespacepros_1_1c.md#typedef-queue_t)",
          "typePlain": "queue_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a9d976079962026303ca54ec5b6b56ee8",
      "static": false,
      "strong": false,
      "summary": "Delete a queue. ",
      "title": "queue_delete",
      "type": "void",
      "typePlain": "void",
      "url": "namespacepros_1_1c.md#function-queue_delete",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-queue_reset",
      "argsString": "(queue_t queue)",
      "brief": "Resets a queue to an empty state. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void pros::c::queue_reset",
      "deleted": false,
      "explicit": false,
      "fullname": "pros::c::queue_reset",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/apix.h",
        "line": 357
      },
      "name": "queue_reset",
      "override": false,
      "paramList": [
        {
          "name": "queue",
          "text": "Queue handle to reset "
        }
      ],
      "params": [
        {
          "name": "queue",
          "type": "[queue_t](namespacepros_1_1c.md#typedef-queue_t)",
          "typePlain": "queue_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a65b42a22f90764318ef6ed0f13eeda42",
      "static": false,
      "strong": false,
      "summary": "Resets a queue to an empty state. ",
      "title": "queue_reset",
      "type": "void",
      "typePlain": "void",
      "url": "namespacepros_1_1c.md#function-queue_reset",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-registry_bind_port",
      "argsString": "(uint8_t port, v5_device_e_t device_type)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int pros::c::registry_bind_port",
      "deleted": false,
      "explicit": false,
      "fullname": "pros::c::registry_bind_port",
      "hasDetails": false,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 5,
        "file": "pros/apix.h",
        "line": 399
      },
      "name": "registry_bind_port",
      "override": false,
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "device_type",
          "type": "v5_device_e_t",
          "typePlain": "v5_device_e_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a553905fad6df994d7e2ede7cf53b9f83",
      "static": false,
      "strong": false,
      "title": "registry_bind_port",
      "type": "int",
      "typePlain": "int",
      "url": "namespacepros_1_1c.md#function-registry_bind_port",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-registry_unbind_port",
      "argsString": "(uint8_t port)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int pros::c::registry_unbind_port",
      "deleted": false,
      "explicit": false,
      "fullname": "pros::c::registry_unbind_port",
      "hasDetails": false,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 5,
        "file": "pros/apix.h",
        "line": 415
      },
      "name": "registry_unbind_port",
      "override": false,
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1aac4da3ecf327e9d3b68283735650274f",
      "static": false,
      "strong": false,
      "title": "registry_unbind_port",
      "type": "int",
      "typePlain": "int",
      "url": "namespacepros_1_1c.md#function-registry_unbind_port",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-serctl",
      "argsString": "(const uint32_t action, void *const extra_arg)",
      "brief": "Filesystem ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::serctl",
      "deleted": false,
      "details": "Control settings of the serial driver.",
      "explicit": false,
      "fullname": "pros::c::serctl",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/apix.h",
        "line": 429
      },
      "name": "serctl",
      "override": false,
      "paramList": [
        {
          "name": "action",
          "text": "An action to perform on the serial driver. See the SERCTL_* macros for details on the different actions. "
        },
        {
          "name": "extra_arg",
          "text": "An argument to pass in based on the action "
        }
      ],
      "params": [
        {
          "name": "action",
          "type": "const uint32_t",
          "typePlain": "const uint32_t"
        },
        {
          "name": "extra_arg",
          "type": "void *const",
          "typePlain": "void *const"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a16d6c8a8a74f8445db83bedbcb2f35bd",
      "static": false,
      "strong": false,
      "summary": "Filesystem ",
      "title": "serctl",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-serctl",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-fdctl",
      "argsString": "(int file, const uint32_t action, void *const extra_arg)",
      "brief": "Control settings of the microSD card driver. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::fdctl",
      "deleted": false,
      "explicit": false,
      "fullname": "pros::c::fdctl",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/apix.h",
        "line": 456
      },
      "name": "fdctl",
      "override": false,
      "paramList": [
        {
          "name": "action",
          "text": "An action to perform on the microSD card driver. See the USDCTL_* macros for details on the different actions. "
        },
        {
          "name": "extra_arg",
          "text": "An argument to pass in based on the action Control settings of the way the file's driver treats the file"
        },
        {
          "name": "file",
          "text": "A valid file descriptor number "
        },
        {
          "name": "action",
          "text": "An action to perform on the file's driver. See the _CTL__ macros for details on the different actions. Note that the action passed in must match the correct driver (e.g. don't perform a SERCTL_* action on a microSD card file) "
        },
        {
          "name": "extra_arg",
          "text": "An argument to pass in based on the action "
        }
      ],
      "params": [
        {
          "name": "file",
          "type": "int",
          "typePlain": "int"
        },
        {
          "name": "action",
          "type": "const uint32_t",
          "typePlain": "const uint32_t"
        },
        {
          "name": "extra_arg",
          "type": "void *const",
          "typePlain": "void *const"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a01b62747fbed77dcd50879d4d557adfd",
      "static": false,
      "strong": false,
      "summary": "Control settings of the microSD card driver. ",
      "title": "fdctl",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-fdctl",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_port_get_config",
      "argsString": "(uint8_t smart_port, uint8_t adi_port)",
      "brief": "General ADI Use Functions ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "adi_port_config_e_t pros::c::ext_adi_port_get_config",
      "deleted": false,
      "details": "These functions allow for interaction with any ADI port type \n\n Gets the configuration for the given ADI port.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).",
      "explicit": false,
      "fullname": "pros::c::ext_adi_port_get_config",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 21,
        "file": "pros/ext_adi.h",
        "line": 61
      },
      "name": "ext_adi_port_get_config",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port",
          "text": "The ADI port number (from 1-8, 'a'-'h', 'A'-'H') for which to return the configuration"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a529d923cac85867a1fc20e1b385bb8b2",
      "returns": [
        "The ADI configuration for the given port "
      ],
      "static": false,
      "strong": false,
      "summary": "General ADI Use Functions ",
      "title": "ext_adi_port_get_config",
      "type": "adi_port_config_e_t",
      "typePlain": "adi_port_config_e_t",
      "url": "namespacepros_1_1c.md#function-ext_adi_port_get_config",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_port_get_value",
      "argsString": "(uint8_t smart_port, uint8_t adi_port)",
      "brief": "Gets the value for the given ADI port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_port_get_value",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).",
      "explicit": false,
      "fullname": "pros::c::ext_adi_port_get_value",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 79
      },
      "name": "ext_adi_port_get_value",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port",
          "text": "The ADI port number (from 1-8, 'a'-'h', 'A'-'H') for which to return the configuration"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a69502c412a1939551aab0f764ef14ebe",
      "returns": [
        "The value stored for the given port "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the value for the given ADI port. ",
      "title": "ext_adi_port_get_value",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-ext_adi_port_get_value",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_port_set_config",
      "argsString": "(uint8_t smart_port, uint8_t adi_port, adi_port_config_e_t type)",
      "brief": "Configures an ADI port to act as a given sensor type. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_port_set_config",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).",
      "explicit": false,
      "fullname": "pros::c::ext_adi_port_set_config",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 99
      },
      "name": "ext_adi_port_set_config",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port",
          "text": "The ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure "
        },
        {
          "name": "type",
          "text": "The configuration type for the port"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "type",
          "type": "adi_port_config_e_t",
          "typePlain": "adi_port_config_e_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a0a0ac030c3de3ac6374ef6c5ca9e4bc3",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Configures an ADI port to act as a given sensor type. ",
      "title": "ext_adi_port_set_config",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-ext_adi_port_set_config",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_port_set_value",
      "argsString": "(uint8_t smart_port, uint8_t adi_port, int32_t value)",
      "brief": "Sets the value for the given ADI port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_port_set_value",
      "deleted": false,
      "details": "This only works on ports configured as outputs, and the behavior will change depending on the configuration of the port.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).",
      "explicit": false,
      "fullname": "pros::c::ext_adi_port_set_value",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 123
      },
      "name": "ext_adi_port_set_value",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port",
          "text": "The ADI port number (from 1-8, 'a'-'h', 'A'-'H') for which the value will be set "
        },
        {
          "name": "value",
          "text": "The value to set the ADI port to"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "value",
          "type": "int32_t",
          "typePlain": "int32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a66bcb742f80b237401eebce4e6f509e8",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets the value for the given ADI port. ",
      "title": "ext_adi_port_set_value",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-ext_adi_port_set_value",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_analog_calibrate",
      "argsString": "(uint8_t smart_port, uint8_t adi_port)",
      "brief": "Calibrates the analog sensor on the specified port and returns the new calibration value. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_analog_calibrate",
      "deleted": false,
      "details": "This method assumes that the true sensor value is not actively changing at this time and computes an average from approximately 500 samples, 1 ms apart, for a 0.5 s period of calibration. The average value thus calculated is returned and stored for later calls to the [adi_analog_read_calibrated()](namespacepros_1_1c.md#function-adi_analog_read_calibrated) and [adi_analog_read_calibrated_HR()](namespacepros_1_1c.md#function-adi_analog_read_calibrated_hr) functions. These functions will return the difference between this value and the current sensor value when called.\n\nDo not use this function when the sensor value might be unstable (gyro rotation, accelerometer movement).\n\nThis function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).",
      "explicit": false,
      "fullname": "pros::c::ext_adi_analog_calibrate",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 151
      },
      "name": "ext_adi_analog_calibrate",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port",
          "text": "The ADI port to calibrate (from 1-8, 'a'-'h', 'A'-'H')"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ac7ce5918ef247fbfbebadb8b87417ced",
      "returns": [
        "The average sensor value computed by this function "
      ],
      "static": false,
      "strong": false,
      "summary": "Calibrates the analog sensor on the specified port and returns the new calibration value. ",
      "title": "ext_adi_analog_calibrate",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-ext_adi_analog_calibrate",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_analog_read",
      "argsString": "(uint8_t smart_port, uint8_t adi_port)",
      "brief": "Gets the 12-bit value of the specified port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_analog_read",
      "deleted": false,
      "details": "The value returned is undefined if the analog pin has been switched to a different mode.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as an analog input",
      "explicit": false,
      "fullname": "pros::c::ext_adi_analog_read",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 174
      },
      "name": "ext_adi_analog_read",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port",
          "text": "The ADI port (from 1-8, 'a'-'h', 'A'-'H') for which the value will be returned"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ad23c527e73c2008d5bf49030efa255ef",
      "returns": [
        "The analog sensor value, where a value of 0 reflects an input voltage of nearly 0 V and a value of 4095 reflects an input voltage of nearly 5 V "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the 12-bit value of the specified port. ",
      "title": "ext_adi_analog_read",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-ext_adi_analog_read",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_analog_read_calibrated",
      "argsString": "(uint8_t smart_port, uint8_t adi_port)",
      "brief": "Gets the 12 bit calibrated value of an analog input port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_analog_read_calibrated",
      "deleted": false,
      "details": "The [adi_analog_calibrate()](namespacepros_1_1c.md#function-adi_analog_calibrate) function must be run first. This function is inappropriate for sensor values intended for integration, as round-off error can accumulate causing drift over time. Use [adi_analog_read_calibrated_HR()](namespacepros_1_1c.md#function-adi_analog_read_calibrated_hr) instead.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as an analog input",
      "explicit": false,
      "fullname": "pros::c::ext_adi_analog_read_calibrated",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 199
      },
      "name": "ext_adi_analog_read_calibrated",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port",
          "text": "The ADI port (from 1-8, 'a'-'h', 'A'-'H') for which the value will be returned"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a2dd9e7a9e761ed80088bcf7f44920a42",
      "returns": [
        "The difference of the sensor value from its calibrated default from -4095 to 4095 "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the 12 bit calibrated value of an analog input port. ",
      "title": "ext_adi_analog_read_calibrated",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-ext_adi_analog_read_calibrated",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_analog_read_calibrated_hr",
      "argsString": "(uint8_t smart_port, uint8_t adi_port)",
      "brief": "Gets the 16 bit calibrated value of an analog input port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_analog_read_calibrated_HR",
      "deleted": false,
      "details": "The [adi_analog_calibrate()](namespacepros_1_1c.md#function-adi_analog_calibrate) function must be run first. This is intended for integrated sensor values such as gyros and accelerometers to reduce drift due to round-off, and should not be used on a sensor such as a line tracker or potentiometer.\n\nThe value returned actually has 16 bits of \"precision\", even though the ADC only reads 12 bits, so that error induced by the average value being between two values when integrated over time is trivial. Think of the value as the true value times 16.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as an analog input",
      "explicit": false,
      "fullname": "pros::c::ext_adi_analog_read_calibrated_HR",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 229
      },
      "name": "ext_adi_analog_read_calibrated_HR",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port",
          "text": "The ADI port (from 1-8, 'a'-'h', 'A'-'H') for which the value will be returned"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a4e1d85f2e166adf83743b9fde5c504e8",
      "returns": [
        "The difference of the sensor value from its calibrated default from -16384 to 16384 "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the 16 bit calibrated value of an analog input port. ",
      "title": "ext_adi_analog_read_calibrated_HR",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-ext_adi_analog_read_calibrated_hr",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_digital_read",
      "argsString": "(uint8_t smart_port, uint8_t adi_port)",
      "brief": "Gets the digital value (1 or 0) of a port configured as a digital input. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_digital_read",
      "deleted": false,
      "details": "If the port is configured as some other mode, the digital value which reflects the current state of the port is returned, which may or may not differ from the currently set value. The return value is undefined for ports configured as any mode other than a Digital Input.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as a digital input",
      "explicit": false,
      "fullname": "pros::c::ext_adi_digital_read",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 252
      },
      "name": "ext_adi_digital_read",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port",
          "text": "The ADI port to read (from 1-8, 'a'-'h', 'A'-'H')"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ad030dfc04f9d5adb0861f940472974f0",
      "returns": [
        "True if the pin is HIGH, or false if it is LOW "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the digital value (1 or 0) of a port configured as a digital input. ",
      "title": "ext_adi_digital_read",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-ext_adi_digital_read",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_digital_get_new_press",
      "argsString": "(uint8_t smart_port, uint8_t adi_port)",
      "brief": "Gets a rising-edge case for a digital button press. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_digital_get_new_press",
      "deleted": false,
      "details": "This function is not thread-safe. Multiple tasks polling a single button may return different results under the same circumstances, so only one task should call this function for any given button. E.g., [Task](classpros_1_1Task.md) A calls this function for buttons 1 and 2. [Task](classpros_1_1Task.md) B may call this function for button 3, but should not for buttons 1 or 2. A typical use-case for this function is to call inside opcontrol to detect new button presses, and not in any other tasks.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as a digital input",
      "explicit": false,
      "fullname": "pros::c::ext_adi_digital_get_new_press",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 279
      },
      "name": "ext_adi_digital_get_new_press",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port",
          "text": "The ADI port to read (from 1-8, 'a'-'h', 'A'-'H')"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ac5b25457c1f1277dd545b6fab326299c",
      "returns": [
        "1 if the button is pressed and had not been pressed the last time this function was called, 0 otherwise. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets a rising-edge case for a digital button press. ",
      "title": "ext_adi_digital_get_new_press",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-ext_adi_digital_get_new_press",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_digital_write",
      "argsString": "(uint8_t smart_port, uint8_t adi_port, bool value)",
      "brief": "Sets the digital value (1 or 0) of a port configured as a digital output. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_digital_write",
      "deleted": false,
      "details": "If the port is configured as some other mode, behavior is undefined.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as a digital output",
      "explicit": false,
      "fullname": "pros::c::ext_adi_digital_write",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 303
      },
      "name": "ext_adi_digital_write",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port",
          "text": "The ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure "
        },
        {
          "name": "value",
          "text": "An expression evaluating to \"true\" or \"false\" to set the output to HIGH or LOW respectively, or the constants HIGH or LOW themselves"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "value",
          "type": "bool",
          "typePlain": "bool"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a638e7d47bbdde4b545be396d4cb20eea",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets the digital value (1 or 0) of a port configured as a digital output. ",
      "title": "ext_adi_digital_write",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-ext_adi_digital_write",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_pin_mode",
      "argsString": "(uint8_t smart_port, uint8_t adi_port, uint8_t mode)",
      "brief": "Configures the port as an input or output with a variety of settings. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_pin_mode",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21).",
      "explicit": false,
      "fullname": "pros::c::ext_adi_pin_mode",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 323
      },
      "name": "ext_adi_pin_mode",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port",
          "text": "The ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure "
        },
        {
          "name": "mode",
          "text": "One of INPUT, INPUT_ANALOG, INPUT_FLOATING, OUTPUT, or OUTPUT_OD"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "mode",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1afbc569ddf47381965a0abdecfcd927bf",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Configures the port as an input or output with a variety of settings. ",
      "title": "ext_adi_pin_mode",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-ext_adi_pin_mode",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_motor_set",
      "argsString": "(uint8_t smart_port, uint8_t adi_port, int8_t speed)",
      "brief": "Sets the speed of the motor on the given port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_motor_set",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as an motor",
      "explicit": false,
      "fullname": "pros::c::ext_adi_motor_set",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 345
      },
      "name": "ext_adi_motor_set",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port",
          "text": "The ADI port number (from 1-8, 'a'-'h', 'A'-'H') to configure "
        },
        {
          "name": "speed",
          "text": "The new signed speed; -127 is full reverse and 127 is full forward, with 0 being off"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "speed",
          "type": "int8_t",
          "typePlain": "int8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a730496b89cb6864e53ade872dfbe479e",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets the speed of the motor on the given port. ",
      "title": "ext_adi_motor_set",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-ext_adi_motor_set",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_motor_get",
      "argsString": "(uint8_t smart_port, uint8_t adi_port)",
      "brief": "Gets the last set speed of the motor on the given port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_motor_get",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as an motor",
      "explicit": false,
      "fullname": "pros::c::ext_adi_motor_get",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 363
      },
      "name": "ext_adi_motor_get",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port",
          "text": "The ADI port to get (from 1-8, 'a'-'h', 'A'-'H')"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a50b5f4f2d806d8725ec6feb59a13d2b2",
      "returns": [
        "The last set speed of the motor on the given port "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the last set speed of the motor on the given port. ",
      "title": "ext_adi_motor_get",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-ext_adi_motor_get",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_motor_stop",
      "argsString": "(uint8_t smart_port, uint8_t adi_port)",
      "brief": "Stops the motor on the given port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_motor_stop",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as an motor",
      "explicit": false,
      "fullname": "pros::c::ext_adi_motor_stop",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 382
      },
      "name": "ext_adi_motor_stop",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port",
          "text": "The ADI port to set (from 1-8, 'a'-'h', 'A'-'H')"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a3bcee559e95f3f4cb64e74521b5735d6",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Stops the motor on the given port. ",
      "title": "ext_adi_motor_stop",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-ext_adi_motor_stop",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_encoder_get",
      "argsString": "(ext_adi_encoder_t enc)",
      "brief": "Gets the number of ticks recorded by the encoder. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_encoder_get",
      "deleted": false,
      "details": "There are 360 ticks in one revolution.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as an encoder",
      "explicit": false,
      "fullname": "pros::c::ext_adi_encoder_get",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 409
      },
      "name": "ext_adi_encoder_get",
      "override": false,
      "paramList": [
        {
          "name": "enc",
          "text": "The adi_encoder_t object from [adi_encoder_init()](namespacepros_1_1c.md#function-adi_encoder_init) to read"
        }
      ],
      "params": [
        {
          "name": "enc",
          "type": "[ext_adi_encoder_t](namespacepros_1_1c.md#typedef-ext_adi_encoder_t)",
          "typePlain": "ext_adi_encoder_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a63487c255370a2176334af8895ae188c",
      "returns": [
        "The signed and cumulative number of counts since the last start or reset "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the number of ticks recorded by the encoder. ",
      "title": "ext_adi_encoder_get",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-ext_adi_encoder_get",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_encoder_init",
      "argsString": "(uint8_t smart_port, uint8_t adi_port_top, uint8_t adi_port_bottom, bool reverse)",
      "brief": "Creates an encoder object and configures the specified ports accordingly. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ext_adi_encoder_t pros::c::ext_adi_encoder_init",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as an encoder",
      "explicit": false,
      "fullname": "pros::c::ext_adi_encoder_init",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 19,
        "file": "pros/ext_adi.h",
        "line": 433
      },
      "name": "ext_adi_encoder_init",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port_top",
          "text": "The \"top\" wire from the encoder sensor with the removable cover side up "
        },
        {
          "name": "adi_port_bottom",
          "text": "The \"bottom\" wire from the encoder sensor "
        },
        {
          "name": "reverse",
          "text": "If \"true\", the sensor will count in the opposite direction"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port_top",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port_bottom",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "reverse",
          "type": "bool",
          "typePlain": "bool"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ad5aecf207806976751067f9b0014d44d",
      "returns": [
        "An adi_encoder_t object to be stored and used for later calls to encoder functions "
      ],
      "static": false,
      "strong": false,
      "summary": "Creates an encoder object and configures the specified ports accordingly. ",
      "title": "ext_adi_encoder_init",
      "type": "[ext_adi_encoder_t](namespacepros_1_1c.md#typedef-ext_adi_encoder_t)",
      "typePlain": "ext_adi_encoder_t",
      "url": "namespacepros_1_1c.md#function-ext_adi_encoder_init",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_encoder_reset",
      "argsString": "(ext_adi_encoder_t enc)",
      "brief": "Sets the encoder value to zero. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_encoder_reset",
      "deleted": false,
      "details": "It is safe to use this method while an encoder is enabled. It is not necessary to call this method before stopping or starting an encoder.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as an encoder",
      "explicit": false,
      "fullname": "pros::c::ext_adi_encoder_reset",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 453
      },
      "name": "ext_adi_encoder_reset",
      "override": false,
      "paramList": [
        {
          "name": "enc",
          "text": "The adi_encoder_t object from [adi_encoder_init()](namespacepros_1_1c.md#function-adi_encoder_init) to reset"
        }
      ],
      "params": [
        {
          "name": "enc",
          "type": "[ext_adi_encoder_t](namespacepros_1_1c.md#typedef-ext_adi_encoder_t)",
          "typePlain": "ext_adi_encoder_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a8c631b2f466307d44407d3b5a1bdf021",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets the encoder value to zero. ",
      "title": "ext_adi_encoder_reset",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-ext_adi_encoder_reset",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_encoder_shutdown",
      "argsString": "(ext_adi_encoder_t enc)",
      "brief": "Disables the encoder and voids the configuration on its ports. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_encoder_shutdown",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as an encoder",
      "explicit": false,
      "fullname": "pros::c::ext_adi_encoder_shutdown",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 470
      },
      "name": "ext_adi_encoder_shutdown",
      "override": false,
      "paramList": [
        {
          "name": "enc",
          "text": "The adi_encoder_t object from [adi_encoder_init()](namespacepros_1_1c.md#function-adi_encoder_init) to stop"
        }
      ],
      "params": [
        {
          "name": "enc",
          "type": "[ext_adi_encoder_t](namespacepros_1_1c.md#typedef-ext_adi_encoder_t)",
          "typePlain": "ext_adi_encoder_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ac393c5a6907b482311b430ab0fd01464",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Disables the encoder and voids the configuration on its ports. ",
      "title": "ext_adi_encoder_shutdown",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-ext_adi_encoder_shutdown",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_ultrasonic_get",
      "argsString": "(ext_adi_ultrasonic_t ult)",
      "brief": "Gets the current ultrasonic sensor value in centimeters. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_ultrasonic_get",
      "deleted": false,
      "details": "If no object was found, zero is returned. If the ultrasonic sensor was never started, the return value is undefined. Round and fluffy objects can cause inaccurate values to be returned.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as an ultrasonic",
      "explicit": false,
      "fullname": "pros::c::ext_adi_ultrasonic_get",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 499
      },
      "name": "ext_adi_ultrasonic_get",
      "override": false,
      "paramList": [
        {
          "name": "ult",
          "text": "The adi_ultrasonic_t object from [adi_ultrasonic_init()](namespacepros_1_1c.md#function-adi_ultrasonic_init) to read"
        }
      ],
      "params": [
        {
          "name": "ult",
          "type": "[ext_adi_ultrasonic_t](namespacepros_1_1c.md#typedef-ext_adi_ultrasonic_t)",
          "typePlain": "ext_adi_ultrasonic_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a39da3e5809db13079605708f18156fb7",
      "returns": [
        "The distance to the nearest object in m^-4 (10000 indicates 1 meter), measured from the sensor's mounting points. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the current ultrasonic sensor value in centimeters. ",
      "title": "ext_adi_ultrasonic_get",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-ext_adi_ultrasonic_get",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_ultrasonic_init",
      "argsString": "(uint8_t smart_port, uint8_t adi_port_ping, uint8_t adi_port_echo)",
      "brief": "Creates an ultrasonic object and configures the specified ports accordingly. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ext_adi_ultrasonic_t pros::c::ext_adi_ultrasonic_init",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as an ultrasonic",
      "explicit": false,
      "fullname": "pros::c::ext_adi_ultrasonic_init",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 22,
        "file": "pros/ext_adi.h",
        "line": 522
      },
      "name": "ext_adi_ultrasonic_init",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port_ping",
          "text": "The port connected to the orange OUTPUT cable. This should be in port 1, 3, 5, or 7 ('A', 'C', 'E', 'G'). "
        },
        {
          "name": "adi_port_echo",
          "text": "The port connected to the yellow INPUT cable. This should be in the next highest port following port_ping."
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port_ping",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port_echo",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1aa9c9828dbd73694315c1b1cf5cdb59d8",
      "returns": [
        "An adi_ultrasonic_t object to be stored and used for later calls to ultrasonic functions "
      ],
      "static": false,
      "strong": false,
      "summary": "Creates an ultrasonic object and configures the specified ports accordingly. ",
      "title": "ext_adi_ultrasonic_init",
      "type": "[ext_adi_ultrasonic_t](namespacepros_1_1c.md#typedef-ext_adi_ultrasonic_t)",
      "typePlain": "ext_adi_ultrasonic_t",
      "url": "namespacepros_1_1c.md#function-ext_adi_ultrasonic_init",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_ultrasonic_shutdown",
      "argsString": "(ext_adi_ultrasonic_t ult)",
      "brief": "Disables the ultrasonic sensor and voids the configuration on its ports. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_ultrasonic_shutdown",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as an ultrasonic",
      "explicit": false,
      "fullname": "pros::c::ext_adi_ultrasonic_shutdown",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 539
      },
      "name": "ext_adi_ultrasonic_shutdown",
      "override": false,
      "paramList": [
        {
          "name": "ult",
          "text": "The adi_ultrasonic_t object from [adi_ultrasonic_init()](namespacepros_1_1c.md#function-adi_ultrasonic_init) to stop"
        }
      ],
      "params": [
        {
          "name": "ult",
          "type": "[ext_adi_ultrasonic_t](namespacepros_1_1c.md#typedef-ext_adi_ultrasonic_t)",
          "typePlain": "ext_adi_ultrasonic_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a43715ce7b1d8b4b2b3d09f2a04c14c0d",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Disables the ultrasonic sensor and voids the configuration on its ports. ",
      "title": "ext_adi_ultrasonic_shutdown",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-ext_adi_ultrasonic_shutdown",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_gyro_get",
      "argsString": "(ext_adi_gyro_t gyro)",
      "brief": "Gets the current gyro angle in tenths of a degree. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "double pros::c::ext_adi_gyro_get",
      "deleted": false,
      "details": "Unless a multiplier is applied to the gyro, the return value will be a whole number representing the number of degrees of rotation times 10.\n\nThere are 360 degrees in a circle, thus the gyro will return 3600 for one whole rotation.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as a gyro",
      "explicit": false,
      "fullname": "pros::c::ext_adi_gyro_get",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "pros/ext_adi.h",
        "line": 570
      },
      "name": "ext_adi_gyro_get",
      "override": false,
      "paramList": [
        {
          "name": "gyro",
          "text": "The adi_gyro_t object for which the angle will be returned"
        }
      ],
      "params": [
        {
          "name": "gyro",
          "type": "[ext_adi_gyro_t](namespacepros_1_1c.md#typedef-ext_adi_gyro_t)",
          "typePlain": "ext_adi_gyro_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a0d75771553832ae16e7b45833fb095fd",
      "returns": [
        "The gyro angle in degrees. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the current gyro angle in tenths of a degree. ",
      "title": "ext_adi_gyro_get",
      "type": "double",
      "typePlain": "double",
      "url": "namespacepros_1_1c.md#function-ext_adi_gyro_get",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_gyro_init",
      "argsString": "(uint8_t smart_port, uint8_t adi_port, double multiplier)",
      "brief": "Initializes a gyroscope on the given port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ext_adi_gyro_t pros::c::ext_adi_gyro_init",
      "deleted": false,
      "details": "If the given port has not previously been configured as a gyro, then this function starts a 1300 ms calibration period.\n\nIt is highly recommended that this function be called from [initialize()](main_8h.md#function-initialize) when the robot is stationary to ensure proper calibration.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as a gyro",
      "explicit": false,
      "fullname": "pros::c::ext_adi_gyro_init",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 16,
        "file": "pros/ext_adi.h",
        "line": 597
      },
      "name": "ext_adi_gyro_init",
      "override": false,
      "paramList": [
        {
          "name": "smart_port",
          "text": "The smart port number that the ADI Expander is in "
        },
        {
          "name": "adi_port",
          "text": "The ADI port to initialize as a gyro (from 1-8, 'a'-'h', 'A'-'H') "
        },
        {
          "name": "multiplier",
          "text": "A scalar value that will be multiplied by the gyro heading value supplied by the ADI"
        }
      ],
      "params": [
        {
          "name": "smart_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "adi_port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "multiplier",
          "type": "double",
          "typePlain": "double"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a62cddb9a1858256f0fa03effc89ddb20",
      "returns": [
        "An adi_gyro_t object containing the given port, or PROS_ERR if the initialization failed. "
      ],
      "static": false,
      "strong": false,
      "summary": "Initializes a gyroscope on the given port. ",
      "title": "ext_adi_gyro_init",
      "type": "[ext_adi_gyro_t](namespacepros_1_1c.md#typedef-ext_adi_gyro_t)",
      "typePlain": "ext_adi_gyro_t",
      "url": "namespacepros_1_1c.md#function-ext_adi_gyro_init",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_gyro_reset",
      "argsString": "(ext_adi_gyro_t gyro)",
      "brief": "Resets the gyroscope value to zero. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_gyro_reset",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as a gyro",
      "explicit": false,
      "fullname": "pros::c::ext_adi_gyro_reset",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 614
      },
      "name": "ext_adi_gyro_reset",
      "override": false,
      "paramList": [
        {
          "name": "gyro",
          "text": "The adi_gyro_t object for which the angle will be returned"
        }
      ],
      "params": [
        {
          "name": "gyro",
          "type": "[ext_adi_gyro_t](namespacepros_1_1c.md#typedef-ext_adi_gyro_t)",
          "typePlain": "ext_adi_gyro_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a91d5a238cdf4fcde887bbb88e3a7ecb0",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Resets the gyroscope value to zero. ",
      "title": "ext_adi_gyro_reset",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-ext_adi_gyro_reset",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-ext_adi_gyro_shutdown",
      "argsString": "(ext_adi_gyro_t gyro)",
      "brief": "Disables the gyro and voids the configuration on its port. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::ext_adi_gyro_shutdown",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, 'a'-'h', or 'A'-'H'; smart port: 1-21). EADDRINUSE - The port is not configured as a gyro",
      "explicit": false,
      "fullname": "pros::c::ext_adi_gyro_shutdown",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/ext_adi.h",
        "line": 631
      },
      "name": "ext_adi_gyro_shutdown",
      "override": false,
      "paramList": [
        {
          "name": "gyro",
          "text": "The adi_gyro_t object to be shut down"
        }
      ],
      "params": [
        {
          "name": "gyro",
          "type": "[ext_adi_gyro_t](namespacepros_1_1c.md#typedef-ext_adi_gyro_t)",
          "typePlain": "ext_adi_gyro_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a30f807700f54ac3365a4a069f8b76747",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Disables the gyro and voids the configuration on its port. ",
      "title": "ext_adi_gyro_shutdown",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-ext_adi_gyro_shutdown",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-__attribute__",
      "argsString": "((__packed__)) quaternion_s",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "struct __attribute__",
      "deleted": false,
      "explicit": false,
      "fullname": "pros::c::__attribute__",
      "hasDetails": false,
      "inline": false,
      "kind": "function",
      "location": {
        "bodyEnd": 42,
        "bodyFile": "pros/imu.h",
        "bodyStart": 37,
        "column": 0,
        "file": "pros/imu.h",
        "line": 1
      },
      "name": "__attribute__",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "(__packed__)",
          "typePlain": "(__packed__)"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a1befded5164e4754bf64b55078704b43",
      "static": false,
      "strong": false,
      "title": "__attribute__",
      "type": "struct",
      "typePlain": "struct",
      "url": "namespacepros_1_1c.md#function-__attribute__",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-imu_reset",
      "argsString": "(uint8_t port)",
      "brief": "Calibrate IMU. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::imu_reset",
      "deleted": false,
      "details": "This takes approximately 2 seconds, and is a non-blocking operation.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is already calibrating",
      "explicit": false,
      "fullname": "pros::c::imu_reset",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/imu.h",
        "line": 77
      },
      "name": "imu_reset",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 Inertial Sensor port number from 1-21 "
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a0ea1e99bb730db27d613f31a11e933c2",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Calibrate IMU. ",
      "title": "imu_reset",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-imu_reset",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-imu_set_data_rate",
      "argsString": "(uint8_t port, uint32_t rate)",
      "brief": "Set the Inertial Sensor's refresh interval in milliseconds. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::imu_set_data_rate",
      "deleted": false,
      "details": "The rate may be specified in increments of 5ms, and will be rounded down to the nearest increment. The minimum allowable refresh rate is 5ms. The default rate is 10ms.\n\nAs values are copied into the shared memory buffer only at 10ms intervals, setting this value to less than 10ms does not mean that you can poll the sensor's values any faster. However, it will guarantee that the data is as recent as possible.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating",
      "explicit": false,
      "fullname": "pros::c::imu_set_data_rate",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/imu.h",
        "line": 104
      },
      "name": "imu_set_data_rate",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 Inertial Sensor port number from 1-21 "
        },
        {
          "name": "rate",
          "text": "The data refresh interval in milliseconds "
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "rate",
          "type": "uint32_t",
          "typePlain": "uint32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a73029aa0aa910f9b740ffe6def05e830",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Set the Inertial Sensor's refresh interval in milliseconds. ",
      "title": "imu_set_data_rate",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-imu_set_data_rate",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-imu_get_rotation",
      "argsString": "(uint8_t port)",
      "brief": "Get the total number of degrees the Inertial Sensor has spun about the z-axis. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "double pros::c::imu_get_rotation",
      "deleted": false,
      "details": "This value is theoretically unbounded. Clockwise rotations are represented with positive degree values, while counterclockwise rotations are represented with negative ones.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating",
      "explicit": false,
      "fullname": "pros::c::imu_get_rotation",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "pros/imu.h",
        "line": 124
      },
      "name": "imu_get_rotation",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 Inertial Sensor port number from 1-21 "
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1aa44bc46059f8aca47f3317320f1cd5bc",
      "returns": [
        "The degree value or PROS_ERR_F if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Get the total number of degrees the Inertial Sensor has spun about the z-axis. ",
      "title": "imu_get_rotation",
      "type": "double",
      "typePlain": "double",
      "url": "namespacepros_1_1c.md#function-imu_get_rotation",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-imu_get_heading",
      "argsString": "(uint8_t port)",
      "brief": "Get the Inertial Sensor's heading relative to the initial direction of its x-axis. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "double pros::c::imu_get_heading",
      "deleted": false,
      "details": "This value is bounded by (-360,360). Clockwise rotations are represented with positive degree values, while counterclockwise rotations are represented with negative ones.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating",
      "explicit": false,
      "fullname": "pros::c::imu_get_heading",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "pros/imu.h",
        "line": 145
      },
      "name": "imu_get_heading",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 Inertial Sensor port number from 1-21 "
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1acca94d74756713e9ca0bd36490c6acc4",
      "returns": [
        "The degree value or PROS_ERR_F if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Get the Inertial Sensor's heading relative to the initial direction of its x-axis. ",
      "title": "imu_get_heading",
      "type": "double",
      "typePlain": "double",
      "url": "namespacepros_1_1c.md#function-imu_get_heading",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-imu_get_quaternion",
      "argsString": "(uint8_t port)",
      "brief": "Get a quaternion representing the Inertial Sensor's orientation. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "quaternion_s_t pros::c::imu_get_quaternion",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating",
      "explicit": false,
      "fullname": "pros::c::imu_get_quaternion",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 16,
        "file": "pros/imu.h",
        "line": 162
      },
      "name": "imu_get_quaternion",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 Inertial Sensor port number from 1-21 "
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1afdacdac1c6beeed1cce3829b67ebe473",
      "returns": [
        "The quaternion representing the sensor's orientation. If the operation failed, all the quaternion's members are filled with PROS_ERR_F and errno is set. "
      ],
      "static": false,
      "strong": false,
      "summary": "Get a quaternion representing the Inertial Sensor's orientation. ",
      "title": "imu_get_quaternion",
      "type": "[quaternion_s_t](namespacepros_1_1c.md#variable-quaternion_s_t)",
      "typePlain": "quaternion_s_t",
      "url": "namespacepros_1_1c.md#function-imu_get_quaternion",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-imu_get_euler",
      "argsString": "(uint8_t port)",
      "brief": "Get the Euler angles representing the Inertial Sensor's orientation. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "euler_s_t pros::c::imu_get_euler",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating",
      "explicit": false,
      "fullname": "pros::c::imu_get_euler",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 11,
        "file": "pros/imu.h",
        "line": 179
      },
      "name": "imu_get_euler",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 Inertial Sensor port number from 1-21 "
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a8d16738ae5c652c2c72479e793f4f09b",
      "returns": [
        "The Euler angles representing the sensor's orientation. If the operation failed, all the structure's members are filled with PROS_ERR_F and errno is set. "
      ],
      "static": false,
      "strong": false,
      "summary": "Get the Euler angles representing the Inertial Sensor's orientation. ",
      "title": "imu_get_euler",
      "type": "[euler_s_t](namespacepros_1_1c.md#variable-euler_s_t)",
      "typePlain": "euler_s_t",
      "url": "namespacepros_1_1c.md#function-imu_get_euler",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-imu_get_pitch",
      "argsString": "(uint8_t port)",
      "brief": "Get the Inertial Sensor's pitch angle. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "double pros::c::imu_get_pitch",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating",
      "explicit": false,
      "fullname": "pros::c::imu_get_pitch",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "pros/imu.h",
        "line": 195
      },
      "name": "imu_get_pitch",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 Inertial Sensor port number from 1-21 "
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a44a4f2d6c27854606ca35247b97dc68d",
      "returns": [
        "The pitch angle, or PROS_ERR_F if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Get the Inertial Sensor's pitch angle. ",
      "title": "imu_get_pitch",
      "type": "double",
      "typePlain": "double",
      "url": "namespacepros_1_1c.md#function-imu_get_pitch",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-imu_get_roll",
      "argsString": "(uint8_t port)",
      "brief": "Get the Inertial Sensor's roll angle. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "double pros::c::imu_get_roll",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating",
      "explicit": false,
      "fullname": "pros::c::imu_get_roll",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "pros/imu.h",
        "line": 210
      },
      "name": "imu_get_roll",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 Inertial Sensor port number from 1-21 "
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1aa913785ee0bf907fafd049145f735e65",
      "returns": [
        "The roll angle, or PROS_ERR_F if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Get the Inertial Sensor's roll angle. ",
      "title": "imu_get_roll",
      "type": "double",
      "typePlain": "double",
      "url": "namespacepros_1_1c.md#function-imu_get_roll",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-imu_get_yaw",
      "argsString": "(uint8_t port)",
      "brief": "Get the Inertial Sensor's yaw angle. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "double pros::c::imu_get_yaw",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating",
      "explicit": false,
      "fullname": "pros::c::imu_get_yaw",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "pros/imu.h",
        "line": 225
      },
      "name": "imu_get_yaw",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 Inertial Sensor port number from 1-21 "
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1aa1b43b44cf94a724d4917bf363db2299",
      "returns": [
        "The yaw angle, or PROS_ERR_F if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Get the Inertial Sensor's yaw angle. ",
      "title": "imu_get_yaw",
      "type": "double",
      "typePlain": "double",
      "url": "namespacepros_1_1c.md#function-imu_get_yaw",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-imu_get_gyro_rate",
      "argsString": "(uint8_t port)",
      "brief": "Get the Inertial Sensor's raw gyroscope values. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "imu_gyro_s_t pros::c::imu_get_gyro_rate",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating",
      "explicit": false,
      "fullname": "pros::c::imu_get_gyro_rate",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 14,
        "file": "pros/imu.h",
        "line": 241
      },
      "name": "imu_get_gyro_rate",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 Inertial Sensor port number from 1-21 "
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1afe88178fca4b6dd69cae69469bb58e8e",
      "returns": [
        "The raw gyroscope values. If the operation failed, all the structure's members are filled with PROS_ERR_F and errno is set. "
      ],
      "static": false,
      "strong": false,
      "summary": "Get the Inertial Sensor's raw gyroscope values. ",
      "title": "imu_get_gyro_rate",
      "type": "[imu_gyro_s_t](namespacepros_1_1c.md#typedef-imu_gyro_s_t)",
      "typePlain": "imu_gyro_s_t",
      "url": "namespacepros_1_1c.md#function-imu_get_gyro_rate",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-imu_get_accel",
      "argsString": "(uint8_t port)",
      "brief": "Get the Inertial Sensor's raw acceleroneter values. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "imu_accel_s_t pros::c::imu_get_accel",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating",
      "explicit": false,
      "fullname": "pros::c::imu_get_accel",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 15,
        "file": "pros/imu.h",
        "line": 257
      },
      "name": "imu_get_accel",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 Inertial Sensor port number from 1-21 "
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1aae2df998074e80a7531de57c1161f47d",
      "returns": [
        "The raw accelerometer values. If the operation failed, all the structure's members are filled with PROS_ERR_F and errno is set. "
      ],
      "static": false,
      "strong": false,
      "summary": "Get the Inertial Sensor's raw acceleroneter values. ",
      "title": "imu_get_accel",
      "type": "[imu_accel_s_t](namespacepros_1_1c.md#typedef-imu_accel_s_t)",
      "typePlain": "imu_accel_s_t",
      "url": "namespacepros_1_1c.md#function-imu_get_accel",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-imu_get_status",
      "argsString": "(uint8_t port)",
      "brief": "Get the Inertial Sensor's status. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "imu_status_e_t pros::c::imu_get_status",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating",
      "explicit": false,
      "fullname": "pros::c::imu_get_status",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 16,
        "file": "pros/imu.h",
        "line": 273
      },
      "name": "imu_get_status",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 Inertial Sensor port number from 1-21 "
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a1ccf1cf41bf15e416c89d64093d63764",
      "returns": [
        "The Inertial Sensor's status code, or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Get the Inertial Sensor's status. ",
      "title": "imu_get_status",
      "type": "imu_status_e_t",
      "typePlain": "imu_status_e_t",
      "url": "namespacepros_1_1c.md#function-imu_get_status",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-lcd_is_initialized",
      "argsString": "(void)",
      "brief": "Checks whether the emulated three-button LCD has already been initialized. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool pros::c::lcd_is_initialized",
      "deleted": false,
      "explicit": false,
      "fullname": "pros::c::lcd_is_initialized",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/llemu.h",
        "line": 66
      },
      "name": "lcd_is_initialized",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "void",
          "typePlain": "void"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1af43a5a9cea1850757c8f0cc180604705",
      "returns": [
        "True if the LCD has been initialized or false if not. "
      ],
      "static": false,
      "strong": false,
      "summary": "Checks whether the emulated three-button LCD has already been initialized. ",
      "title": "lcd_is_initialized",
      "type": "bool",
      "typePlain": "bool",
      "url": "namespacepros_1_1c.md#function-lcd_is_initialized",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-lcd_initialize",
      "argsString": "(void)",
      "brief": "Creates an emulation of the three-button, UART-based VEX LCD on the display. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool pros::c::lcd_initialize",
      "deleted": false,
      "explicit": false,
      "fullname": "pros::c::lcd_initialize",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/llemu.h",
        "line": 74
      },
      "name": "lcd_initialize",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "void",
          "typePlain": "void"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a36a50f90e2186a37abce6cf36d5df6a3",
      "returns": [
        "True if the LCD was successfully initialized, or false if it has already been initialized. "
      ],
      "static": false,
      "strong": false,
      "summary": "Creates an emulation of the three-button, UART-based VEX LCD on the display. ",
      "title": "lcd_initialize",
      "type": "bool",
      "typePlain": "bool",
      "url": "namespacepros_1_1c.md#function-lcd_initialize",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-lcd_shutdown",
      "argsString": "(void)",
      "brief": "Turns off the Legacy LCD Emulator. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool pros::c::lcd_shutdown",
      "deleted": false,
      "details": "Calling this function will clear the entire display, and you will not be able to call any further LLEMU functions until another call to lcd_initialize.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The LCD has not been initialized. Call [lcd_initialize()](namespacepros_1_1c.md#function-lcd_initialize) first.",
      "explicit": false,
      "fullname": "pros::c::lcd_shutdown",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/llemu.h",
        "line": 89
      },
      "name": "lcd_shutdown",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "void",
          "typePlain": "void"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1aa0195c987d4c988cf9c9b8f6f6d40504",
      "returns": [
        "True if the operation was successful, or false otherwise, setting errno values as specified above. "
      ],
      "static": false,
      "strong": false,
      "summary": "Turns off the Legacy LCD Emulator. ",
      "title": "lcd_shutdown",
      "type": "bool",
      "typePlain": "bool",
      "url": "namespacepros_1_1c.md#function-lcd_shutdown",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-lcd_print",
      "argsString": "(int16_t line, const char *fmt,...)",
      "brief": "Displays a formatted string on the emulated three-button LCD screen. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool pros::c::lcd_print",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The LCD has not been initialized. Call [lcd_initialize()](namespacepros_1_1c.md#function-lcd_initialize) first. EINVAL - The line number specified is not in the range [0-7]",
      "explicit": false,
      "fullname": "pros::c::lcd_print",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/llemu.h",
        "line": 109
      },
      "name": "lcd_print",
      "override": false,
      "paramList": [
        {
          "name": "line",
          "text": "The line on which to display the text [0-7] "
        },
        {
          "name": "fmt",
          "text": "Format string "
        },
        {
          "name": "...",
          "text": "Optional list of arguments for the format string"
        }
      ],
      "params": [
        {
          "name": "line",
          "type": "int16_t",
          "typePlain": "int16_t"
        },
        {
          "name": "fmt",
          "type": "const char *",
          "typePlain": "const char *"
        },
        {
          "name": "",
          "type": "...",
          "typePlain": "..."
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1adb97914cdf57d801b60962f9be046c8f",
      "returns": [
        "True if the operation was successful, or false otherwise, setting errno values as specified above. "
      ],
      "static": false,
      "strong": false,
      "summary": "Displays a formatted string on the emulated three-button LCD screen. ",
      "title": "lcd_print",
      "type": "bool",
      "typePlain": "bool",
      "url": "namespacepros_1_1c.md#function-lcd_print",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-lcd_set_text",
      "argsString": "(int16_t line, const char *text)",
      "brief": "Displays a string on the emulated three-button LCD screen. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool pros::c::lcd_set_text",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The LCD has not been initialized. Call [lcd_initialize()](namespacepros_1_1c.md#function-lcd_initialize) first. EINVAL - The line number specified is not in the range [0-7]",
      "explicit": false,
      "fullname": "pros::c::lcd_set_text",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/llemu.h",
        "line": 127
      },
      "name": "lcd_set_text",
      "override": false,
      "paramList": [
        {
          "name": "line",
          "text": "The line on which to display the text [0-7] "
        },
        {
          "name": "text",
          "text": "The text to display"
        }
      ],
      "params": [
        {
          "name": "line",
          "type": "int16_t",
          "typePlain": "int16_t"
        },
        {
          "name": "text",
          "type": "const char *",
          "typePlain": "const char *"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1aac6e7a4915acb7b67424a56ee38e72b3",
      "returns": [
        "True if the operation was successful, or false otherwise, setting errno values as specified above. "
      ],
      "static": false,
      "strong": false,
      "summary": "Displays a string on the emulated three-button LCD screen. ",
      "title": "lcd_set_text",
      "type": "bool",
      "typePlain": "bool",
      "url": "namespacepros_1_1c.md#function-lcd_set_text",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-lcd_clear",
      "argsString": "(void)",
      "brief": "Clears the contents of the emulated three-button LCD screen. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool pros::c::lcd_clear",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The LCD has not been initialized. Call [lcd_initialize()](namespacepros_1_1c.md#function-lcd_initialize) first. EINVAL - The line number specified is not in the range [0-7]",
      "explicit": false,
      "fullname": "pros::c::lcd_clear",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/llemu.h",
        "line": 140
      },
      "name": "lcd_clear",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "void",
          "typePlain": "void"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1accbddef45caac238401cb65a464ed306",
      "returns": [
        "True if the operation was successful, or false otherwise, setting errno values as specified above. "
      ],
      "static": false,
      "strong": false,
      "summary": "Clears the contents of the emulated three-button LCD screen. ",
      "title": "lcd_clear",
      "type": "bool",
      "typePlain": "bool",
      "url": "namespacepros_1_1c.md#function-lcd_clear",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-lcd_clear_line",
      "argsString": "(int16_t line)",
      "brief": "Clears the contents of a line of the emulated three-button LCD screen. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool pros::c::lcd_clear_line",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The LCD has not been initialized. Call [lcd_initialize()](namespacepros_1_1c.md#function-lcd_initialize) first. EINVAL - The line number specified is not in the range [0-7]",
      "explicit": false,
      "fullname": "pros::c::lcd_clear_line",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/llemu.h",
        "line": 156
      },
      "name": "lcd_clear_line",
      "override": false,
      "paramList": [
        {
          "name": "line",
          "text": "The line to clear"
        }
      ],
      "params": [
        {
          "name": "line",
          "type": "int16_t",
          "typePlain": "int16_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a054b2c7b5c134f6e495e02e6b289416a",
      "returns": [
        "True if the operation was successful, or false otherwise, setting errno values as specified above. "
      ],
      "static": false,
      "strong": false,
      "summary": "Clears the contents of a line of the emulated three-button LCD screen. ",
      "title": "lcd_clear_line",
      "type": "bool",
      "typePlain": "bool",
      "url": "namespacepros_1_1c.md#function-lcd_clear_line",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-lcd_register_btn0_cb",
      "argsString": "(lcd_btn_cb_fn_t cb)",
      "brief": "Registers a callback function for the leftmost button. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool pros::c::lcd_register_btn0_cb",
      "deleted": false,
      "details": "When the leftmost button on the emulated three-button LCD is pressed, the user-provided callback function will be invoked.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The LCD has not been initialized. Call [lcd_initialize()](namespacepros_1_1c.md#function-lcd_initialize) first.",
      "explicit": false,
      "fullname": "pros::c::lcd_register_btn0_cb",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/llemu.h",
        "line": 174
      },
      "name": "lcd_register_btn0_cb",
      "override": false,
      "paramList": [
        {
          "name": "cb",
          "text": "A callback function of type lcd_btn_cb_fn_t (void (*cb)(void))"
        }
      ],
      "params": [
        {
          "name": "cb",
          "type": "[lcd_btn_cb_fn_t](namespacepros.md#typedef-lcd_btn_cb_fn_t)",
          "typePlain": "lcd_btn_cb_fn_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a15de5b08e88b129028b094a1bc96e446",
      "returns": [
        "True if the operation was successful, or false otherwise, setting errno values as specified above. "
      ],
      "static": false,
      "strong": false,
      "summary": "Registers a callback function for the leftmost button. ",
      "title": "lcd_register_btn0_cb",
      "type": "bool",
      "typePlain": "bool",
      "url": "namespacepros_1_1c.md#function-lcd_register_btn0_cb",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-lcd_register_btn1_cb",
      "argsString": "(lcd_btn_cb_fn_t cb)",
      "brief": "Registers a callback function for the center button. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool pros::c::lcd_register_btn1_cb",
      "deleted": false,
      "details": "When the center button on the emulated three-button LCD is pressed, the user-provided callback function will be invoked.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The LCD has not been initialized. Call [lcd_initialize()](namespacepros_1_1c.md#function-lcd_initialize) first.",
      "explicit": false,
      "fullname": "pros::c::lcd_register_btn1_cb",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/llemu.h",
        "line": 192
      },
      "name": "lcd_register_btn1_cb",
      "override": false,
      "paramList": [
        {
          "name": "cb",
          "text": "A callback function of type lcd_btn_cb_fn_t (void (*cb)(void))"
        }
      ],
      "params": [
        {
          "name": "cb",
          "type": "[lcd_btn_cb_fn_t](namespacepros.md#typedef-lcd_btn_cb_fn_t)",
          "typePlain": "lcd_btn_cb_fn_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1aad5b65ea0cb13a9166b6d078839cf9ff",
      "returns": [
        "True if the operation was successful, or false otherwise, setting errno values as specified above. "
      ],
      "static": false,
      "strong": false,
      "summary": "Registers a callback function for the center button. ",
      "title": "lcd_register_btn1_cb",
      "type": "bool",
      "typePlain": "bool",
      "url": "namespacepros_1_1c.md#function-lcd_register_btn1_cb",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-lcd_register_btn2_cb",
      "argsString": "(lcd_btn_cb_fn_t cb)",
      "brief": "Registers a callback function for the rightmost button. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool pros::c::lcd_register_btn2_cb",
      "deleted": false,
      "details": "When the rightmost button on the emulated three-button LCD is pressed, the user-provided callback function will be invoked.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The LCD has not been initialized. Call [lcd_initialize()](namespacepros_1_1c.md#function-lcd_initialize) first.",
      "explicit": false,
      "fullname": "pros::c::lcd_register_btn2_cb",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/llemu.h",
        "line": 210
      },
      "name": "lcd_register_btn2_cb",
      "override": false,
      "paramList": [
        {
          "name": "cb",
          "text": "A callback function of type lcd_btn_cb_fn_t (void (*cb)(void))"
        }
      ],
      "params": [
        {
          "name": "cb",
          "type": "[lcd_btn_cb_fn_t](namespacepros.md#typedef-lcd_btn_cb_fn_t)",
          "typePlain": "lcd_btn_cb_fn_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a6987d7b3dae61fd87cc66e63772e1595",
      "returns": [
        "True if the operation was successful, or false otherwise, setting errno values as specified above. "
      ],
      "static": false,
      "strong": false,
      "summary": "Registers a callback function for the rightmost button. ",
      "title": "lcd_register_btn2_cb",
      "type": "bool",
      "typePlain": "bool",
      "url": "namespacepros_1_1c.md#function-lcd_register_btn2_cb",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-lcd_read_buttons",
      "argsString": "(void)",
      "brief": "Gets the button status from the emulated three-button LCD. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "uint8_t pros::c::lcd_read_buttons",
      "deleted": false,
      "details": "The value returned is a 3-bit integer where 1 0 0 indicates the left button is pressed, 0 1 0 indicates the center button is pressed, and 0 0 1 indicates the right button is pressed. 0 is returned if no buttons are currently being pressed.\n\nNote that this function is provided for legacy API compatibility purposes, with the caveat that the V5 touch screen does not actually support pressing multiple points on the screen at the same time.",
      "explicit": false,
      "fullname": "pros::c::lcd_read_buttons",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/llemu.h",
        "line": 226
      },
      "name": "lcd_read_buttons",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "void",
          "typePlain": "void"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a7dd4fea9a022783060e9c69fb4d9dc7b",
      "returns": [
        "The buttons pressed as a bit mask "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the button status from the emulated three-button LCD. ",
      "title": "lcd_read_buttons",
      "type": "uint8_t",
      "typePlain": "uint8_t",
      "url": "namespacepros_1_1c.md#function-lcd_read_buttons",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-competition_get_status",
      "argsString": "(void)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "uint8_t pros::c::competition_get_status",
      "deleted": false,
      "explicit": false,
      "fullname": "pros::c::competition_get_status",
      "hasDetails": false,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/misc.h",
        "line": 46
      },
      "name": "competition_get_status",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "void",
          "typePlain": "void"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1aeb04d3a78a7596b89366603a0068763b",
      "static": false,
      "strong": false,
      "title": "competition_get_status",
      "type": "uint8_t",
      "typePlain": "uint8_t",
      "url": "namespacepros_1_1c.md#function-competition_get_status",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-controller_is_connected",
      "argsString": "(controller_id_e_t id)",
      "brief": "Checks if the controller is connected. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::controller_is_connected",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.",
      "explicit": false,
      "fullname": "pros::c::controller_is_connected",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/misc.h",
        "line": 173
      },
      "name": "controller_is_connected",
      "override": false,
      "paramList": [
        {
          "name": "id",
          "text": "The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER"
        }
      ],
      "params": [
        {
          "name": "id",
          "type": "[controller_id_e_t](namespacepros.md#enum-controller_id_e_t)",
          "typePlain": "controller_id_e_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a1a381afe1cabb7c9b5dd5a734a5ee4a3",
      "returns": [
        "1 if the controller is connected, 0 otherwise "
      ],
      "static": false,
      "strong": false,
      "summary": "Checks if the controller is connected. ",
      "title": "controller_is_connected",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-controller_is_connected",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-controller_get_analog",
      "argsString": "(controller_id_e_t id, controller_analog_e_t channel)",
      "brief": "Gets the value of an analog channel (joystick) on a controller. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::controller_get_analog",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.",
      "explicit": false,
      "fullname": "pros::c::controller_get_analog",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/misc.h",
        "line": 195
      },
      "name": "controller_get_analog",
      "override": false,
      "paramList": [
        {
          "name": "id",
          "text": "The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER "
        },
        {
          "name": "channel",
          "text": "The analog channel to get. Must be one of ANALOG_LEFT_X, ANALOG_LEFT_Y, ANALOG_RIGHT_X, ANALOG_RIGHT_Y"
        }
      ],
      "params": [
        {
          "name": "id",
          "type": "[controller_id_e_t](namespacepros.md#enum-controller_id_e_t)",
          "typePlain": "controller_id_e_t"
        },
        {
          "name": "channel",
          "type": "[controller_analog_e_t](namespacepros.md#enum-controller_analog_e_t)",
          "typePlain": "controller_analog_e_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a1a7c4e6bcb39260bf7ce5b1a58638753",
      "returns": [
        "The current reading of the analog channel: [-127, 127]. If the controller was not connected, then 0 is returned "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the value of an analog channel (joystick) on a controller. ",
      "title": "controller_get_analog",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-controller_get_analog",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-controller_get_battery_capacity",
      "argsString": "(controller_id_e_t id)",
      "brief": "Gets the battery capacity of the given controller. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::controller_get_battery_capacity",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.",
      "explicit": false,
      "fullname": "pros::c::controller_get_battery_capacity",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/misc.h",
        "line": 212
      },
      "name": "controller_get_battery_capacity",
      "override": false,
      "paramList": [
        {
          "name": "id",
          "text": "The ID of the controller (e.g. the master or partner controller). Must be one of E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER"
        }
      ],
      "params": [
        {
          "name": "id",
          "type": "[controller_id_e_t](namespacepros.md#enum-controller_id_e_t)",
          "typePlain": "controller_id_e_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a3708b3194feeb243710d0fa2079e57b6",
      "returns": [
        "The controller's battery capacity "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the battery capacity of the given controller. ",
      "title": "controller_get_battery_capacity",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-controller_get_battery_capacity",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-controller_get_battery_level",
      "argsString": "(controller_id_e_t id)",
      "brief": "Gets the battery level of the given controller. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::controller_get_battery_level",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.",
      "explicit": false,
      "fullname": "pros::c::controller_get_battery_level",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/misc.h",
        "line": 229
      },
      "name": "controller_get_battery_level",
      "override": false,
      "paramList": [
        {
          "name": "id",
          "text": "The ID of the controller (e.g. the master or partner controller). Must be one of E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER"
        }
      ],
      "params": [
        {
          "name": "id",
          "type": "[controller_id_e_t](namespacepros.md#enum-controller_id_e_t)",
          "typePlain": "controller_id_e_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a35f22987a76d5a3c9117755b0abc2548",
      "returns": [
        "The controller's battery level "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the battery level of the given controller. ",
      "title": "controller_get_battery_level",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-controller_get_battery_level",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-controller_get_digital",
      "argsString": "(controller_id_e_t id, controller_digital_e_t button)",
      "brief": "Checks if a digital channel (button) on the controller is currently pressed. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::controller_get_digital",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.",
      "explicit": false,
      "fullname": "pros::c::controller_get_digital",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/misc.h",
        "line": 250
      },
      "name": "controller_get_digital",
      "override": false,
      "paramList": [
        {
          "name": "id",
          "text": "The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER "
        },
        {
          "name": "button",
          "text": "The button to read. Must be one of DIGITAL_{RIGHT,DOWN,LEFT,UP,A,B,Y,X,R1,R2,L1,L2}"
        }
      ],
      "params": [
        {
          "name": "id",
          "type": "[controller_id_e_t](namespacepros.md#enum-controller_id_e_t)",
          "typePlain": "controller_id_e_t"
        },
        {
          "name": "button",
          "type": "[controller_digital_e_t](namespacepros.md#enum-controller_digital_e_t)",
          "typePlain": "controller_digital_e_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a764da856ff7fcb710b10daa1a2fe4519",
      "returns": [
        "1 if the button on the controller is pressed. If the controller was not connected, then 0 is returned "
      ],
      "static": false,
      "strong": false,
      "summary": "Checks if a digital channel (button) on the controller is currently pressed. ",
      "title": "controller_get_digital",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-controller_get_digital",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-controller_get_digital_new_press",
      "argsString": "(controller_id_e_t id, controller_digital_e_t button)",
      "brief": "Returns a rising-edge case for a controller button press. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::controller_get_digital_new_press",
      "deleted": false,
      "details": "This function is not thread-safe. Multiple tasks polling a single button may return different results under the same circumstances, so only one task should call this function for any given button. E.g., [Task](classpros_1_1Task.md) A calls this function for buttons 1 and 2. [Task](classpros_1_1Task.md) B may call this function for button 3, but should not for buttons 1 or 2. A typical use-case for this function is to call inside opcontrol to detect new button presses, and not in any other tasks.\n\nThis function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.",
      "explicit": false,
      "fullname": "pros::c::controller_get_digital_new_press",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/misc.h",
        "line": 279
      },
      "name": "controller_get_digital_new_press",
      "override": false,
      "paramList": [
        {
          "name": "id",
          "text": "The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER "
        },
        {
          "name": "button",
          "text": "The button to read. Must be one of DIGITAL_{RIGHT,DOWN,LEFT,UP,A,B,Y,X,R1,R2,L1,L2}"
        }
      ],
      "params": [
        {
          "name": "id",
          "type": "[controller_id_e_t](namespacepros.md#enum-controller_id_e_t)",
          "typePlain": "controller_id_e_t"
        },
        {
          "name": "button",
          "type": "[controller_digital_e_t](namespacepros.md#enum-controller_digital_e_t)",
          "typePlain": "controller_digital_e_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ac98088451005003975c19dda4e20a1f8",
      "returns": [
        "1 if the button on the controller is pressed and had not been pressed the last time this function was called, 0 otherwise. "
      ],
      "static": false,
      "strong": false,
      "summary": "Returns a rising-edge case for a controller button press. ",
      "title": "controller_get_digital_new_press",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-controller_get_digital_new_press",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-controller_print",
      "argsString": "(controller_id_e_t id, uint8_t line, uint8_t col, const char *fmt,...)",
      "brief": "Sets text to the controller LCD screen. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::controller_print",
      "deleted": false,
      "details": "\nThis function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.",
      "explicit": false,
      "fullname": "pros::c::controller_print",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/misc.h",
        "line": 308
      },
      "name": "controller_print",
      "note": [
        "[Controller](classpros_1_1Controller.md) text setting is currently in beta, so continuous, fast updates will not work well."
      ],
      "override": false,
      "paramList": [
        {
          "name": "id",
          "text": "The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER "
        },
        {
          "name": "line",
          "text": "The line number at which the text will be displayed [0-2] "
        },
        {
          "name": "col",
          "text": "The column number at which the text will be displayed [0-14] "
        },
        {
          "name": "fmt",
          "text": "The format string to print to the controller "
        },
        {
          "name": "...",
          "text": "The argument list for the format string"
        }
      ],
      "params": [
        {
          "name": "id",
          "type": "[controller_id_e_t](namespacepros.md#enum-controller_id_e_t)",
          "typePlain": "controller_id_e_t"
        },
        {
          "name": "line",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "col",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "fmt",
          "type": "const char *",
          "typePlain": "const char *"
        },
        {
          "name": "",
          "type": "...",
          "typePlain": "..."
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a7bdcfd084f96b7eda87867de947997b8",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets text to the controller LCD screen. ",
      "title": "controller_print",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-controller_print",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-controller_set_text",
      "argsString": "(controller_id_e_t id, uint8_t line, uint8_t col, const char *str)",
      "brief": "Sets text to the controller LCD screen. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::controller_set_text",
      "deleted": false,
      "details": "\nThis function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.",
      "explicit": false,
      "fullname": "pros::c::controller_set_text",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/misc.h",
        "line": 335
      },
      "name": "controller_set_text",
      "note": [
        "[Controller](classpros_1_1Controller.md) text setting is currently in beta, so continuous, fast updates will not work well."
      ],
      "override": false,
      "paramList": [
        {
          "name": "id",
          "text": "The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER "
        },
        {
          "name": "line",
          "text": "The line number at which the text will be displayed [0-2] "
        },
        {
          "name": "col",
          "text": "The column number at which the text will be displayed [0-14] "
        },
        {
          "name": "str",
          "text": "The pre-formatted string to print to the controller"
        }
      ],
      "params": [
        {
          "name": "id",
          "type": "[controller_id_e_t](namespacepros.md#enum-controller_id_e_t)",
          "typePlain": "controller_id_e_t"
        },
        {
          "name": "line",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "col",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "str",
          "type": "const char *",
          "typePlain": "const char *"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a9e301c0fb1fe773010f0f63c07f0ff30",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets text to the controller LCD screen. ",
      "title": "controller_set_text",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-controller_set_text",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-controller_clear_line",
      "argsString": "(controller_id_e_t id, uint8_t line)",
      "brief": "Clears an individual line of the controller screen. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::controller_clear_line",
      "deleted": false,
      "details": "\nThis function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.",
      "explicit": false,
      "fullname": "pros::c::controller_clear_line",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/misc.h",
        "line": 358
      },
      "name": "controller_clear_line",
      "note": [
        "[Controller](classpros_1_1Controller.md) text setting is currently in beta, so continuous, fast updates will not work well."
      ],
      "override": false,
      "paramList": [
        {
          "name": "id",
          "text": "The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER "
        },
        {
          "name": "line",
          "text": "The line number to clear [0-2]"
        }
      ],
      "params": [
        {
          "name": "id",
          "type": "[controller_id_e_t](namespacepros.md#enum-controller_id_e_t)",
          "typePlain": "controller_id_e_t"
        },
        {
          "name": "line",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a57f585f20ca272ce035390e9a7ba8cdc",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Clears an individual line of the controller screen. ",
      "title": "controller_clear_line",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-controller_clear_line",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-controller_clear",
      "argsString": "(controller_id_e_t id)",
      "brief": "Clears all of the lines on the controller screen. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::controller_clear",
      "deleted": false,
      "details": "\nThis function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.",
      "explicit": false,
      "fullname": "pros::c::controller_clear",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/misc.h",
        "line": 380
      },
      "name": "controller_clear",
      "note": [
        "[Controller](classpros_1_1Controller.md) text setting is currently in beta, so continuous, fast updates will not work well. On vexOS version 1.0.0 this function will block for 110ms."
      ],
      "override": false,
      "paramList": [
        {
          "name": "id",
          "text": "The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER"
        }
      ],
      "params": [
        {
          "name": "id",
          "type": "[controller_id_e_t](namespacepros.md#enum-controller_id_e_t)",
          "typePlain": "controller_id_e_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a9ccf53b8954bc4033abebec9a79da0c4",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Clears all of the lines on the controller screen. ",
      "title": "controller_clear",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-controller_clear",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-controller_rumble",
      "argsString": "(controller_id_e_t id, const char *rumble_pattern)",
      "brief": "Rumble the controller. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::controller_rumble",
      "deleted": false,
      "details": "\nThis function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.",
      "explicit": false,
      "fullname": "pros::c::controller_rumble",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/misc.h",
        "line": 405
      },
      "name": "controller_rumble",
      "note": [
        "[Controller](classpros_1_1Controller.md) rumble activation is currently in beta, so continuous, fast updates will not work well."
      ],
      "override": false,
      "paramList": [
        {
          "name": "id",
          "text": "The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER "
        },
        {
          "name": "rumble_pattern",
          "text": "A string consisting of the characters '.', '-', and ' ', where dots are short rumbles, dashes are long rumbles, and spaces are pauses. Maximum supported length is 8 characters."
        }
      ],
      "params": [
        {
          "name": "id",
          "type": "[controller_id_e_t](namespacepros.md#enum-controller_id_e_t)",
          "typePlain": "controller_id_e_t"
        },
        {
          "name": "rumble_pattern",
          "type": "const char *",
          "typePlain": "const char *"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a6a2fde9e8c3eec3dc88cb00235a1df7d",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Rumble the controller. ",
      "title": "controller_rumble",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-controller_rumble",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-battery_get_voltage",
      "argsString": "(void)",
      "brief": "Gets the current voltage of the battery, as reported by VEXos. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::battery_get_voltage",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the battery port.",
      "explicit": false,
      "fullname": "pros::c::battery_get_voltage",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/misc.h",
        "line": 416
      },
      "name": "battery_get_voltage",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "void",
          "typePlain": "void"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a9d34cbe2b17dc9daec083fdaf8c10a1e",
      "returns": [
        "The current voltage of the battery "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the current voltage of the battery, as reported by VEXos. ",
      "title": "battery_get_voltage",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-battery_get_voltage",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-battery_get_current",
      "argsString": "(void)",
      "brief": "Gets the current current of the battery, as reported by VEXos. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::battery_get_current",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the battery port.",
      "explicit": false,
      "fullname": "pros::c::battery_get_current",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/misc.h",
        "line": 427
      },
      "name": "battery_get_current",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "void",
          "typePlain": "void"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a6cd34d4960ca5193d70626bc59094505",
      "returns": [
        "The current current of the battery "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the current current of the battery, as reported by VEXos. ",
      "title": "battery_get_current",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-battery_get_current",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-battery_get_temperature",
      "argsString": "(void)",
      "brief": "Gets the current temperature of the battery, as reported by VEXos. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "double pros::c::battery_get_temperature",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the battery port.",
      "explicit": false,
      "fullname": "pros::c::battery_get_temperature",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "pros/misc.h",
        "line": 438
      },
      "name": "battery_get_temperature",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "void",
          "typePlain": "void"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a79dd0288c3ac547c75c25e374087f91b",
      "returns": [
        "The current temperature of the battery "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the current temperature of the battery, as reported by VEXos. ",
      "title": "battery_get_temperature",
      "type": "double",
      "typePlain": "double",
      "url": "namespacepros_1_1c.md#function-battery_get_temperature",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-battery_get_capacity",
      "argsString": "(void)",
      "brief": "Gets the current capacity of the battery, as reported by VEXos. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "double pros::c::battery_get_capacity",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the battery port.",
      "explicit": false,
      "fullname": "pros::c::battery_get_capacity",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "pros/misc.h",
        "line": 449
      },
      "name": "battery_get_capacity",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "void",
          "typePlain": "void"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1aa5e755785c93c5cafe6b0d98695d7c20",
      "returns": [
        "The current capacity of the battery "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the current capacity of the battery, as reported by VEXos. ",
      "title": "battery_get_capacity",
      "type": "double",
      "typePlain": "double",
      "url": "namespacepros_1_1c.md#function-battery_get_capacity",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-usd_is_installed",
      "argsString": "(void)",
      "brief": "Checks if the SD card is installed. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::usd_is_installed",
      "deleted": false,
      "explicit": false,
      "fullname": "pros::c::usd_is_installed",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/misc.h",
        "line": 456
      },
      "name": "usd_is_installed",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "void",
          "typePlain": "void"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1afa370f223e76f68f27bdfed38724724e",
      "returns": [
        "1 if the SD card is installed, 0 otherwise "
      ],
      "static": false,
      "strong": false,
      "summary": "Checks if the SD card is installed. ",
      "title": "usd_is_installed",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-usd_is_installed",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_move",
      "argsString": "(uint8_t port, int32_t voltage)",
      "brief": "[Motor](classpros_1_1Motor.md) movement functions ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::motor_move",
      "deleted": false,
      "details": "These functions allow programmers to make motors move \n\n Sets the voltage for the motor from -127 to 127.\n\nThis is designed to map easily to the input from the controller's analog stick for simple opcontrol use. The actual behavior of the motor is analogous to use of [motor_move_voltage()](namespacepros_1_1c.md#function-motor_move_voltage), or [motorSet()](api__legacy_8h.md#define-motorset) from the PROS 2 API.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_move",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/motors.h",
        "line": 57
      },
      "name": "motor_move",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "voltage",
          "text": "The new motor voltage from -127 to 127"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "voltage",
          "type": "int32_t",
          "typePlain": "int32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ac14bccd595a812fff8c30d2d050844a9",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Motor movement functions ",
      "title": "motor_move",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-motor_move",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_move_absolute",
      "argsString": "(uint8_t port, const double position, const int32_t velocity)",
      "brief": "Sets the target absolute position for the motor to move to. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::motor_move_absolute",
      "deleted": false,
      "details": "This movement is relative to the position of the motor when initialized or the position when it was most recently reset with [motor_set_zero_position()](namespacepros_1_1c.md#function-motor_set_zero_position).\n\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_move_absolute",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/motors.h",
        "line": 83
      },
      "name": "motor_move_absolute",
      "note": [
        "This function simply sets the target for the motor, it does not block program execution until the movement finishes."
      ],
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "position",
          "text": "The absolute position to move to in the motor's encoder units "
        },
        {
          "name": "velocity",
          "text": "The maximum allowable velocity for the movement in RPM"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "position",
          "type": "const double",
          "typePlain": "const double"
        },
        {
          "name": "velocity",
          "type": "const int32_t",
          "typePlain": "const int32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a490a367ce2fea03acaa1e817c0648916",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets the target absolute position for the motor to move to. ",
      "title": "motor_move_absolute",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-motor_move_absolute",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_move_relative",
      "argsString": "(uint8_t port, const double position, const int32_t velocity)",
      "brief": "Sets the relative target position for the motor to move to. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::motor_move_relative",
      "deleted": false,
      "details": "This movement is relative to the current position of the motor as given in [motor_get_position()](namespacepros_1_1c.md#function-motor_get_position). Providing 10.0 as the position parameter would result in the motor moving clockwise 10 units, no matter what the current position is.\n\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_move_relative",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/motors.h",
        "line": 111
      },
      "name": "motor_move_relative",
      "note": [
        "This function simply sets the target for the motor, it does not block program execution until the movement finishes."
      ],
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "position",
          "text": "The relative position to move to in the motor's encoder units "
        },
        {
          "name": "velocity",
          "text": "The maximum allowable velocity for the movement in RPM"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "position",
          "type": "const double",
          "typePlain": "const double"
        },
        {
          "name": "velocity",
          "type": "const int32_t",
          "typePlain": "const int32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a003028bf3f30c48559f442d7c0d74a9a",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets the relative target position for the motor to move to. ",
      "title": "motor_move_relative",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-motor_move_relative",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_move_velocity",
      "argsString": "(uint8_t port, const int32_t velocity)",
      "brief": "Sets the velocity for the motor. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::motor_move_velocity",
      "deleted": false,
      "details": "This velocity corresponds to different actual speeds depending on the gearset used for the motor. This results in a range of +-100 for E_MOTOR_GEARSET_36, +-200 for E_MOTOR_GEARSET_18, and +-600 for E_MOTOR_GEARSET_6. The velocity is held with PID to ensure consistent speed, as opposed to setting the motor's voltage.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_move_velocity",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/motors.h",
        "line": 136
      },
      "name": "motor_move_velocity",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "velocity",
          "text": "The new motor velocity from +-100, +-200, or +-600 depending on the motor's gearset"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "velocity",
          "type": "const int32_t",
          "typePlain": "const int32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a2f3f7e0a243e9432b3d60e4b6147f177",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets the velocity for the motor. ",
      "title": "motor_move_velocity",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-motor_move_velocity",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_move_voltage",
      "argsString": "(uint8_t port, const int32_t voltage)",
      "brief": "Sets the output voltage for the motor from -12000 to 12000 in millivolts. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::motor_move_voltage",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_move_voltage",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/motors.h",
        "line": 154
      },
      "name": "motor_move_voltage",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "voltage",
          "text": "The new voltage value from -12000 to 12000"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "voltage",
          "type": "const int32_t",
          "typePlain": "const int32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1aa8793ceb0f0255af915ae188d5fb04ee",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets the output voltage for the motor from -12000 to 12000 in millivolts. ",
      "title": "motor_move_voltage",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-motor_move_voltage",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_modify_profiled_velocity",
      "argsString": "(uint8_t port, const int32_t velocity)",
      "brief": "Changes the output velocity for a profiled movement (motor_move_absolute or motor_move_relative). ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::motor_modify_profiled_velocity",
      "deleted": false,
      "details": "This will have no effect if the motor is not following a profiled movement.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_modify_profiled_velocity",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/motors.h",
        "line": 175
      },
      "name": "motor_modify_profiled_velocity",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "velocity",
          "text": "The new motor velocity from +-100, +-200, or +-600 depending on the motor's gearset"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "velocity",
          "type": "const int32_t",
          "typePlain": "const int32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a703f1778bee3c934a8ebb3544b59c991",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Changes the output velocity for a profiled movement (motor_move_absolute or motor_move_relative). ",
      "title": "motor_modify_profiled_velocity",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-motor_modify_profiled_velocity",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_get_target_position",
      "argsString": "(uint8_t port)",
      "brief": "Gets the target position set for the motor by the user. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "double pros::c::motor_get_target_position",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_get_target_position",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "pros/motors.h",
        "line": 191
      },
      "name": "motor_get_target_position",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a43583f8ab98cf01f28b0be76b7195a65",
      "returns": [
        "The target position in its encoder units or PROS_ERR_F if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the target position set for the motor by the user. ",
      "title": "motor_get_target_position",
      "type": "double",
      "typePlain": "double",
      "url": "namespacepros_1_1c.md#function-motor_get_target_position",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_get_target_velocity",
      "argsString": "(uint8_t port)",
      "brief": "Gets the velocity commanded to the motor by the user. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::motor_get_target_velocity",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_get_target_velocity",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/motors.h",
        "line": 207
      },
      "name": "motor_get_target_velocity",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a1eced718381a9b2dcea8c87f7c911823",
      "returns": [
        "The commanded motor velocity from +-100, +-200, or +-600, or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the velocity commanded to the motor by the user. ",
      "title": "motor_get_target_velocity",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-motor_get_target_velocity",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_get_actual_velocity",
      "argsString": "(uint8_t port)",
      "brief": "[Motor](classpros_1_1Motor.md) telemetry functions ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "double pros::c::motor_get_actual_velocity",
      "deleted": false,
      "details": "These functions allow programmers to collect telemetry from motors \n\n Gets the actual velocity of the motor.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_get_actual_velocity",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "pros/motors.h",
        "line": 229
      },
      "name": "motor_get_actual_velocity",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1af6df8e89f7178dfd0617ad19bbee64f0",
      "returns": [
        "The motor's actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Motor telemetry functions ",
      "title": "motor_get_actual_velocity",
      "type": "double",
      "typePlain": "double",
      "url": "namespacepros_1_1c.md#function-motor_get_actual_velocity",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_get_current_draw",
      "argsString": "(uint8_t port)",
      "brief": "Gets the current drawn by the motor in mA. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::motor_get_current_draw",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_get_current_draw",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/motors.h",
        "line": 245
      },
      "name": "motor_get_current_draw",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a8b479dd7b771dbcc73f31586af58f0b7",
      "returns": [
        "The motor's current in mA or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the current drawn by the motor in mA. ",
      "title": "motor_get_current_draw",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-motor_get_current_draw",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_get_direction",
      "argsString": "(uint8_t port)",
      "brief": "Gets the direction of movement for the motor. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::motor_get_direction",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_get_direction",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/motors.h",
        "line": 261
      },
      "name": "motor_get_direction",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a20534e746af9bf8840f5f9f23709b7b6",
      "returns": [
        "1 for moving in the positive direction, -1 for moving in the negative direction, or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the direction of movement for the motor. ",
      "title": "motor_get_direction",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-motor_get_direction",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_get_efficiency",
      "argsString": "(uint8_t port)",
      "brief": "Gets the efficiency of the motor in percent. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "double pros::c::motor_get_efficiency",
      "deleted": false,
      "details": "An efficiency of 100% means that the motor is moving electrically while drawing no electrical power, and an efficiency of 0% means that the motor is drawing power but not moving.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_get_efficiency",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "pros/motors.h",
        "line": 281
      },
      "name": "motor_get_efficiency",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a55d36864628b9b95bff9fdc7feaf2812",
      "returns": [
        "The motor's efficiency in percent or PROS_ERR_F if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the efficiency of the motor in percent. ",
      "title": "motor_get_efficiency",
      "type": "double",
      "typePlain": "double",
      "url": "namespacepros_1_1c.md#function-motor_get_efficiency",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_is_over_current",
      "argsString": "(uint8_t port)",
      "brief": "Checks if the motor is drawing over its current limit. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::motor_is_over_current",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_is_over_current",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/motors.h",
        "line": 297
      },
      "name": "motor_is_over_current",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a4b1c83c3dc32a0d982f3bf8683d5b501",
      "returns": [
        "1 if the motor's current limit is being exceeded and 0 if the current limit is not exceeded, or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Checks if the motor is drawing over its current limit. ",
      "title": "motor_is_over_current",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-motor_is_over_current",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_is_over_temp",
      "argsString": "(uint8_t port)",
      "brief": "Checks if the motor's temperature is above its limit. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::motor_is_over_temp",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_is_over_temp",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/motors.h",
        "line": 313
      },
      "name": "motor_is_over_temp",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a2dd9459b8f60c62bee8736fdfbc0913e",
      "returns": [
        "1 if the temperature limit is exceeded and 0 if the the temperature is below the limit, or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Checks if the motor's temperature is above its limit. ",
      "title": "motor_is_over_temp",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-motor_is_over_temp",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_is_stopped",
      "argsString": "(uint8_t port)",
      "brief": "Checks if the motor is stopped. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::motor_is_stopped",
      "deleted": false,
      "explicit": false,
      "fullname": "pros::c::motor_is_stopped",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/motors.h",
        "line": 328
      },
      "name": "motor_is_stopped",
      "note": [
        "Although this function forwards data from the motor, the motor presently does not provide any value. This function returns PROS_ERR with errno set to ENOSYS."
      ],
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a45a429ee4463cce0c1ed82aeb64682e0",
      "returns": [
        "1 if the motor is not moving, 0 if the motor is moving, or PROS_ERR if the operation failed, setting errno "
      ],
      "static": false,
      "strong": false,
      "summary": "Checks if the motor is stopped. ",
      "title": "motor_is_stopped",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-motor_is_stopped",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_get_zero_position_flag",
      "argsString": "(uint8_t port)",
      "brief": "Checks if the motor is at its zero position. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::motor_get_zero_position_flag",
      "deleted": false,
      "explicit": false,
      "fullname": "pros::c::motor_get_zero_position_flag",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/motors.h",
        "line": 344
      },
      "name": "motor_get_zero_position_flag",
      "note": [
        "Although this function forwards data from the motor, the motor presently does not provide any value. This function returns PROS_ERR with errno set to ENOSYS."
      ],
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1aebf9256842edc1b710bd01cc381b9cc9",
      "returns": [
        "1 if the motor is at zero absolute position, 0 if the motor has moved from its absolute zero, or PROS_ERR if the operation failed, setting errno "
      ],
      "static": false,
      "strong": false,
      "summary": "Checks if the motor is at its zero position. ",
      "title": "motor_get_zero_position_flag",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-motor_get_zero_position_flag",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_get_faults",
      "argsString": "(uint8_t port)",
      "brief": "Gets the faults experienced by the motor. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "uint32_t pros::c::motor_get_faults",
      "deleted": false,
      "details": "Compare this bitfield to the bitmasks in motor_fault_e_t.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_get_faults",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 10,
        "file": "pros/motors.h",
        "line": 393
      },
      "name": "motor_get_faults",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1aa979ae75e8ec2aa5d2781fd44d0740b3",
      "returns": [
        "A bitfield containing the motor's faults. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the faults experienced by the motor. ",
      "title": "motor_get_faults",
      "type": "uint32_t",
      "typePlain": "uint32_t",
      "url": "namespacepros_1_1c.md#function-motor_get_faults",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_get_flags",
      "argsString": "(uint8_t port)",
      "brief": "Gets the flags set by the motor's operation. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "uint32_t pros::c::motor_get_flags",
      "deleted": false,
      "details": "Compare this bitfield to the bitmasks in motor_flag_e_t.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_get_flags",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 10,
        "file": "pros/motors.h",
        "line": 439
      },
      "name": "motor_get_flags",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a8f79c82be6571e653baf1ec30cea333e",
      "returns": [
        "A bitfield containing the motor's flags. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the flags set by the motor's operation. ",
      "title": "motor_get_flags",
      "type": "uint32_t",
      "typePlain": "uint32_t",
      "url": "namespacepros_1_1c.md#function-motor_get_flags",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_get_raw_position",
      "argsString": "(uint8_t port, uint32_t *const timestamp)",
      "brief": "Gets the raw encoder count of the motor at a given timestamp. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::motor_get_raw_position",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_get_raw_position",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/motors.h",
        "line": 459
      },
      "name": "motor_get_raw_position",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "timestamp",
          "text": "A pointer to a time in milliseconds for which the encoder count will be returned. If NULL, the timestamp at which the encoder count was read will not be supplied"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "timestamp",
          "type": "uint32_t *const",
          "typePlain": "uint32_t *const"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1afb4370b4ecb9de65323499aa3ed86a3b",
      "returns": [
        "The raw encoder count at the given timestamp or PROS_ERR if the operation failed. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the raw encoder count of the motor at a given timestamp. ",
      "title": "motor_get_raw_position",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-motor_get_raw_position",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_get_position",
      "argsString": "(uint8_t port)",
      "brief": "Gets the absolute position of the motor in its encoder units. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "double pros::c::motor_get_position",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_get_position",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "pros/motors.h",
        "line": 475
      },
      "name": "motor_get_position",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ac58430bb6174017c2d9d6d73f5239bc7",
      "returns": [
        "The motor's absolute position in its encoder units or PROS_ERR_F if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the absolute position of the motor in its encoder units. ",
      "title": "motor_get_position",
      "type": "double",
      "typePlain": "double",
      "url": "namespacepros_1_1c.md#function-motor_get_position",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_get_power",
      "argsString": "(uint8_t port)",
      "brief": "Gets the power drawn by the motor in Watts. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "double pros::c::motor_get_power",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_get_power",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "pros/motors.h",
        "line": 491
      },
      "name": "motor_get_power",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1adf348d43e1996a9f0fe34810a7106a40",
      "returns": [
        "The motor's power draw in Watts or PROS_ERR_F if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the power drawn by the motor in Watts. ",
      "title": "motor_get_power",
      "type": "double",
      "typePlain": "double",
      "url": "namespacepros_1_1c.md#function-motor_get_power",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_get_temperature",
      "argsString": "(uint8_t port)",
      "brief": "Gets the temperature of the motor in degrees Celsius. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "double pros::c::motor_get_temperature",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_get_temperature",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "pros/motors.h",
        "line": 507
      },
      "name": "motor_get_temperature",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1af2dd1acfb47af29b6a39219324726f4e",
      "returns": [
        "The motor's temperature in degrees Celsius or PROS_ERR_F if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the temperature of the motor in degrees Celsius. ",
      "title": "motor_get_temperature",
      "type": "double",
      "typePlain": "double",
      "url": "namespacepros_1_1c.md#function-motor_get_temperature",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_get_torque",
      "argsString": "(uint8_t port)",
      "brief": "Gets the torque generated by the motor in Newton Meters (Nm). ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "double pros::c::motor_get_torque",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_get_torque",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "pros/motors.h",
        "line": 523
      },
      "name": "motor_get_torque",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ac66a8ddb9c51d2620cccf1a60742df63",
      "returns": [
        "The motor's torque in Nm or PROS_ERR_F if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the torque generated by the motor in Newton Meters (Nm). ",
      "title": "motor_get_torque",
      "type": "double",
      "typePlain": "double",
      "url": "namespacepros_1_1c.md#function-motor_get_torque",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_get_voltage",
      "argsString": "(uint8_t port)",
      "brief": "Gets the voltage delivered to the motor in millivolts. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::motor_get_voltage",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_get_voltage",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/motors.h",
        "line": 539
      },
      "name": "motor_get_voltage",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a07b5ab6ea79cb1acd1198a737a302e36",
      "returns": [
        "The motor's voltage in mV or PROS_ERR_F if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the voltage delivered to the motor in millivolts. ",
      "title": "motor_get_voltage",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-motor_get_voltage",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_set_zero_position",
      "argsString": "(uint8_t port, const double position)",
      "brief": "Sets the position for the motor in its encoder units. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::motor_set_zero_position",
      "deleted": false,
      "details": "This will be the future reference point for the motor's \"absolute\" position.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_set_zero_position",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/motors.h",
        "line": 670
      },
      "name": "motor_set_zero_position",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "position",
          "text": "The new reference position in its encoder units"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "position",
          "type": "const double",
          "typePlain": "const double"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a6f42e8dcf4590a6fc74c84a70cd1b1b1",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets the position for the motor in its encoder units. ",
      "title": "motor_set_zero_position",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-motor_set_zero_position",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_tare_position",
      "argsString": "(uint8_t port)",
      "brief": "Sets the \"absolute\" zero position of the motor to its current position. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::motor_tare_position",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_tare_position",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/motors.h",
        "line": 686
      },
      "name": "motor_tare_position",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a19639a621005bd73085fcf876adc40a6",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets the \"absolute\" zero position of the motor to its current position. ",
      "title": "motor_tare_position",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-motor_tare_position",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_set_brake_mode",
      "argsString": "(uint8_t port, const motor_brake_mode_e_t mode)",
      "brief": "Sets one of motor_brake_mode_e_t to the motor. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::motor_set_brake_mode",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_set_brake_mode",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/motors.h",
        "line": 704
      },
      "name": "motor_set_brake_mode",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "mode",
          "text": "The motor_brake_mode_e_t to set for the motor"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "mode",
          "type": "const motor_brake_mode_e_t",
          "typePlain": "const motor_brake_mode_e_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a0ff7ffe606163837a16f9824a1e144cc",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets one of motor_brake_mode_e_t to the motor. ",
      "title": "motor_set_brake_mode",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-motor_set_brake_mode",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_set_current_limit",
      "argsString": "(uint8_t port, const int32_t limit)",
      "brief": "Sets the current limit for the motor in mA. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::motor_set_current_limit",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_set_current_limit",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/motors.h",
        "line": 722
      },
      "name": "motor_set_current_limit",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "limit",
          "text": "The new current limit in mA"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "limit",
          "type": "const int32_t",
          "typePlain": "const int32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a183e8b3347d77778651e474b710efb14",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets the current limit for the motor in mA. ",
      "title": "motor_set_current_limit",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-motor_set_current_limit",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_set_encoder_units",
      "argsString": "(uint8_t port, const motor_encoder_units_e_t units)",
      "brief": "Sets one of motor_encoder_units_e_t for the motor encoder. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::motor_set_encoder_units",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_set_encoder_units",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/motors.h",
        "line": 740
      },
      "name": "motor_set_encoder_units",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "units",
          "text": "The new motor encoder units"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "units",
          "type": "const motor_encoder_units_e_t",
          "typePlain": "const motor_encoder_units_e_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a41fd144931ec4dd1ec0bec7418c16edf",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets one of motor_encoder_units_e_t for the motor encoder. ",
      "title": "motor_set_encoder_units",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-motor_set_encoder_units",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_set_gearing",
      "argsString": "(uint8_t port, const motor_gearset_e_t gearset)",
      "brief": "Sets one of motor_gearset_e_t for the motor. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::motor_set_gearing",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_set_gearing",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/motors.h",
        "line": 758
      },
      "name": "motor_set_gearing",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "gearset",
          "text": "The new motor gearset"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "gearset",
          "type": "const motor_gearset_e_t",
          "typePlain": "const motor_gearset_e_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a1cc937fd10150c02f4f0460a34ff1be6",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets one of motor_gearset_e_t for the motor. ",
      "title": "motor_set_gearing",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-motor_set_gearing",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_convert_pid",
      "argsString": "(double kf, double kp, double ki, double kd)",
      "brief": "Takes in floating point values and returns a properly formatted pid struct. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "motor_pid_s_t pros::c::motor_convert_pid",
      "deleted": false,
      "details": "The motor_pid_s_t struct is in 4.4 format, i.e. 0x20 is 2.0, 0x21 is 2.0625, etc. This function will convert the floating point values to the nearest 4.4 value.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_convert_pid",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 15,
        "file": "pros/motors.h",
        "line": 783
      },
      "name": "motor_convert_pid",
      "override": false,
      "paramList": [
        {
          "name": "kf",
          "text": "The feedforward constant "
        },
        {
          "name": "kp",
          "text": "The proportional constant "
        },
        {
          "name": "ki",
          "text": "The integral constant "
        },
        {
          "name": "kd",
          "text": "The derivative constant"
        }
      ],
      "params": [
        {
          "name": "kf",
          "type": "double",
          "typePlain": "double"
        },
        {
          "name": "kp",
          "type": "double",
          "typePlain": "double"
        },
        {
          "name": "ki",
          "type": "double",
          "typePlain": "double"
        },
        {
          "name": "kd",
          "type": "double",
          "typePlain": "double"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a9e3b5d0def5ba504928178abf23c80d8",
      "returns": [
        "A motor_pid_s_t struct formatted properly in 4.4. "
      ],
      "static": false,
      "strong": false,
      "summary": "Takes in floating point values and returns a properly formatted pid struct. ",
      "title": "motor_convert_pid",
      "type": "motor_pid_s_t",
      "typePlain": "motor_pid_s_t",
      "url": "namespacepros_1_1c.md#function-motor_convert_pid",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_convert_pid_full",
      "argsString": "(double kf, double kp, double ki, double kd, double filter, double limit, double threshold, double loopspeed)",
      "brief": "Takes in floating point values and returns a properly formatted pid struct. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "motor_pid_full_s_t pros::c::motor_convert_pid_full",
      "deleted": false,
      "details": "The motor_pid_s_t struct is in 4.4 format, i.e. 0x20 is 2.0, 0x21 is 2.0625, etc. This function will convert the floating point values to the nearest 4.4 value.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_convert_pid_full",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 20,
        "file": "pros/motors.h",
        "line": 817
      },
      "name": "motor_convert_pid_full",
      "override": false,
      "paramList": [
        {
          "name": "kf",
          "text": "The feedforward constant "
        },
        {
          "name": "kp",
          "text": "The proportional constant "
        },
        {
          "name": "ki",
          "text": "The integral constant "
        },
        {
          "name": "kd",
          "text": "The derivative constant "
        },
        {
          "name": "filter",
          "text": "A constant used for filtering the profile acceleration "
        },
        {
          "name": "limit",
          "text": "The integral limit "
        },
        {
          "name": "threshold",
          "text": "The threshold for determining if a position movement has reached its goal. This has no effect for velocity PID calculations. "
        },
        {
          "name": "loopspeed",
          "text": "The rate at which the PID computation is run in ms"
        }
      ],
      "params": [
        {
          "name": "kf",
          "type": "double",
          "typePlain": "double"
        },
        {
          "name": "kp",
          "type": "double",
          "typePlain": "double"
        },
        {
          "name": "ki",
          "type": "double",
          "typePlain": "double"
        },
        {
          "name": "kd",
          "type": "double",
          "typePlain": "double"
        },
        {
          "name": "filter",
          "type": "double",
          "typePlain": "double"
        },
        {
          "name": "limit",
          "type": "double",
          "typePlain": "double"
        },
        {
          "name": "threshold",
          "type": "double",
          "typePlain": "double"
        },
        {
          "name": "loopspeed",
          "type": "double",
          "typePlain": "double"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1aa7eaca1359653a86fe25ac31d9fea9e1",
      "returns": [
        "A motor_pid_s_t struct formatted properly in 4.4. "
      ],
      "static": false,
      "strong": false,
      "summary": "Takes in floating point values and returns a properly formatted pid struct. ",
      "title": "motor_convert_pid_full",
      "type": "motor_pid_full_s_t",
      "typePlain": "motor_pid_full_s_t",
      "url": "namespacepros_1_1c.md#function-motor_convert_pid_full",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_set_pos_pid",
      "argsString": "(uint8_t port, const motor_pid_s_t pid)",
      "brief": "Sets one of motor_pid_s_t for the motor. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::motor_set_pos_pid",
      "deleted": false,
      "details": "This intended to just modify the main PID constants.\n\nOnly non-zero values of the struct will change the existing motor constants.\n\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_set_pos_pid",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/motors.h",
        "line": 842
      },
      "name": "motor_set_pos_pid",
      "note": [
        "This feature is in beta, it is advised to use caution when modifying the PID values. The motor could be damaged by particularly large constants."
      ],
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "pid",
          "text": "The new motor PID constants"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "pid",
          "type": "const motor_pid_s_t",
          "typePlain": "const motor_pid_s_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ab0b4f1bc39192d62df335064eb1bce8d",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets one of motor_pid_s_t for the motor. ",
      "title": "motor_set_pos_pid",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-motor_set_pos_pid",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_set_pos_pid_full",
      "argsString": "(uint8_t port, const motor_pid_full_s_t pid)",
      "brief": "Sets one of motor_pid_full_s_t for the motor. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::motor_set_pos_pid_full",
      "deleted": false,
      "details": "Only non-zero values of the struct will change the existing motor constants.\n\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_set_pos_pid_full",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/motors.h",
        "line": 865
      },
      "name": "motor_set_pos_pid_full",
      "note": [
        "This feature is in beta, it is advised to use caution when modifying the PID values. The motor could be damaged by particularly large constants."
      ],
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "pid",
          "text": "The new motor PID constants"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "pid",
          "type": "const motor_pid_full_s_t",
          "typePlain": "const motor_pid_full_s_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a687b54bd7ab9f44648d429738218bbdd",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets one of motor_pid_full_s_t for the motor. ",
      "title": "motor_set_pos_pid_full",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-motor_set_pos_pid_full",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_set_vel_pid",
      "argsString": "(uint8_t port, const motor_pid_s_t pid)",
      "brief": "Sets one of motor_pid_s_t for the motor. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::motor_set_vel_pid",
      "deleted": false,
      "details": "This intended to just modify the main PID constants.\n\nOnly non-zero values of the struct will change the existing motor constants.\n\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_set_vel_pid",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/motors.h",
        "line": 889
      },
      "name": "motor_set_vel_pid",
      "note": [
        "This feature is in beta, it is advised to use caution when modifying the PID values. The motor could be damaged by particularly large constants."
      ],
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "pid",
          "text": "The new motor PID constants"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "pid",
          "type": "const motor_pid_s_t",
          "typePlain": "const motor_pid_s_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1aa9610f71331eb8d508a284af4de011bc",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets one of motor_pid_s_t for the motor. ",
      "title": "motor_set_vel_pid",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-motor_set_vel_pid",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_set_vel_pid_full",
      "argsString": "(uint8_t port, const motor_pid_full_s_t pid)",
      "brief": "Sets one of motor_pid_full_s_t for the motor. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::motor_set_vel_pid_full",
      "deleted": false,
      "details": "Only non-zero values of the struct will change the existing motor constants.\n\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_set_vel_pid_full",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/motors.h",
        "line": 912
      },
      "name": "motor_set_vel_pid_full",
      "note": [
        "This feature is in beta, it is advised to use caution when modifying the PID values. The motor could be damaged by particularly large constants."
      ],
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "pid",
          "text": "The new motor PID constants"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "pid",
          "type": "const motor_pid_full_s_t",
          "typePlain": "const motor_pid_full_s_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a8ecb787c318f55ff9fabc3f6e74c5cfc",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets one of motor_pid_full_s_t for the motor. ",
      "title": "motor_set_vel_pid_full",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-motor_set_vel_pid_full",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_set_reversed",
      "argsString": "(uint8_t port, const bool reverse)",
      "brief": "Sets the reverse flag for the motor. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::motor_set_reversed",
      "deleted": false,
      "details": "This will invert its movements and the values returned for its position.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_set_reversed",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/motors.h",
        "line": 932
      },
      "name": "motor_set_reversed",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "reverse",
          "text": "True reverses the motor, false is default"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "reverse",
          "type": "const bool",
          "typePlain": "const bool"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a5864df7dd39cdf2f3372dfc9ae1b08ea",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets the reverse flag for the motor. ",
      "title": "motor_set_reversed",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-motor_set_reversed",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_set_voltage_limit",
      "argsString": "(uint8_t port, const int32_t limit)",
      "brief": "Sets the voltage limit for the motor in Volts. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::motor_set_voltage_limit",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_set_voltage_limit",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/motors.h",
        "line": 950
      },
      "name": "motor_set_voltage_limit",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "limit",
          "text": "The new voltage limit in Volts"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "limit",
          "type": "const int32_t",
          "typePlain": "const int32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ab59cffbc3a50db8eb5687c1e522fb6a7",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets the voltage limit for the motor in Volts. ",
      "title": "motor_set_voltage_limit",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-motor_set_voltage_limit",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_get_brake_mode",
      "argsString": "(uint8_t port)",
      "brief": "Gets the brake mode that was set for the motor. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "motor_brake_mode_e_t pros::c::motor_get_brake_mode",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_get_brake_mode",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 22,
        "file": "pros/motors.h",
        "line": 966
      },
      "name": "motor_get_brake_mode",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1af0c50aa23a8f9f6c6620676a7e0afcd8",
      "returns": [
        "One of motor_brake_mode_e_t, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the brake mode that was set for the motor. ",
      "title": "motor_get_brake_mode",
      "type": "motor_brake_mode_e_t",
      "typePlain": "motor_brake_mode_e_t",
      "url": "namespacepros_1_1c.md#function-motor_get_brake_mode",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_get_current_limit",
      "argsString": "(uint8_t port)",
      "brief": "Gets the current limit for the motor in mA. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::motor_get_current_limit",
      "deleted": false,
      "details": "The default value is 2500 mA.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_get_current_limit",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/motors.h",
        "line": 984
      },
      "name": "motor_get_current_limit",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a46246323d1c5be7ed83af170c2bd1c89",
      "returns": [
        "The motor's current limit in mA or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the current limit for the motor in mA. ",
      "title": "motor_get_current_limit",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-motor_get_current_limit",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_get_encoder_units",
      "argsString": "(uint8_t port)",
      "brief": "Gets the encoder units that were set for the motor. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "motor_encoder_units_e_t pros::c::motor_get_encoder_units",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_get_encoder_units",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 25,
        "file": "pros/motors.h",
        "line": 1000
      },
      "name": "motor_get_encoder_units",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a649a71c554225928cd9f8e2ed0bd3d6c",
      "returns": [
        "One of motor_encoder_units_e_t according to what is set for the motor or E_MOTOR_ENCODER_INVALID if the operation failed. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the encoder units that were set for the motor. ",
      "title": "motor_get_encoder_units",
      "type": "motor_encoder_units_e_t",
      "typePlain": "motor_encoder_units_e_t",
      "url": "namespacepros_1_1c.md#function-motor_get_encoder_units",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_get_gearing",
      "argsString": "(uint8_t port)",
      "brief": "Gets the gearset that was set for the motor. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "motor_gearset_e_t pros::c::motor_get_gearing",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_get_gearing",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 19,
        "file": "pros/motors.h",
        "line": 1016
      },
      "name": "motor_get_gearing",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a568fdf3db5acd5a58a289222fa13788a",
      "returns": [
        "One of motor_gearset_e_t according to what is set for the motor, or E_GEARSET_INVALID if the operation failed. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the gearset that was set for the motor. ",
      "title": "motor_get_gearing",
      "type": "motor_gearset_e_t",
      "typePlain": "motor_gearset_e_t",
      "url": "namespacepros_1_1c.md#function-motor_get_gearing",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_get_pos_pid",
      "argsString": "(uint8_t port)",
      "brief": "Gets the position PID that was set for the motor. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "motor_pid_full_s_t pros::c::motor_get_pos_pid",
      "deleted": false,
      "details": "This function will return zero for all of the parameters if the [motor_set_pos_pid()](namespacepros_1_1c.md#function-motor_set_pos_pid) or [motor_set_pos_pid_full()](namespacepros_1_1c.md#function-motor_set_pos_pid_full) functions have not been used.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor\n\nAdditionally, in an error state all values of the returned struct are set to their negative maximum values.",
      "explicit": false,
      "fullname": "pros::c::motor_get_pos_pid",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 20,
        "file": "pros/motors.h",
        "line": 1037
      },
      "name": "motor_get_pos_pid",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ab9be127a6e437c8ea169ac351dee587e",
      "returns": [
        "A motor_pid_full_s_t containing the position PID constants last set to the given motor "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the position PID that was set for the motor. ",
      "title": "motor_get_pos_pid",
      "type": "motor_pid_full_s_t",
      "typePlain": "motor_pid_full_s_t",
      "url": "namespacepros_1_1c.md#function-motor_get_pos_pid",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_get_vel_pid",
      "argsString": "(uint8_t port)",
      "brief": "Gets the velocity PID that was set for the motor. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "motor_pid_full_s_t pros::c::motor_get_vel_pid",
      "deleted": false,
      "details": "This function will return zero for all of the parameters if the [motor_set_vel_pid()](namespacepros_1_1c.md#function-motor_set_vel_pid) or [motor_set_vel_pid_full()](namespacepros_1_1c.md#function-motor_set_vel_pid_full) functions have not been used.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor\n\nAdditionally, in an error state all values of the returned struct are set to their negative maximum values.",
      "explicit": false,
      "fullname": "pros::c::motor_get_vel_pid",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 20,
        "file": "pros/motors.h",
        "line": 1058
      },
      "name": "motor_get_vel_pid",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ab810fbea55d47dc839d4ae1152e39149",
      "returns": [
        "A motor_pid_full_s_t containing the velocity PID constants last set to the given motor "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the velocity PID that was set for the motor. ",
      "title": "motor_get_vel_pid",
      "type": "motor_pid_full_s_t",
      "typePlain": "motor_pid_full_s_t",
      "url": "namespacepros_1_1c.md#function-motor_get_vel_pid",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_is_reversed",
      "argsString": "(uint8_t port)",
      "brief": "Gets the operation direction of the motor as set by the user. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::motor_is_reversed",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_is_reversed",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/motors.h",
        "line": 1074
      },
      "name": "motor_is_reversed",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a6597ffea77e9e7e9c3bb3c3d5427c68c",
      "returns": [
        "1 if the motor has been reversed and 0 if the motor was not reversed, or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the operation direction of the motor as set by the user. ",
      "title": "motor_is_reversed",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-motor_is_reversed",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-motor_get_voltage_limit",
      "argsString": "(uint8_t port)",
      "brief": "Gets the voltage limit set by the user. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::motor_get_voltage_limit",
      "deleted": false,
      "details": "Default value is 0V, which means that there is no software limitation imposed on the voltage.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor",
      "explicit": false,
      "fullname": "pros::c::motor_get_voltage_limit",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/motors.h",
        "line": 1093
      },
      "name": "motor_get_voltage_limit",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a13462c28c1a64cbcb5da656b60ee3f96",
      "returns": [
        "The motor's voltage limit in V or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the voltage limit set by the user. ",
      "title": "motor_get_voltage_limit",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-motor_get_voltage_limit",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-millis",
      "argsString": "(void)",
      "brief": "Gets the number of milliseconds since PROS initialized. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "uint32_t pros::c::millis",
      "deleted": false,
      "explicit": false,
      "fullname": "pros::c::millis",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 10,
        "file": "pros/rtos.h",
        "line": 126
      },
      "name": "millis",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "void",
          "typePlain": "void"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1aa247cd38039665b7ac4b0d0920b83c80",
      "returns": [
        "The number of milliseconds since PROS initialized "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the number of milliseconds since PROS initialized. ",
      "title": "millis",
      "type": "uint32_t",
      "typePlain": "uint32_t",
      "url": "namespacepros_1_1c.md#function-millis",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_create",
      "argsString": "(task_fn_t function, void *const parameters, uint32_t prio, const uint16_t stack_depth, const char *const name)",
      "brief": "Creates a new task and add it to the list of tasks that are ready to run. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "task_t pros::c::task_create",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENOMEM - The stack cannot be used as the TCB was not created.",
      "explicit": false,
      "fullname": "pros::c::task_create",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "pros/rtos.h",
        "line": 155
      },
      "name": "task_create",
      "override": false,
      "paramList": [
        {
          "name": "function",
          "text": "Pointer to the task entry function "
        },
        {
          "name": "parameters",
          "text": "Pointer to memory that will be used as a parameter for the task being created. This memory should not typically come from stack, but rather from dynamically (i.e., malloc'd) or statically allocated memory. "
        },
        {
          "name": "prio",
          "text": "The priority at which the task should run. TASK_PRIO_DEFAULT plus/minus 1 or 2 is typically used. "
        },
        {
          "name": "stack_depth",
          "text": "The number of words (i.e. 4 * stack_depth) available on the task's stack. TASK_STACK_DEPTH_DEFAULT is typically sufficienct. "
        },
        {
          "name": "name",
          "text": "A descriptive name for the task. This is mainly used to facilitate debugging. The name may be up to 32 characters long."
        }
      ],
      "params": [
        {
          "name": "function",
          "type": "[task_fn_t](namespacepros.md#typedef-task_fn_t)",
          "typePlain": "task_fn_t"
        },
        {
          "name": "parameters",
          "type": "void *const",
          "typePlain": "void *const"
        },
        {
          "name": "prio",
          "type": "uint32_t",
          "typePlain": "uint32_t"
        },
        {
          "name": "stack_depth",
          "type": "const uint16_t",
          "typePlain": "const uint16_t"
        },
        {
          "name": "name",
          "type": "const char *const",
          "typePlain": "const char *const"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ab7f6e243b717091fec2bac6405bd3d56",
      "returns": [
        "A handle by which the newly created task can be referenced. If an error occurred, NULL will be returned and errno can be checked for hints as to why task_create failed. "
      ],
      "static": false,
      "strong": false,
      "summary": "Creates a new task and add it to the list of tasks that are ready to run. ",
      "title": "task_create",
      "type": "[task_t](namespacepros.md#typedef-task_t)",
      "typePlain": "task_t",
      "url": "namespacepros_1_1c.md#function-task_create",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_delete",
      "argsString": "(task_t task)",
      "brief": "Removes a task from the RTOS real time kernel's management. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void pros::c::task_delete",
      "deleted": false,
      "details": "The task being deleted will be removed from all ready, blocked, suspended and event lists.\n\nMemory dynamically allocated by the task is not automatically freed, and should be freed before the task is deleted.",
      "explicit": false,
      "fullname": "pros::c::task_delete",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/rtos.h",
        "line": 169
      },
      "name": "task_delete",
      "override": false,
      "paramList": [
        {
          "name": "task",
          "text": "The handle of the task to be deleted. Passing NULL will cause the calling task to be deleted. "
        }
      ],
      "params": [
        {
          "name": "task",
          "type": "[task_t](namespacepros.md#typedef-task_t)",
          "typePlain": "task_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a9f5bd026f982b738d8761c443af586da",
      "static": false,
      "strong": false,
      "summary": "Removes a task from the RTOS real time kernel's management. ",
      "title": "task_delete",
      "type": "void",
      "typePlain": "void",
      "url": "namespacepros_1_1c.md#function-task_delete",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_delay",
      "argsString": "(const uint32_t milliseconds)",
      "brief": "Delays a task for a given number of milliseconds. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void pros::c::task_delay",
      "deleted": false,
      "details": "This is not the best method to have a task execute code at predefined intervals, as the delay time is measured from when the delay is requested. To delay cyclically, use [task_delay_until()](namespacepros_1_1c.md#function-task_delay_until).",
      "explicit": false,
      "fullname": "pros::c::task_delay",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/rtos.h",
        "line": 181
      },
      "name": "task_delay",
      "override": false,
      "paramList": [
        {
          "name": "milliseconds",
          "text": "The number of milliseconds to wait (1000 milliseconds per second) "
        }
      ],
      "params": [
        {
          "name": "milliseconds",
          "type": "const uint32_t",
          "typePlain": "const uint32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a4954a1ed8e37fd9b758ff98bf3ecf7d4",
      "static": false,
      "strong": false,
      "summary": "Delays a task for a given number of milliseconds. ",
      "title": "task_delay",
      "type": "void",
      "typePlain": "void",
      "url": "namespacepros_1_1c.md#function-task_delay",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-delay",
      "argsString": "(const uint32_t milliseconds)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void pros::c::delay",
      "deleted": false,
      "explicit": false,
      "fullname": "pros::c::delay",
      "hasDetails": false,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/rtos.h",
        "line": 183
      },
      "name": "delay",
      "override": false,
      "params": [
        {
          "name": "milliseconds",
          "type": "const uint32_t",
          "typePlain": "const uint32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a6a62f5325d65f95436762552df547d73",
      "static": false,
      "strong": false,
      "title": "delay",
      "type": "void",
      "typePlain": "void",
      "url": "namespacepros_1_1c.md#function-delay",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_delay_until",
      "argsString": "(uint32_t *const prev_time, const uint32_t delta)",
      "brief": "Delays a task until a specified time. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void pros::c::task_delay_until",
      "deleted": false,
      "details": "This function can be used by periodic tasks to ensure a constant execution frequency.\n\nThe task will be woken up at the time *prev_time + delta, and *prev_time will be updated to reflect the time at which the task will unblock.",
      "explicit": false,
      "fullname": "pros::c::task_delay_until",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/rtos.h",
        "line": 198
      },
      "name": "task_delay_until",
      "override": false,
      "paramList": [
        {
          "name": "prev_time",
          "text": "A pointer to the location storing the setpoint time. This should typically be initialized to the return value of [millis()](namespacepros_1_1c.md#function-millis). "
        },
        {
          "name": "delta",
          "text": "The number of milliseconds to wait (1000 milliseconds per second) "
        }
      ],
      "params": [
        {
          "name": "prev_time",
          "type": "uint32_t *const",
          "typePlain": "uint32_t *const"
        },
        {
          "name": "delta",
          "type": "const uint32_t",
          "typePlain": "const uint32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a151eaf730a10d101bff15013a76b9aa8",
      "static": false,
      "strong": false,
      "summary": "Delays a task until a specified time. ",
      "title": "task_delay_until",
      "type": "void",
      "typePlain": "void",
      "url": "namespacepros_1_1c.md#function-task_delay_until",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_get_priority",
      "argsString": "(task_t task)",
      "brief": "Gets the priority of the specified task. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "uint32_t pros::c::task_get_priority",
      "deleted": false,
      "explicit": false,
      "fullname": "pros::c::task_get_priority",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 10,
        "file": "pros/rtos.h",
        "line": 208
      },
      "name": "task_get_priority",
      "override": false,
      "paramList": [
        {
          "name": "task",
          "text": "The task to check"
        }
      ],
      "params": [
        {
          "name": "task",
          "type": "[task_t](namespacepros.md#typedef-task_t)",
          "typePlain": "task_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ab49c228af50a4677d45e4622fb5f982b",
      "returns": [
        "The priority of the task "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the priority of the specified task. ",
      "title": "task_get_priority",
      "type": "uint32_t",
      "typePlain": "uint32_t",
      "url": "namespacepros_1_1c.md#function-task_get_priority",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_set_priority",
      "argsString": "(task_t task, uint32_t prio)",
      "brief": "Sets the priority of the specified task. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void pros::c::task_set_priority",
      "deleted": false,
      "details": "If the specified task's state is available to be scheduled (e.g. not blocked) and new priority is higher than the currently running task, a context switch may occur.",
      "explicit": false,
      "fullname": "pros::c::task_set_priority",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/rtos.h",
        "line": 222
      },
      "name": "task_set_priority",
      "override": false,
      "paramList": [
        {
          "name": "task",
          "text": "The task to set "
        },
        {
          "name": "prio",
          "text": "The new priority of the task "
        }
      ],
      "params": [
        {
          "name": "task",
          "type": "[task_t](namespacepros.md#typedef-task_t)",
          "typePlain": "task_t"
        },
        {
          "name": "prio",
          "type": "uint32_t",
          "typePlain": "uint32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a6f4a1c359ab23c7811ed524aa8f71e06",
      "static": false,
      "strong": false,
      "summary": "Sets the priority of the specified task. ",
      "title": "task_set_priority",
      "type": "void",
      "typePlain": "void",
      "url": "namespacepros_1_1c.md#function-task_set_priority",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_get_state",
      "argsString": "(task_t task)",
      "brief": "Gets the state of the specified task. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "task_state_e_t pros::c::task_get_state",
      "deleted": false,
      "explicit": false,
      "fullname": "pros::c::task_get_state",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 16,
        "file": "pros/rtos.h",
        "line": 232
      },
      "name": "task_get_state",
      "override": false,
      "paramList": [
        {
          "name": "task",
          "text": "The task to check"
        }
      ],
      "params": [
        {
          "name": "task",
          "type": "[task_t](namespacepros.md#typedef-task_t)",
          "typePlain": "task_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a2e78836b08bab39de392cc6583383c5c",
      "returns": [
        "The state of the task "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the state of the specified task. ",
      "title": "task_get_state",
      "type": "[task_state_e_t](namespacepros.md#enum-task_state_e_t)",
      "typePlain": "task_state_e_t",
      "url": "namespacepros_1_1c.md#function-task_get_state",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_suspend",
      "argsString": "(task_t task)",
      "brief": "Suspends the specified task, making it ineligible to be scheduled. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void pros::c::task_suspend",
      "deleted": false,
      "explicit": false,
      "fullname": "pros::c::task_suspend",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/rtos.h",
        "line": 240
      },
      "name": "task_suspend",
      "override": false,
      "paramList": [
        {
          "name": "task",
          "text": "The task to suspend "
        }
      ],
      "params": [
        {
          "name": "task",
          "type": "[task_t](namespacepros.md#typedef-task_t)",
          "typePlain": "task_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a03b6c85287d209a26f882813f3a29eee",
      "static": false,
      "strong": false,
      "summary": "Suspends the specified task, making it ineligible to be scheduled. ",
      "title": "task_suspend",
      "type": "void",
      "typePlain": "void",
      "url": "namespacepros_1_1c.md#function-task_suspend",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_resume",
      "argsString": "(task_t task)",
      "brief": "Resumes the specified task, making it eligible to be scheduled. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void pros::c::task_resume",
      "deleted": false,
      "explicit": false,
      "fullname": "pros::c::task_resume",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/rtos.h",
        "line": 248
      },
      "name": "task_resume",
      "override": false,
      "paramList": [
        {
          "name": "task",
          "text": "The task to resume "
        }
      ],
      "params": [
        {
          "name": "task",
          "type": "[task_t](namespacepros.md#typedef-task_t)",
          "typePlain": "task_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1af44f1148d2f7ede99ebd023479812fba",
      "static": false,
      "strong": false,
      "summary": "Resumes the specified task, making it eligible to be scheduled. ",
      "title": "task_resume",
      "type": "void",
      "typePlain": "void",
      "url": "namespacepros_1_1c.md#function-task_resume",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_get_count",
      "argsString": "(void)",
      "brief": "Gets the number of tasks the kernel is currently managing, including all ready, blocked, or suspended tasks. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "uint32_t pros::c::task_get_count",
      "deleted": false,
      "details": "A task that has been deleted, but not yet reaped by the idle task will also be included in the count. Tasks recently created may take one context switch to be counted.",
      "explicit": false,
      "fullname": "pros::c::task_get_count",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 10,
        "file": "pros/rtos.h",
        "line": 258
      },
      "name": "task_get_count",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "void",
          "typePlain": "void"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1abb3a36bf47f6df9c981b1d585b922497",
      "returns": [
        "The number of tasks that are currently being managed by the kernel. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the number of tasks the kernel is currently managing, including all ready, blocked, or suspended tasks. ",
      "title": "task_get_count",
      "type": "uint32_t",
      "typePlain": "uint32_t",
      "url": "namespacepros_1_1c.md#function-task_get_count",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_get_name",
      "argsString": "(task_t task)",
      "brief": "Gets the name of the specified task. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "char* pros::c::task_get_name",
      "deleted": false,
      "explicit": false,
      "fullname": "pros::c::task_get_name",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/rtos.h",
        "line": 268
      },
      "name": "task_get_name",
      "override": false,
      "paramList": [
        {
          "name": "task",
          "text": "The task to check"
        }
      ],
      "params": [
        {
          "name": "task",
          "type": "[task_t](namespacepros.md#typedef-task_t)",
          "typePlain": "task_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a1000d8e18af587837b65ab74b79d1cc8",
      "returns": [
        "A pointer to the name of the task "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the name of the specified task. ",
      "title": "task_get_name",
      "type": "char *",
      "typePlain": "char *",
      "url": "namespacepros_1_1c.md#function-task_get_name",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_get_by_name",
      "argsString": "(const char *name)",
      "brief": "Gets a task handle from the specified name. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "task_t pros::c::task_get_by_name",
      "deleted": false,
      "details": "The operation takes a relatively long time and should be used sparingly.",
      "explicit": false,
      "fullname": "pros::c::task_get_by_name",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "pros/rtos.h",
        "line": 280
      },
      "name": "task_get_by_name",
      "override": false,
      "paramList": [
        {
          "name": "name",
          "text": "The name to query"
        }
      ],
      "params": [
        {
          "name": "name",
          "type": "const char *",
          "typePlain": "const char *"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ace3de5c48a2d91b9843ac9bd62a62d91",
      "returns": [
        "A task handle with a matching name, or NULL if none were found. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets a task handle from the specified name. ",
      "title": "task_get_by_name",
      "type": "[task_t](namespacepros.md#typedef-task_t)",
      "typePlain": "task_t",
      "url": "namespacepros_1_1c.md#function-task_get_by_name",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_get_current",
      "argsString": "()",
      "brief": "Get the currently running task handle. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "task_t pros::c::task_get_current",
      "deleted": false,
      "details": "This could be useful if a task wants to tell another task about itself.",
      "explicit": false,
      "fullname": "pros::c::task_get_current",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 8,
        "file": "pros/rtos.h",
        "line": 288
      },
      "name": "task_get_current",
      "override": false,
      "params": [],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a663301f01d0cc8ecfd238fbe1346fc4d",
      "returns": [
        "The currently running task handle. "
      ],
      "static": false,
      "strong": false,
      "summary": "Get the currently running task handle. ",
      "title": "task_get_current",
      "type": "[task_t](namespacepros.md#typedef-task_t)",
      "typePlain": "task_t",
      "url": "namespacepros_1_1c.md#function-task_get_current",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_notify",
      "argsString": "(task_t task)",
      "brief": "Sends a simple notification to task and increments the notification counter. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "uint32_t pros::c::task_notify",
      "deleted": false,
      "details": "See [https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html](https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html) for details.",
      "explicit": false,
      "fullname": "pros::c::task_notify",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 10,
        "file": "pros/rtos.h",
        "line": 301
      },
      "name": "task_notify",
      "override": false,
      "paramList": [
        {
          "name": "task",
          "text": "The task to notify"
        }
      ],
      "params": [
        {
          "name": "task",
          "type": "[task_t](namespacepros.md#typedef-task_t)",
          "typePlain": "task_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1af69af2a08ca85bd16fa3d1b75dbcf790",
      "returns": [
        "Always returns true. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sends a simple notification to task and increments the notification counter. ",
      "title": "task_notify",
      "type": "uint32_t",
      "typePlain": "uint32_t",
      "url": "namespacepros_1_1c.md#function-task_notify",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_notify_ext",
      "argsString": "(task_t task, uint32_t value, notify_action_e_t action, uint32_t *prev_value)",
      "brief": "Sends a notification to a task, optionally performing some action. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "uint32_t pros::c::task_notify_ext",
      "deleted": false,
      "details": "Will also retrieve the value of the notification in the target task before modifying the notification value.\n\nSee [https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html](https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html) for details.",
      "explicit": false,
      "fullname": "pros::c::task_notify_ext",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 10,
        "file": "pros/rtos.h",
        "line": 327
      },
      "name": "task_notify_ext",
      "override": false,
      "paramList": [
        {
          "name": "task",
          "text": "The task to notify "
        },
        {
          "name": "value",
          "text": "The value used in performing the action "
        },
        {
          "name": "action",
          "text": "An action to optionally perform on the receiving task's notification value "
        },
        {
          "name": "prev_value",
          "text": "A pointer to store the previous value of the target task's notification, may be NULL"
        }
      ],
      "params": [
        {
          "name": "task",
          "type": "[task_t](namespacepros.md#typedef-task_t)",
          "typePlain": "task_t"
        },
        {
          "name": "value",
          "type": "uint32_t",
          "typePlain": "uint32_t"
        },
        {
          "name": "action",
          "type": "[notify_action_e_t](namespacepros.md#enum-notify_action_e_t)",
          "typePlain": "notify_action_e_t"
        },
        {
          "name": "prev_value",
          "type": "uint32_t *",
          "typePlain": "uint32_t *"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1af21b3326026e04f277e85236f4ff503a",
      "returns": [
        "Dependent on the notification action. For NOTIFY_ACTION_NO_WRITE: return 0 if the value could be written without needing to overwrite, 1 otherwise. For all other NOTIFY_ACTION values: always return 0 "
      ],
      "static": false,
      "strong": false,
      "summary": "Sends a notification to a task, optionally performing some action. ",
      "title": "task_notify_ext",
      "type": "uint32_t",
      "typePlain": "uint32_t",
      "url": "namespacepros_1_1c.md#function-task_notify_ext",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_notify_take",
      "argsString": "(bool clear_on_exit, uint32_t timeout)",
      "brief": "Waits for a notification to be nonzero. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "uint32_t pros::c::task_notify_take",
      "deleted": false,
      "details": "See [https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html](https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html) for details.",
      "explicit": false,
      "fullname": "pros::c::task_notify_take",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 10,
        "file": "pros/rtos.h",
        "line": 345
      },
      "name": "task_notify_take",
      "override": false,
      "paramList": [
        {
          "name": "clear_on_exit",
          "text": "If true (1), then the notification value is cleared. If false (0), then the notification value is decremented. "
        },
        {
          "name": "timeout",
          "text": "Specifies the amount of time to be spent waiting for a notification to occur."
        }
      ],
      "params": [
        {
          "name": "clear_on_exit",
          "type": "bool",
          "typePlain": "bool"
        },
        {
          "name": "timeout",
          "type": "uint32_t",
          "typePlain": "uint32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a15f1230bbc0fe029caf775a393b4a897",
      "returns": [
        "The value of the task's notification value before it is decremented or cleared "
      ],
      "static": false,
      "strong": false,
      "summary": "Waits for a notification to be nonzero. ",
      "title": "task_notify_take",
      "type": "uint32_t",
      "typePlain": "uint32_t",
      "url": "namespacepros_1_1c.md#function-task_notify_take",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-task_notify_clear",
      "argsString": "(task_t task)",
      "brief": "Clears the notification for a task. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool pros::c::task_notify_clear",
      "deleted": false,
      "details": "See [https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html](https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html) for details.",
      "explicit": false,
      "fullname": "pros::c::task_notify_clear",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/rtos.h",
        "line": 358
      },
      "name": "task_notify_clear",
      "override": false,
      "paramList": [
        {
          "name": "task",
          "text": "The task to clear"
        }
      ],
      "params": [
        {
          "name": "task",
          "type": "[task_t](namespacepros.md#typedef-task_t)",
          "typePlain": "task_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a82a2d584952478f46b9bc766395bb8c2",
      "returns": [
        "False if there was not a notification waiting, true if there was "
      ],
      "static": false,
      "strong": false,
      "summary": "Clears the notification for a task. ",
      "title": "task_notify_clear",
      "type": "bool",
      "typePlain": "bool",
      "url": "namespacepros_1_1c.md#function-task_notify_clear",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-mutex_create",
      "argsString": "(void)",
      "brief": "Creates a mutex. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "mutex_t pros::c::mutex_create",
      "deleted": false,
      "details": "See [https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes](https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes) for details.",
      "explicit": false,
      "fullname": "pros::c::mutex_create",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/rtos.h",
        "line": 369
      },
      "name": "mutex_create",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "void",
          "typePlain": "void"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a92aa79cdc30ffd13f63a7ffeca64b06f",
      "returns": [
        "A handle to a newly created mutex. If an error occurred, NULL will be returned and errno can be checked for hints as to why mutex_create failed. "
      ],
      "static": false,
      "strong": false,
      "summary": "Creates a mutex. ",
      "title": "mutex_create",
      "type": "[mutex_t](namespacepros.md#typedef-mutex_t)",
      "typePlain": "mutex_t",
      "url": "namespacepros_1_1c.md#function-mutex_create",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-mutex_take",
      "argsString": "(mutex_t mutex, uint32_t timeout)",
      "brief": "Takes and locks a mutex, waiting for up to a certain number of milliseconds before timing out. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool pros::c::mutex_take",
      "deleted": false,
      "details": "See [https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes](https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes) for details.",
      "explicit": false,
      "fullname": "pros::c::mutex_take",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/rtos.h",
        "line": 389
      },
      "name": "mutex_take",
      "override": false,
      "paramList": [
        {
          "name": "mutex",
          "text": "[Mutex](classpros_1_1Mutex.md) to attempt to lock. "
        },
        {
          "name": "timeout",
          "text": "Time to wait before the mutex becomes available. A timeout of 0 can be used to poll the mutex. TIMEOUT_MAX can be used to block indefinitely."
        }
      ],
      "params": [
        {
          "name": "mutex",
          "type": "[mutex_t](namespacepros.md#typedef-mutex_t)",
          "typePlain": "mutex_t"
        },
        {
          "name": "timeout",
          "type": "uint32_t",
          "typePlain": "uint32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a49aa5444b488ff60fc458aea8172adc2",
      "returns": [
        "True if the mutex was successfully taken, false otherwise. If false is returned, then errno is set with a hint about why the the mutex couldn't be taken. "
      ],
      "static": false,
      "strong": false,
      "summary": "Takes and locks a mutex, waiting for up to a certain number of milliseconds before timing out. ",
      "title": "mutex_take",
      "type": "bool",
      "typePlain": "bool",
      "url": "namespacepros_1_1c.md#function-mutex_take",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-mutex_give",
      "argsString": "(mutex_t mutex)",
      "brief": "Unlocks a mutex. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool pros::c::mutex_give",
      "deleted": false,
      "details": "See [https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes](https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes) for details.",
      "explicit": false,
      "fullname": "pros::c::mutex_give",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/rtos.h",
        "line": 404
      },
      "name": "mutex_give",
      "override": false,
      "paramList": [
        {
          "name": "mutex",
          "text": "[Mutex](classpros_1_1Mutex.md) to unlock."
        }
      ],
      "params": [
        {
          "name": "mutex",
          "type": "[mutex_t](namespacepros.md#typedef-mutex_t)",
          "typePlain": "mutex_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a7f20ed94cee8e04d491743b4b34feda1",
      "returns": [
        "True if the mutex was successfully returned, false otherwise. If false is returned, then errno is set with a hint about why the mutex couldn't be returned. "
      ],
      "static": false,
      "strong": false,
      "summary": "Unlocks a mutex. ",
      "title": "mutex_give",
      "type": "bool",
      "typePlain": "bool",
      "url": "namespacepros_1_1c.md#function-mutex_give",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-mutex_delete",
      "argsString": "(mutex_t mutex)",
      "brief": "Deletes a mutex. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void pros::c::mutex_delete",
      "deleted": false,
      "explicit": false,
      "fullname": "pros::c::mutex_delete",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 6,
        "file": "pros/rtos.h",
        "line": 412
      },
      "name": "mutex_delete",
      "override": false,
      "paramList": [
        {
          "name": "mutex",
          "text": "[Mutex](classpros_1_1Mutex.md) to unlock. "
        }
      ],
      "params": [
        {
          "name": "mutex",
          "type": "[mutex_t](namespacepros.md#typedef-mutex_t)",
          "typePlain": "mutex_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1af5995c8132175bc8e76904ccd1f6e39a",
      "static": false,
      "strong": false,
      "summary": "Deletes a mutex. ",
      "title": "mutex_delete",
      "type": "void",
      "typePlain": "void",
      "url": "namespacepros_1_1c.md#function-mutex_delete",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-serial_enable",
      "argsString": "(uint8_t port)",
      "brief": "[Serial](classpros_1_1Serial.md) communication functions ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::serial_enable",
      "deleted": false,
      "details": "These functions allow programmers to communicate using UART over RS485 \n\n Enables generic serial on the given port.\n\n\nThis function uses the following values of errno when an error state is reached: EINVAL - The given value is not within the range of V5 ports (1-21). EACCES - Another resource is currently trying to access the port.",
      "explicit": false,
      "fullname": "pros::c::serial_enable",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/serial.h",
        "line": 54
      },
      "name": "serial_enable",
      "note": [
        "This function must be called before any of the generic serial functions will work."
      ],
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a3dfc8cbc0618e9a5f95467733cb95b39",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Serial communication functions ",
      "title": "serial_enable",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-serial_enable",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-serial_set_baudrate",
      "argsString": "(uint8_t port, int32_t baudrate)",
      "brief": "Sets the baudrate for the serial port to operate at. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::serial_set_baudrate",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: EINVAL - The given value is not within the range of V5 ports (1-21). EACCES - Another resource is currently trying to access the port.",
      "explicit": false,
      "fullname": "pros::c::serial_set_baudrate",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/serial.h",
        "line": 72
      },
      "name": "serial_set_baudrate",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "baudrate",
          "text": "The baudrate to operate at"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "baudrate",
          "type": "int32_t",
          "typePlain": "int32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a764ae0c3adf9c45564fdfa6ac398968e",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets the baudrate for the serial port to operate at. ",
      "title": "serial_set_baudrate",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-serial_set_baudrate",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-serial_flush",
      "argsString": "(uint8_t port)",
      "brief": "Clears the internal input and output FIFO buffers. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::serial_flush",
      "deleted": false,
      "details": "This can be useful to reset state and remove old, potentially unneeded data from the input FIFO buffer or to cancel sending any data in the output FIFO buffer.\n\n\nThis function uses the following values of errno when an error state is reached: EINVAL - The given value is not within the range of V5 ports (1-21). EACCES - Another resource is currently trying to access the port.",
      "explicit": false,
      "fullname": "pros::c::serial_flush",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/serial.h",
        "line": 97
      },
      "name": "serial_flush",
      "note": [
        "This function does not cause the data in the output buffer to be written, it simply clears the internal buffers. Unlike stdout, generic serial does not use buffered IO (the FIFO buffers are written as soon as possible)."
      ],
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a01af0f44a069891e14e17953cd3a6260",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Clears the internal input and output FIFO buffers. ",
      "title": "serial_flush",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-serial_flush",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-serial_get_read_avail",
      "argsString": "(uint8_t port)",
      "brief": "Returns the number of bytes available to be read in the the port's FIFO input buffer. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::serial_get_read_avail",
      "deleted": false,
      "details": "\nThis function uses the following values of errno when an error state is reached: EINVAL - The given value is not within the range of V5 ports (1-21). EACCES - Another resource is currently trying to access the port.",
      "explicit": false,
      "fullname": "pros::c::serial_get_read_avail",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/serial.h",
        "line": 117
      },
      "name": "serial_get_read_avail",
      "note": [
        "This function does not actually read any bytes, is simply returns the number of bytes available to be read."
      ],
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a44e637ac10841488b1e2a692cb20e733",
      "returns": [
        "The number of bytes avaliable to be read or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Returns the number of bytes available to be read in the the port's FIFO input buffer. ",
      "title": "serial_get_read_avail",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-serial_get_read_avail",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-serial_get_write_free",
      "argsString": "(uint8_t port)",
      "brief": "Returns the number of bytes free in the port's FIFO output buffer. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::serial_get_write_free",
      "deleted": false,
      "details": "\nThis function uses the following values of errno when an error state is reached: EINVAL - The given value is not within the range of V5 ports (1-21). EACCES - Another resource is currently trying to access the port.",
      "explicit": false,
      "fullname": "pros::c::serial_get_write_free",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/serial.h",
        "line": 136
      },
      "name": "serial_get_write_free",
      "note": [
        "This function does not actually write any bytes, is simply returns the number of bytes free in the port's buffer."
      ],
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a72e8b6f07f44136e0ab9ede6a9d0316e",
      "returns": [
        "The number of bytes free or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Returns the number of bytes free in the port's FIFO output buffer. ",
      "title": "serial_get_write_free",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-serial_get_write_free",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-serial_peek_byte",
      "argsString": "(uint8_t port)",
      "brief": "Reads the next byte avaliable in the port's input buffer without removing it. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::serial_peek_byte",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: EINVAL - The given value is not within the range of V5 ports (1-21). EACCES - Another resource is currently trying to access the port.",
      "explicit": false,
      "fullname": "pros::c::serial_peek_byte",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/serial.h",
        "line": 152
      },
      "name": "serial_peek_byte",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a629ab10f7b2dfa10eab9c6aedc8cfecd",
      "returns": [
        "The next byte avaliable to be read, -1 if none are available, or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Reads the next byte avaliable in the port's input buffer without removing it. ",
      "title": "serial_peek_byte",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-serial_peek_byte",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-serial_read_byte",
      "argsString": "(uint8_t port)",
      "brief": "Reads the next byte avaliable in the port's input buffer. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::serial_read_byte",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: EINVAL - The given value is not within the range of V5 ports (1-21). EACCES - Another resource is currently trying to access the port.",
      "explicit": false,
      "fullname": "pros::c::serial_read_byte",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/serial.h",
        "line": 168
      },
      "name": "serial_read_byte",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a4786d527472b1a40dafd15aaf6ef823b",
      "returns": [
        "The next byte avaliable to be read, -1 if none are available, or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Reads the next byte avaliable in the port's input buffer. ",
      "title": "serial_read_byte",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-serial_read_byte",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-serial_read",
      "argsString": "(uint8_t port, uint8_t *buffer, int32_t length)",
      "brief": "Reads up to the next length bytes from the port's input buffer and places them in the user supplied buffer. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::serial_read",
      "deleted": false,
      "details": "\nThis function uses the following values of errno when an error state is reached: EINVAL - The given value is not within the range of V5 ports (1-21). EACCES - Another resource is currently trying to access the port.",
      "explicit": false,
      "fullname": "pros::c::serial_read",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/serial.h",
        "line": 192
      },
      "name": "serial_read",
      "note": [
        "This function will only return bytes that are currently avaliable to be read and will not block waiting for any to arrive."
      ],
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "buffer",
          "text": "The location to place the data read "
        },
        {
          "name": "length",
          "text": "The maximum number of bytes to read"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "buffer",
          "type": "uint8_t *",
          "typePlain": "uint8_t *"
        },
        {
          "name": "length",
          "type": "int32_t",
          "typePlain": "int32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a5cc07e5fb43c781d5c0853a3ff645b26",
      "returns": [
        "The number of bytes read or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Reads up to the next length bytes from the port's input buffer and places them in the user supplied buffer. ",
      "title": "serial_read",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-serial_read",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-serial_write_byte",
      "argsString": "(uint8_t port, uint8_t buffer)",
      "brief": "Write the given byte to the port's output buffer. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::serial_write_byte",
      "deleted": false,
      "details": "\nThis function uses the following values of errno when an error state is reached: EINVAL - The given value is not within the range of V5 ports (1-21). EACCES - Another resource is currently trying to access the port. EIO - Serious internal write error.",
      "explicit": false,
      "fullname": "pros::c::serial_write_byte",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/serial.h",
        "line": 214
      },
      "name": "serial_write_byte",
      "note": [
        "Data in the port's output buffer is written to the serial port as soon as possible on a FIFO basis and can not be done manually by the user."
      ],
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "buffer",
          "text": "The byte to write"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "buffer",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a67712457bac23b549b04f88790977be1",
      "returns": [
        "The number of bytes written or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Write the given byte to the port's output buffer. ",
      "title": "serial_write_byte",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-serial_write_byte",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-serial_write",
      "argsString": "(uint8_t port, uint8_t *buffer, int32_t length)",
      "brief": "Writes up to length bytes from the user supplied buffer to the port's output buffer. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::serial_write",
      "deleted": false,
      "details": "\nThis function uses the following values of errno when an error state is reached: EINVAL - The given value is not within the range of V5 ports (1-21). EACCES - Another resource is currently trying to access the port. EIO - Serious internal write error.",
      "explicit": false,
      "fullname": "pros::c::serial_write",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/serial.h",
        "line": 239
      },
      "name": "serial_write",
      "note": [
        "Data in the port's output buffer is written to the serial port as soon as possible on a FIFO basis and can not be done manually by the user."
      ],
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "buffer",
          "text": "The data to write "
        },
        {
          "name": "length",
          "text": "The maximum number of bytes to write"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "buffer",
          "type": "uint8_t *",
          "typePlain": "uint8_t *"
        },
        {
          "name": "length",
          "type": "int32_t",
          "typePlain": "int32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a6178a93ae6ef642d9071c55980954e00",
      "returns": [
        "The number of bytes written or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Writes up to length bytes from the user supplied buffer to the port's output buffer. ",
      "title": "serial_write",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-serial_write",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-vision_clear_led",
      "argsString": "(uint8_t port)",
      "brief": "Clears the vision sensor LED color, reseting it back to its default behavior, displaying the most prominent object signature color. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::vision_clear_led",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor",
      "explicit": false,
      "fullname": "pros::c::vision_clear_led",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/vision.h",
        "line": 133
      },
      "name": "vision_clear_led",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ad824e5dc94e77e8d6e7a62e59a97e560",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Clears the vision sensor LED color, reseting it back to its default behavior, displaying the most prominent object signature color. ",
      "title": "vision_clear_led",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-vision_clear_led",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-vision_signature_from_utility",
      "argsString": "(const int32_t id, const int32_t u_min, const int32_t u_max, const int32_t u_mean, const int32_t v_min, const int32_t v_max, const int32_t v_mean, const float range, const int32_t type)",
      "brief": "Creates a signature from the vision sensor utility. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "vision_signature_s_t pros::c::vision_signature_from_utility",
      "deleted": false,
      "explicit": false,
      "fullname": "pros::c::vision_signature_from_utility",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 22,
        "file": "pros/vision.h",
        "line": 159
      },
      "name": "vision_signature_from_utility",
      "override": false,
      "paramList": [
        {
          "name": "id",
          "text": "The signature ID "
        },
        {
          "name": "u_min",
          "text": "Minimum value on U axis "
        },
        {
          "name": "u_max",
          "text": "Maximum value on U axis "
        },
        {
          "name": "u_mean",
          "text": "Mean value on U axis "
        },
        {
          "name": "v_min",
          "text": "Minimum value on V axis "
        },
        {
          "name": "v_max",
          "text": "Maximum value on V axis "
        },
        {
          "name": "v_mean",
          "text": "Mean value on V axis "
        },
        {
          "name": "range",
          "text": "Scale factor "
        },
        {
          "name": "type",
          "text": "Signature type"
        }
      ],
      "params": [
        {
          "name": "id",
          "type": "const int32_t",
          "typePlain": "const int32_t"
        },
        {
          "name": "u_min",
          "type": "const int32_t",
          "typePlain": "const int32_t"
        },
        {
          "name": "u_max",
          "type": "const int32_t",
          "typePlain": "const int32_t"
        },
        {
          "name": "u_mean",
          "type": "const int32_t",
          "typePlain": "const int32_t"
        },
        {
          "name": "v_min",
          "type": "const int32_t",
          "typePlain": "const int32_t"
        },
        {
          "name": "v_max",
          "type": "const int32_t",
          "typePlain": "const int32_t"
        },
        {
          "name": "v_mean",
          "type": "const int32_t",
          "typePlain": "const int32_t"
        },
        {
          "name": "range",
          "type": "const float",
          "typePlain": "const float"
        },
        {
          "name": "type",
          "type": "const int32_t",
          "typePlain": "const int32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a9a4161d557e410fff34c4f158aa229d8",
      "returns": [
        "A vision_signature_s_t that can be set using vision_set_signature "
      ],
      "static": false,
      "strong": false,
      "summary": "Creates a signature from the vision sensor utility. ",
      "title": "vision_signature_from_utility",
      "type": "[vision_signature_s_t](namespacepros.md#variable-vision_signature_s_t)",
      "typePlain": "vision_signature_s_t",
      "url": "namespacepros_1_1c.md#function-vision_signature_from_utility",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-vision_create_color_code",
      "argsString": "(uint8_t port, const uint32_t sig_id1, const uint32_t sig_id2, const uint32_t sig_id3, const uint32_t sig_id4, const uint32_t sig_id5)",
      "brief": "Creates a color code that represents a combination of the given signature IDs. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "vision_color_code_t pros::c::vision_create_color_code",
      "deleted": false,
      "details": "If fewer than 5 signatures are to be a part of the color code, pass 0 for the additional function parameters.\n\nThis function uses the following values of errno when an error state is reached: EINVAL - Fewer than two signatures have been provided or one of the signatures is out of its [1-7] range (or 0 when omitted).",
      "explicit": false,
      "fullname": "pros::c::vision_create_color_code",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 21,
        "file": "pros/vision.h",
        "line": 188
      },
      "name": "vision_create_color_code",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "sig_id1",
          "text": "The first signature id [1-7] to add to the color code "
        },
        {
          "name": "sig_id2",
          "text": "The second signature id [1-7] to add to the color code "
        },
        {
          "name": "sig_id3",
          "text": "The third signature id [1-7] to add to the color code "
        },
        {
          "name": "sig_id4",
          "text": "The fourth signature id [1-7] to add to the color code "
        },
        {
          "name": "sig_id5",
          "text": "The fifth signature id [1-7] to add to the color code"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "sig_id1",
          "type": "const uint32_t",
          "typePlain": "const uint32_t"
        },
        {
          "name": "sig_id2",
          "type": "const uint32_t",
          "typePlain": "const uint32_t"
        },
        {
          "name": "sig_id3",
          "type": "const uint32_t",
          "typePlain": "const uint32_t"
        },
        {
          "name": "sig_id4",
          "type": "const uint32_t",
          "typePlain": "const uint32_t"
        },
        {
          "name": "sig_id5",
          "type": "const uint32_t",
          "typePlain": "const uint32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a33a33d487f771f21d08c3159e6763418",
      "returns": [
        "A vision_color_code_t object containing the color code information. "
      ],
      "static": false,
      "strong": false,
      "summary": "Creates a color code that represents a combination of the given signature IDs. ",
      "title": "vision_create_color_code",
      "type": "[vision_color_code_t](namespacepros.md#typedef-vision_color_code_t)",
      "typePlain": "vision_color_code_t",
      "url": "namespacepros_1_1c.md#function-vision_create_color_code",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-vision_get_by_size",
      "argsString": "(uint8_t port, const uint32_t size_id)",
      "brief": "Gets the nth largest object according to size_id. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "vision_object_s_t pros::c::vision_get_by_size",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor EDOM - size_id is greater than the number of available objects. EHOSTDOWN - Reading the vision sensor failed for an unknown reason.",
      "explicit": false,
      "fullname": "pros::c::vision_get_by_size",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 19,
        "file": "pros/vision.h",
        "line": 210
      },
      "name": "vision_get_by_size",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "size_id",
          "text": "The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.)"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "size_id",
          "type": "const uint32_t",
          "typePlain": "const uint32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ad0b47d5910ba2a6e5d52629f2b93c3e6",
      "returns": [
        "The vision_object_s_t object corresponding to the given size id, or PROS_ERR if an error occurred. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the nth largest object according to size_id. ",
      "title": "vision_get_by_size",
      "type": "[vision_object_s_t](namespacepros.md#variable-vision_object_s_t)",
      "typePlain": "vision_object_s_t",
      "url": "namespacepros_1_1c.md#function-vision_get_by_size",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-vision_get_by_sig",
      "argsString": "(uint8_t port, const uint32_t size_id, const uint32_t sig_id)",
      "brief": "Gets the nth largest object of the given signature according to size_id. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "vision_object_s_t pros::c::vision_get_by_sig",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor EINVAL - sig_id is outside the range [1-8] EDOM - size_id is greater than the number of available objects. EAGAIN - Reading the vision sensor failed for an unknown reason.",
      "explicit": false,
      "fullname": "pros::c::vision_get_by_sig",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 19,
        "file": "pros/vision.h",
        "line": 234
      },
      "name": "vision_get_by_sig",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "size_id",
          "text": "The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) "
        },
        {
          "name": "signature",
          "text": "The signature ID [1-7] for which an object will be returned."
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "size_id",
          "type": "const uint32_t",
          "typePlain": "const uint32_t"
        },
        {
          "name": "sig_id",
          "type": "const uint32_t",
          "typePlain": "const uint32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ae53aedc2122f3b4c53d5874fde408a76",
      "returns": [
        "The vision_object_s_t object corresponding to the given signature and size_id, or PROS_ERR if an error occurred. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the nth largest object of the given signature according to size_id. ",
      "title": "vision_get_by_sig",
      "type": "[vision_object_s_t](namespacepros.md#variable-vision_object_s_t)",
      "typePlain": "vision_object_s_t",
      "url": "namespacepros_1_1c.md#function-vision_get_by_sig",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-vision_get_by_code",
      "argsString": "(uint8_t port, const uint32_t size_id, const vision_color_code_t color_code)",
      "brief": "Gets the nth largest object of the given color code according to size_id. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "vision_object_s_t pros::c::vision_get_by_code",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor EAGAIN - Reading the vision sensor failed for an unknown reason.",
      "explicit": false,
      "fullname": "pros::c::vision_get_by_code",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 19,
        "file": "pros/vision.h",
        "line": 256
      },
      "name": "vision_get_by_code",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "size_id",
          "text": "The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) "
        },
        {
          "name": "color_code",
          "text": "The vision_color_code_t for which an object will be returned"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "size_id",
          "type": "const uint32_t",
          "typePlain": "const uint32_t"
        },
        {
          "name": "color_code",
          "type": "const [vision_color_code_t](namespacepros.md#typedef-vision_color_code_t)",
          "typePlain": "const vision_color_code_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1aaf91323dda2e39bd1ef885f7a0c32b0b",
      "returns": [
        "The vision_object_s_t object corresponding to the given color code and size_id, or PROS_ERR if an error occurred. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the nth largest object of the given color code according to size_id. ",
      "title": "vision_get_by_code",
      "type": "[vision_object_s_t](namespacepros.md#variable-vision_object_s_t)",
      "typePlain": "vision_object_s_t",
      "url": "namespacepros_1_1c.md#function-vision_get_by_code",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-vision_get_exposure",
      "argsString": "(uint8_t port)",
      "brief": "Gets the exposure parameter of the [Vision](classpros_1_1Vision.md) Sensor. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::vision_get_exposure",
      "deleted": false,
      "details": "See [https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html#exposure-setting](https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html#exposure-setting) for more detials.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor",
      "explicit": false,
      "fullname": "pros::c::vision_get_exposure",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/vision.h",
        "line": 274
      },
      "name": "vision_get_exposure",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a6c463892ea46d1cfd4fb7d7e237a4db1",
      "returns": [
        "The current exposure setting from [0,150], PROS_ERR if an error occurred "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the exposure parameter of the Vision Sensor. ",
      "title": "vision_get_exposure",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-vision_get_exposure",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-vision_get_object_count",
      "argsString": "(uint8_t port)",
      "brief": "Gets the number of objects currently detected by the [Vision](classpros_1_1Vision.md) Sensor. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::vision_get_object_count",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor",
      "explicit": false,
      "fullname": "pros::c::vision_get_object_count",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/vision.h",
        "line": 290
      },
      "name": "vision_get_object_count",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a5d6c54c6754717e256a6d59976976e25",
      "returns": [
        "The number of objects detected on the specified vision sensor. Returns PROS_ERR if the port was invalid or an error occurred. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the number of objects currently detected by the Vision Sensor. ",
      "title": "vision_get_object_count",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-vision_get_object_count",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-vision_get_white_balance",
      "argsString": "(uint8_t port)",
      "brief": "Get the white balance parameter of the [Vision](classpros_1_1Vision.md) Sensor. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::vision_get_white_balance",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor",
      "explicit": false,
      "fullname": "pros::c::vision_get_white_balance",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/vision.h",
        "line": 305
      },
      "name": "vision_get_white_balance",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a698db4dbf0a04384a19d1a7496612d81",
      "returns": [
        "The current RGB white balance setting of the sensor "
      ],
      "static": false,
      "strong": false,
      "summary": "Get the white balance parameter of the Vision Sensor. ",
      "title": "vision_get_white_balance",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-vision_get_white_balance",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-vision_print_signature",
      "argsString": "(const vision_signature_s_t sig)",
      "brief": "Prints the contents of the signature as an initializer list to the terminal. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::vision_print_signature",
      "deleted": false,
      "explicit": false,
      "fullname": "pros::c::vision_print_signature",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/vision.h",
        "line": 315
      },
      "name": "vision_print_signature",
      "override": false,
      "paramList": [
        {
          "name": "sig",
          "text": "The signature for which the contents will be printed"
        }
      ],
      "params": [
        {
          "name": "sig",
          "type": "const [vision_signature_s_t](namespacepros.md#variable-vision_signature_s_t)",
          "typePlain": "const vision_signature_s_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a2f2007dafb30e5aafeb21d9acba05826",
      "returns": [
        "1 if no errors occured, PROS_ERR otherwise "
      ],
      "static": false,
      "strong": false,
      "summary": "Prints the contents of the signature as an initializer list to the terminal. ",
      "title": "vision_print_signature",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-vision_print_signature",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-vision_read_by_size",
      "argsString": "(uint8_t port, const uint32_t size_id, const uint32_t object_count, vision_object_s_t *const object_arr)",
      "brief": "Reads up to object_count object descriptors into object_arr. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::vision_read_by_size",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21), or fewer than object_count number of objects were found. ENODEV - The port cannot be configured as a vision sensor EDOM - size_id is greater than the number of available objects.",
      "explicit": false,
      "fullname": "pros::c::vision_read_by_size",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/vision.h",
        "line": 343
      },
      "name": "vision_read_by_size",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "size_id",
          "text": "The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) "
        },
        {
          "name": "object_count",
          "text": "The number of objects to read "
        },
        {
          "name": "object_arr",
          "text": "A pointer to copy the objects into"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "size_id",
          "type": "const uint32_t",
          "typePlain": "const uint32_t"
        },
        {
          "name": "object_count",
          "type": "const uint32_t",
          "typePlain": "const uint32_t"
        },
        {
          "name": "object_arr",
          "type": "[vision_object_s_t](namespacepros.md#variable-vision_object_s_t) *const",
          "typePlain": "vision_object_s_t *const"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a4ec230e74ab6348768a5156c9e5c5a0b",
      "returns": [
        "The number of object signatures copied. This number will be less than object_count if there are fewer objects detected by the vision sensor. Returns PROS_ERR if the port was invalid, an error occurred, or fewer objects than size_id were found. All objects in object_arr that were not found are given VISION_OBJECT_ERR_SIG as their signature. "
      ],
      "static": false,
      "strong": false,
      "summary": "Reads up to object_count object descriptors into object_arr. ",
      "title": "vision_read_by_size",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-vision_read_by_size",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-vision_read_by_sig",
      "argsString": "(uint8_t port, const uint32_t size_id, const uint32_t sig_id, const uint32_t object_count, vision_object_s_t *const object_arr)",
      "brief": "Reads up to object_count object descriptors into object_arr. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::vision_read_by_sig",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21), or fewer than object_count number of objects were found. ENODEV - The port cannot be configured as a vision sensor EDOM - size_id is greater than the number of available objects.",
      "explicit": false,
      "fullname": "pros::c::vision_read_by_sig",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/vision.h",
        "line": 374
      },
      "name": "vision_read_by_sig",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "object_count",
          "text": "The number of objects to read "
        },
        {
          "name": "size_id",
          "text": "The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) "
        },
        {
          "name": "signature",
          "text": "The signature ID [1-7] for which objects will be returned. "
        },
        {
          "name": "object_arr",
          "text": "A pointer to copy the objects into"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "size_id",
          "type": "const uint32_t",
          "typePlain": "const uint32_t"
        },
        {
          "name": "sig_id",
          "type": "const uint32_t",
          "typePlain": "const uint32_t"
        },
        {
          "name": "object_count",
          "type": "const uint32_t",
          "typePlain": "const uint32_t"
        },
        {
          "name": "object_arr",
          "type": "[vision_object_s_t](namespacepros.md#variable-vision_object_s_t) *const",
          "typePlain": "vision_object_s_t *const"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a0f38715b935eae0421d59e5102d98155",
      "returns": [
        "The number of object signatures copied. This number will be less than object_count if there are fewer objects detected by the vision sensor. Returns PROS_ERR if the port was invalid, an error occurred, or fewer objects than size_id were found. All objects in object_arr that were not found are given VISION_OBJECT_ERR_SIG as their signature. "
      ],
      "static": false,
      "strong": false,
      "summary": "Reads up to object_count object descriptors into object_arr. ",
      "title": "vision_read_by_sig",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-vision_read_by_sig",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-vision_read_by_code",
      "argsString": "(uint8_t port, const uint32_t size_id, const vision_color_code_t color_code, const uint32_t object_count, vision_object_s_t *const object_arr)",
      "brief": "Reads up to object_count object descriptors into object_arr. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::vision_read_by_code",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21), or fewer than object_count number of objects were found. ENODEV - The port cannot be configured as a vision sensor",
      "explicit": false,
      "fullname": "pros::c::vision_read_by_code",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/vision.h",
        "line": 404
      },
      "name": "vision_read_by_code",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "object_count",
          "text": "The number of objects to read "
        },
        {
          "name": "size_id",
          "text": "The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) "
        },
        {
          "name": "color_code",
          "text": "The vision_color_code_t for which objects will be returned "
        },
        {
          "name": "object_arr",
          "text": "A pointer to copy the objects into"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "size_id",
          "type": "const uint32_t",
          "typePlain": "const uint32_t"
        },
        {
          "name": "color_code",
          "type": "const [vision_color_code_t](namespacepros.md#typedef-vision_color_code_t)",
          "typePlain": "const vision_color_code_t"
        },
        {
          "name": "object_count",
          "type": "const uint32_t",
          "typePlain": "const uint32_t"
        },
        {
          "name": "object_arr",
          "type": "[vision_object_s_t](namespacepros.md#variable-vision_object_s_t) *const",
          "typePlain": "vision_object_s_t *const"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a0363eec188a23e6d41e98449a323a091",
      "returns": [
        "The number of object signatures copied. This number will be less than object_count if there are fewer objects detected by the vision sensor. Returns PROS_ERR if the port was invalid, an error occurred, or fewer objects than size_id were found. All objects in object_arr that were not found are given VISION_OBJECT_ERR_SIG as their signature. "
      ],
      "static": false,
      "strong": false,
      "summary": "Reads up to object_count object descriptors into object_arr. ",
      "title": "vision_read_by_code",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-vision_read_by_code",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-vision_get_signature",
      "argsString": "(uint8_t port, const uint8_t signature_id)",
      "brief": "Gets the object detection signature with the given id number. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "vision_signature_s_t pros::c::vision_get_signature",
      "deleted": false,
      "explicit": false,
      "fullname": "pros::c::vision_get_signature",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 22,
        "file": "pros/vision.h",
        "line": 417
      },
      "name": "vision_get_signature",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "signature_id",
          "text": "The signature id to read"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "signature_id",
          "type": "const uint8_t",
          "typePlain": "const uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a42e645bdac1e2eb230fd55205f37dd5f",
      "returns": [
        "A vision_signature_s_t containing information about the signature. "
      ],
      "static": false,
      "strong": false,
      "summary": "Gets the object detection signature with the given id number. ",
      "title": "vision_get_signature",
      "type": "[vision_signature_s_t](namespacepros.md#variable-vision_signature_s_t)",
      "typePlain": "vision_signature_s_t",
      "url": "namespacepros_1_1c.md#function-vision_get_signature",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-vision_set_signature",
      "argsString": "(uint8_t port, const uint8_t signature_id, vision_signature_s_t *const signature_ptr)",
      "brief": "Stores the supplied object detection signature onto the vision sensor. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::vision_set_signature",
      "deleted": false,
      "details": "NOTE: This saves the signature in volatile memory, and the signature will be lost as soon as the sensor is powered down.",
      "explicit": false,
      "fullname": "pros::c::vision_set_signature",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/vision.h",
        "line": 434
      },
      "name": "vision_set_signature",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "signature_id",
          "text": "The signature id to store into "
        },
        {
          "name": "signature_ptr",
          "text": "A pointer to the signature to save"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "signature_id",
          "type": "const uint8_t",
          "typePlain": "const uint8_t"
        },
        {
          "name": "signature_ptr",
          "type": "[vision_signature_s_t](namespacepros.md#variable-vision_signature_s_t) *const",
          "typePlain": "vision_signature_s_t *const"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a7812fb755e22f147e11ae29911149242",
      "returns": [
        "1 if no errors occured, PROS_ERR otherwise "
      ],
      "static": false,
      "strong": false,
      "summary": "Stores the supplied object detection signature onto the vision sensor. ",
      "title": "vision_set_signature",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-vision_set_signature",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-vision_set_auto_white_balance",
      "argsString": "(uint8_t port, const uint8_t enable)",
      "brief": "Enables/disables auto white-balancing on the [Vision](classpros_1_1Vision.md) Sensor. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::vision_set_auto_white_balance",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor EINVAL - enable was not 0 or 1",
      "explicit": false,
      "fullname": "pros::c::vision_set_auto_white_balance",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/vision.h",
        "line": 453
      },
      "name": "vision_set_auto_white_balance",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "enabled",
          "text": "Pass 0 to disable, 1 to enable"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "enable",
          "type": "const uint8_t",
          "typePlain": "const uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a146e2f14c5a77f1a20fc64762910112c",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Enables/disables auto white-balancing on the Vision Sensor. ",
      "title": "vision_set_auto_white_balance",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-vision_set_auto_white_balance",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-vision_set_exposure",
      "argsString": "(uint8_t port, const uint8_t exposure)",
      "brief": "Sets the exposure parameter of the [Vision](classpros_1_1Vision.md) Sensor. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::vision_set_exposure",
      "deleted": false,
      "details": "See [https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html#exposure-setting](https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html#exposure-setting) for more detials.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor",
      "explicit": false,
      "fullname": "pros::c::vision_set_exposure",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/vision.h",
        "line": 473
      },
      "name": "vision_set_exposure",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "percent",
          "text": "The new exposure setting from [0,150]"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "exposure",
          "type": "const uint8_t",
          "typePlain": "const uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a133b8ef84216367d5df385c2eb869ef4",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets the exposure parameter of the Vision Sensor. ",
      "title": "vision_set_exposure",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-vision_set_exposure",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-vision_set_led",
      "argsString": "(uint8_t port, const int32_t rgb)",
      "brief": "Sets the vision sensor LED color, overriding the automatic behavior. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::vision_set_led",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor",
      "explicit": false,
      "fullname": "pros::c::vision_set_led",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/vision.h",
        "line": 491
      },
      "name": "vision_set_led",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "rgb",
          "text": "An RGB code to set the LED to"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "rgb",
          "type": "const int32_t",
          "typePlain": "const int32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a9a01d95432c9dcd138c11ff718b0b264",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets the vision sensor LED color, overriding the automatic behavior. ",
      "title": "vision_set_led",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-vision_set_led",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-vision_set_white_balance",
      "argsString": "(uint8_t port, const int32_t rgb)",
      "brief": "Sets the white balance parameter of the [Vision](classpros_1_1Vision.md) Sensor. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::vision_set_white_balance",
      "deleted": false,
      "details": "This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor",
      "explicit": false,
      "fullname": "pros::c::vision_set_white_balance",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/vision.h",
        "line": 509
      },
      "name": "vision_set_white_balance",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "rgb",
          "text": "The new RGB white balance setting of the sensor"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "rgb",
          "type": "const int32_t",
          "typePlain": "const int32_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1ac3be7d132e62ab6b2bd20f564e9a5c85",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets the white balance parameter of the Vision Sensor. ",
      "title": "vision_set_white_balance",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-vision_set_white_balance",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-vision_set_zero_point",
      "argsString": "(uint8_t port, vision_zero_e_t zero_point)",
      "brief": "Sets the (0,0) coordinate for the Field of View. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::vision_set_zero_point",
      "deleted": false,
      "details": "This will affect the coordinates returned for each request for a vision_object_s_t from the sensor, so it is recommended that this function only be used to configure the sensor at the beginning of its use.\n\nThis function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor",
      "explicit": false,
      "fullname": "pros::c::vision_set_zero_point",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/vision.h",
        "line": 531
      },
      "name": "vision_set_zero_point",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "zero_point",
          "text": "One of vision_zero_e_t to set the (0,0) coordinate for the FOV"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "zero_point",
          "type": "vision_zero_e_t",
          "typePlain": "vision_zero_e_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a00226eaa06fb4907a90ac188ec16a6c3",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets the (0,0) coordinate for the Field of View. ",
      "title": "vision_set_zero_point",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-vision_set_zero_point",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-vision_set_wifi_mode",
      "argsString": "(uint8_t port, const uint8_t enable)",
      "brief": "Sets the Wi-Fi mode of the [Vision](classpros_1_1Vision.md) sensor. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "int32_t pros::c::vision_set_wifi_mode",
      "deleted": false,
      "details": "This functions uses the following values of errno when an error state is reached: ENXIO - The given port is not within the range of V5 ports (1-21) EACCESS - Anothe resources is currently trying to access the port",
      "explicit": false,
      "fullname": "pros::c::vision_set_wifi_mode",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "location": {
        "column": 9,
        "file": "pros/vision.h",
        "line": 549
      },
      "name": "vision_set_wifi_mode",
      "override": false,
      "paramList": [
        {
          "name": "port",
          "text": "The V5 port number from 1-21 "
        },
        {
          "name": "enable",
          "text": "Disable Wi-Fi on the [Vision](classpros_1_1Vision.md) sensor if 0, enable otherwise (e.g. 1)"
        }
      ],
      "params": [
        {
          "name": "port",
          "type": "uint8_t",
          "typePlain": "uint8_t"
        },
        {
          "name": "enable",
          "type": "const uint8_t",
          "typePlain": "const uint8_t"
        }
      ],
      "pureVirtual": false,
      "refid": "namespacepros_1_1c_1a86efa93d00dc9646f726eea073068117",
      "returns": [
        "1 if the operation was successful or PROS_ERR if the operation failed, setting errno. "
      ],
      "static": false,
      "strong": false,
      "summary": "Sets the Wi-Fi mode of the Vision sensor. ",
      "title": "vision_set_wifi_mode",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#function-vision_set_wifi_mode",
      "virtual": false,
      "visibility": "public"
    }
  ],
  "publicTypes": [
    {
      "abstract": false,
      "anchor": "#enum-v5_device_e",
      "brief": "Device Registration ",
      "category": "types",
      "const": false,
      "definition": "",
      "enumvalues": [
        {
          "anchor": "#enumvalue-e_device_none",
          "category": "types",
          "definition": "",
          "fullname": "v5_device_e::E_DEVICE_NONE",
          "hasDetails": false,
          "initializer": "= 0",
          "kind": "enumvalue",
          "name": "E_DEVICE_NONE",
          "refid": "namespacepros_1_1c_1aaba853cd2f7eed658c07dafd7cc41a45a929153c5f75689b1d957d06074b5fae8",
          "title": "E_DEVICE_NONE",
          "url": "namespacepros_1_1c.md#enumvalue-e_device_none",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_device_motor",
          "category": "types",
          "definition": "",
          "fullname": "v5_device_e::E_DEVICE_MOTOR",
          "hasDetails": false,
          "initializer": "= 2",
          "kind": "enumvalue",
          "name": "E_DEVICE_MOTOR",
          "refid": "namespacepros_1_1c_1aaba853cd2f7eed658c07dafd7cc41a45a467b42f234e0a690ffe8cb36136afd8a",
          "title": "E_DEVICE_MOTOR",
          "url": "namespacepros_1_1c.md#enumvalue-e_device_motor",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_device_imu",
          "category": "types",
          "definition": "",
          "fullname": "v5_device_e::E_DEVICE_IMU",
          "hasDetails": false,
          "initializer": "= 6",
          "kind": "enumvalue",
          "name": "E_DEVICE_IMU",
          "refid": "namespacepros_1_1c_1aaba853cd2f7eed658c07dafd7cc41a45a3eb6fb1ce8dc100664a443aab43a8a45",
          "title": "E_DEVICE_IMU",
          "url": "namespacepros_1_1c.md#enumvalue-e_device_imu",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_device_radio",
          "category": "types",
          "definition": "",
          "fullname": "v5_device_e::E_DEVICE_RADIO",
          "hasDetails": false,
          "initializer": "= 8",
          "kind": "enumvalue",
          "name": "E_DEVICE_RADIO",
          "refid": "namespacepros_1_1c_1aaba853cd2f7eed658c07dafd7cc41a45a42aa9d24679cd762cb25dea691bac391",
          "title": "E_DEVICE_RADIO",
          "url": "namespacepros_1_1c.md#enumvalue-e_device_radio",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_device_vision",
          "category": "types",
          "definition": "",
          "fullname": "v5_device_e::E_DEVICE_VISION",
          "hasDetails": false,
          "initializer": "= 11",
          "kind": "enumvalue",
          "name": "E_DEVICE_VISION",
          "refid": "namespacepros_1_1c_1aaba853cd2f7eed658c07dafd7cc41a45a32cb9f019c5d7a71a891efd00382f223",
          "title": "E_DEVICE_VISION",
          "url": "namespacepros_1_1c.md#enumvalue-e_device_vision",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_device_adi",
          "category": "types",
          "definition": "",
          "fullname": "v5_device_e::E_DEVICE_ADI",
          "hasDetails": false,
          "initializer": "= 12",
          "kind": "enumvalue",
          "name": "E_DEVICE_ADI",
          "refid": "namespacepros_1_1c_1aaba853cd2f7eed658c07dafd7cc41a45aaf0a34b25623b86363823c284133b1e1",
          "title": "E_DEVICE_ADI",
          "url": "namespacepros_1_1c.md#enumvalue-e_device_adi",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_device_generic",
          "category": "types",
          "definition": "",
          "fullname": "v5_device_e::E_DEVICE_GENERIC",
          "hasDetails": false,
          "initializer": "= 129",
          "kind": "enumvalue",
          "name": "E_DEVICE_GENERIC",
          "refid": "namespacepros_1_1c_1aaba853cd2f7eed658c07dafd7cc41a45ae9028479515ca4bf8d2eb125d2bdeacc",
          "title": "E_DEVICE_GENERIC",
          "url": "namespacepros_1_1c.md#enumvalue-e_device_generic",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_device_undefined",
          "category": "types",
          "definition": "",
          "fullname": "v5_device_e::E_DEVICE_UNDEFINED",
          "hasDetails": false,
          "initializer": "= 255",
          "kind": "enumvalue",
          "name": "E_DEVICE_UNDEFINED",
          "refid": "namespacepros_1_1c_1aaba853cd2f7eed658c07dafd7cc41a45a4a089975a8d1abaaf4c4bf0c35512cd3",
          "title": "E_DEVICE_UNDEFINED",
          "url": "namespacepros_1_1c.md#enumvalue-e_device_undefined",
          "visibility": "public"
        }
      ],
      "explicit": false,
      "fullname": "pros::c::v5_device_e",
      "hasDetails": false,
      "inline": false,
      "kind": "enum",
      "location": {
        "bodyEnd": 378,
        "bodyFile": "pros/apix.h",
        "bodyStart": 369,
        "column": 25,
        "file": "pros/apix.h",
        "line": 369
      },
      "name": "v5_device_e",
      "override": false,
      "refid": "namespacepros_1_1c_1aaba853cd2f7eed658c07dafd7cc41a45",
      "static": false,
      "strong": false,
      "summary": "Device Registration ",
      "title": "v5_device_e",
      "url": "namespacepros_1_1c.md#enum-v5_device_e",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#enum-imu_status_e",
      "category": "types",
      "const": false,
      "definition": "",
      "enumvalues": [
        {
          "anchor": "#enumvalue-e_imu_status_calibrating",
          "category": "types",
          "definition": "",
          "fullname": "imu_status_e::E_IMU_STATUS_CALIBRATING",
          "hasDetails": false,
          "initializer": "= 0x01",
          "kind": "enumvalue",
          "name": "E_IMU_STATUS_CALIBRATING",
          "refid": "namespacepros_1_1c_1a74af1f93aaa6112117b4436b4b1f230da67fb53f117f53122424f7862cd150a60",
          "title": "E_IMU_STATUS_CALIBRATING",
          "url": "namespacepros_1_1c.md#enumvalue-e_imu_status_calibrating",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-e_imu_status_error",
          "category": "types",
          "definition": "",
          "fullname": "imu_status_e::E_IMU_STATUS_ERROR",
          "hasDetails": false,
          "initializer": "= 0xFF",
          "kind": "enumvalue",
          "name": "E_IMU_STATUS_ERROR",
          "refid": "namespacepros_1_1c_1a74af1f93aaa6112117b4436b4b1f230da00266d26728436035f878ec88e6aba88",
          "title": "E_IMU_STATUS_ERROR",
          "url": "namespacepros_1_1c.md#enumvalue-e_imu_status_error",
          "visibility": "public"
        }
      ],
      "explicit": false,
      "fullname": "pros::c::imu_status_e",
      "hasDetails": false,
      "inline": false,
      "kind": "enum",
      "location": {
        "bodyEnd": 35,
        "bodyFile": "pros/imu.h",
        "bodyStart": 31,
        "column": 26,
        "file": "pros/imu.h",
        "line": 31
      },
      "name": "imu_status_e",
      "override": false,
      "refid": "namespacepros_1_1c_1a74af1f93aaa6112117b4436b4b1f230d",
      "static": false,
      "strong": false,
      "title": "imu_status_e",
      "url": "namespacepros_1_1c.md#enum-imu_status_e",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-adi_encoder_t",
      "brief": "Reference type for an initialized encoder. ",
      "category": "types",
      "const": false,
      "definition": "typedef int32_t adi_encoder_t",
      "details": "This merely contains the port number for the encoder, unlike its use as an object to store encoder data in PROS 2. ",
      "explicit": false,
      "fullname": "pros::c::adi_encoder_t",
      "hasDetails": true,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "pros/adi.h",
        "bodyStart": 465,
        "column": 17,
        "file": "pros/adi.h",
        "line": 465
      },
      "name": "adi_encoder_t",
      "override": false,
      "refid": "namespacepros_1_1c_1adc7331a863ca648693c688af1ae9a940",
      "static": false,
      "strong": false,
      "summary": "Reference type for an initialized encoder. ",
      "title": "adi_encoder_t",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#typedef-adi_encoder_t",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-adi_ultrasonic_t",
      "brief": "Reference type for an initialized ultrasonic. ",
      "category": "types",
      "const": false,
      "definition": "typedef int32_t adi_ultrasonic_t",
      "details": "This merely contains the port number for the ultrasonic, unlike its use as an object to store ultrasonic data in PROS 2. ",
      "explicit": false,
      "fullname": "pros::c::adi_ultrasonic_t",
      "hasDetails": true,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "pros/adi.h",
        "bodyStart": 550,
        "column": 17,
        "file": "pros/adi.h",
        "line": 550
      },
      "name": "adi_ultrasonic_t",
      "override": false,
      "refid": "namespacepros_1_1c_1a642e06a44cad02177d4111261e17c3df",
      "static": false,
      "strong": false,
      "summary": "Reference type for an initialized ultrasonic. ",
      "title": "adi_ultrasonic_t",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#typedef-adi_ultrasonic_t",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-adi_gyro_t",
      "brief": "Reference type for an initialized gyroscope. ",
      "category": "types",
      "const": false,
      "definition": "typedef int32_t adi_gyro_t",
      "details": "This merely contains the port number for the gyroscope, unlike its use as an object to store gyro data in PROS 2. ",
      "explicit": false,
      "fullname": "pros::c::adi_gyro_t",
      "hasDetails": true,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "pros/adi.h",
        "bodyStart": 614,
        "column": 17,
        "file": "pros/adi.h",
        "line": 614
      },
      "name": "adi_gyro_t",
      "override": false,
      "refid": "namespacepros_1_1c_1a9c451728d4193f1a4e59d7dc489ac292",
      "static": false,
      "strong": false,
      "summary": "Reference type for an initialized gyroscope. ",
      "title": "adi_gyro_t",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#typedef-adi_gyro_t",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-queue_t",
      "brief": "RTOS FACILITIES ",
      "category": "types",
      "const": false,
      "definition": "typedef void* queue_t",
      "details": "See [https://pros.cs.purdue.edu/v5/extended/multitasking.html](https://pros.cs.purdue.edu/v5/extended/multitasking.html) to learn more ",
      "explicit": false,
      "fullname": "pros::c::queue_t",
      "hasDetails": true,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "pros/apix.h",
        "bodyStart": 46,
        "column": 14,
        "file": "pros/apix.h",
        "line": 46
      },
      "name": "queue_t",
      "override": false,
      "refid": "namespacepros_1_1c_1a2d363eefb03348f96e985eadcfb184ab",
      "static": false,
      "strong": false,
      "summary": "RTOS FACILITIES ",
      "title": "queue_t",
      "type": "void *",
      "typePlain": "void *",
      "url": "namespacepros_1_1c.md#typedef-queue_t",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-sem_t",
      "category": "types",
      "const": false,
      "definition": "typedef void* sem_t",
      "explicit": false,
      "fullname": "pros::c::sem_t",
      "hasDetails": false,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "pros/apix.h",
        "bodyStart": 47,
        "column": 14,
        "file": "pros/apix.h",
        "line": 47
      },
      "name": "sem_t",
      "override": false,
      "refid": "namespacepros_1_1c_1abc53a59ab4c3c8f2d7660e63990be7a7",
      "static": false,
      "strong": false,
      "title": "sem_t",
      "type": "void *",
      "typePlain": "void *",
      "url": "namespacepros_1_1c.md#typedef-sem_t",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-ext_adi_encoder_t",
      "brief": "Reference type for an initialized encoder. ",
      "category": "types",
      "const": false,
      "definition": "typedef int32_t ext_adi_encoder_t",
      "details": "This merely contains the port number for the encoder, unlike its use as an object to store encoder data in PROS 2. ",
      "explicit": false,
      "fullname": "pros::c::ext_adi_encoder_t",
      "hasDetails": true,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "pros/ext_adi.h",
        "bodyStart": 390,
        "column": 17,
        "file": "pros/ext_adi.h",
        "line": 390
      },
      "name": "ext_adi_encoder_t",
      "override": false,
      "refid": "namespacepros_1_1c_1a819f455cfd280a0a3f2489ee88aa19ac",
      "static": false,
      "strong": false,
      "summary": "Reference type for an initialized encoder. ",
      "title": "ext_adi_encoder_t",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#typedef-ext_adi_encoder_t",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-ext_adi_ultrasonic_t",
      "brief": "Reference type for an initialized ultrasonic. ",
      "category": "types",
      "const": false,
      "definition": "typedef int32_t ext_adi_ultrasonic_t",
      "details": "This merely contains the port number for the ultrasonic, unlike its use as an object to store encoder data in PROS 2. ",
      "explicit": false,
      "fullname": "pros::c::ext_adi_ultrasonic_t",
      "hasDetails": true,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "pros/ext_adi.h",
        "bodyStart": 478,
        "column": 17,
        "file": "pros/ext_adi.h",
        "line": 478
      },
      "name": "ext_adi_ultrasonic_t",
      "override": false,
      "refid": "namespacepros_1_1c_1a628d2ba74a77b5d590e4b865e3f4a7aa",
      "static": false,
      "strong": false,
      "summary": "Reference type for an initialized ultrasonic. ",
      "title": "ext_adi_ultrasonic_t",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#typedef-ext_adi_ultrasonic_t",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-ext_adi_gyro_t",
      "brief": "Reference type for an initialized gyroscope. ",
      "category": "types",
      "const": false,
      "definition": "typedef int32_t ext_adi_gyro_t",
      "details": "This merely contains the port number for the gyroscope, unlike its use as an object to store gyro data in PROS 2.\n\n(Might Be useless with the wire expander.) ",
      "explicit": false,
      "fullname": "pros::c::ext_adi_gyro_t",
      "hasDetails": true,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "pros/ext_adi.h",
        "bodyStart": 549,
        "column": 17,
        "file": "pros/ext_adi.h",
        "line": 549
      },
      "name": "ext_adi_gyro_t",
      "override": false,
      "refid": "namespacepros_1_1c_1aeb1fda9da4589cd3cd2e9efe5693f308",
      "static": false,
      "strong": false,
      "summary": "Reference type for an initialized gyroscope. ",
      "title": "ext_adi_gyro_t",
      "type": "int32_t",
      "typePlain": "int32_t",
      "url": "namespacepros_1_1c.md#typedef-ext_adi_gyro_t",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-imu_gyro_s_t",
      "category": "types",
      "const": false,
      "definition": "typedef struct imu_raw_s imu_gyro_s_t",
      "explicit": false,
      "fullname": "pros::c::imu_gyro_s_t",
      "hasDetails": false,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "pros/imu.h",
        "bodyStart": 50,
        "column": 2,
        "file": "pros/imu.h",
        "line": 42
      },
      "name": "imu_gyro_s_t",
      "override": false,
      "refid": "namespacepros_1_1c_1a5b9e240cfb181cce3c741e29efbbbf23",
      "static": false,
      "strong": false,
      "title": "imu_gyro_s_t",
      "type": "struct [imu_raw_s](structpros_1_1c_1_1imu__raw__s.md)",
      "typePlain": "struct imu_raw_s",
      "url": "namespacepros_1_1c.md#typedef-imu_gyro_s_t",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-imu_accel_s_t",
      "category": "types",
      "const": false,
      "definition": "typedef struct imu_raw_s imu_accel_s_t",
      "explicit": false,
      "fullname": "pros::c::imu_accel_s_t",
      "hasDetails": false,
      "inline": false,
      "kind": "typedef",
      "location": {
        "bodyFile": "pros/imu.h",
        "bodyStart": 51,
        "column": 2,
        "file": "pros/imu.h",
        "line": 42
      },
      "name": "imu_accel_s_t",
      "override": false,
      "refid": "namespacepros_1_1c_1a70eb3173193f4f46266eade4c243f662",
      "static": false,
      "strong": false,
      "title": "imu_accel_s_t",
      "type": "struct [imu_raw_s](structpros_1_1c_1_1imu__raw__s.md)",
      "typePlain": "struct imu_raw_s",
      "url": "namespacepros_1_1c.md#typedef-imu_accel_s_t",
      "visibility": "public"
    }
  ],
  "refid": "namespacepros_1_1c",
  "static": false,
  "strong": false,
  "title": "pros::c",
  "url": "namespacepros_1_1c.md",
  "visibility": "public"
}